{"version":3,"file":"static/webpack/static/development/pages/index.js.9a15b3243cb2b6af56e5.hot-update.js","sources":["webpack:///./app/contentComponents/Card/Card.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect, useContext } from 'react';\nimport styled from 'styled-components';\n//custom\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport IconsStateManagement from './IconsStateManagement/IconsStateManagement';\nimport { MoviesContext } from '../../../pages/index';\nimport { calculateAvarageRatings } from './CardUtills/calculateAvarageRating';\n\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907',\n};\n\nconst CardContainer = styled.div<{\n  color: string;\n}>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${(props) => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  max-width: 200px;\n  max-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\nconst PosterImage = styled.div<{\n  imgURL: string;\n}>`\n  width: 150px;\n  height: 221px;\n  border-radius: 10px;\n  background-image: url(${(props) => props.imgURL});\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n`;\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px 10px 0px 10px;\n`;\nconst CardFooter = styled.div`\n  width: 100%;\n  padding-top: 7px;\n`;\ninterface Props {\n  cardId: number;\n}\nfunction Card({ cardId }: Props) {\n  const [backgroundColor, setBgColor] = useState(cardColorMapping.default);\n  const [count, setCount] = useState(0);\n\n  /*\n      useCallback(()={},[depends]) and useMemo(()=>{}(),[depends]) \n      and \n      React.memo(ChildComponent) they are somehow related to each other\n     \n     HOW ?\n     useCallBack and useMemo will momoized function so it is unique so it is not being re-created\n     with next update of  functional component (** explanation below **)\n\n     The child component if also has to stay controlled , so it wont re-render\n     unnecessary it needs to have props change check, and this is what React.Memo()\n     HOC does. \n\n      let init = 0\n      const callToAction1 = () => {\n        init = init + 2\n        callToActionCardCount(init)\n      };\n\n      if we don t use React.memo() let init = 0 will be called \n      every time component update\n\n      !!but if we use useState() hook then we don t care for component body \n      to be re-render cause useState keeps track of the value we using independently\n\n      const [count, setCount] = useState(0);\n      const callToAction1 = () => {\n        setCount(count + 1)\n        callToActionCardCount(count)\n      };\n\n\n    \n  */\n\n  /*\n       (** explanation **)\n\n     in javascript World if something has been re-created that is object related (functions are as well objects)\n     even with the same name, args etc ...in reality it is not the SAME! \n     because it was re-created again with the same \n     name but with different memory allocations. so the only way to make sure the \n     function is locked is to wrap it with useCallback or useMemo, due to the fact the \n     hook component will re-render everything every time it updates something.\n  \n  */\n\n\n  //register setColor once and dont re-render\n  // const setColor = useCallback(({ watch, favorite }) => {\n  const setColor = ({ watch, favorite }) => {\n    switch (true) {\n      case !watch && !favorite:\n        setBgColor(cardColorMapping.default);\n        console.log('cardColorMapping.default')\n        break;\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        break;\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        break;\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        break;\n      default:\n        break;\n    }\n  }\n  //}, []);\n\n  const increaseCount = useCallback((value) => {\n    setCount(value)\n  }, [])\n\n\n  const { movies } = useContext(MoviesContext);\n  const { Watched, Saved, Title, Poster: PosterURL, Ratings } = movies[cardId];\n  const movieStatus = {\n    watch: JSON.parse(Watched.toLowerCase()),\n    favorite: JSON.parse(Saved.toLowerCase()),\n  };\n\n  useEffect(() => {\n    setColor({ ...movieStatus })\n  }, [])\n\n  return (\n    <CardContainer color={backgroundColor} key={Title}>\n      <p>{`count:${count}`}</p>\n      <CardHeader>\n        <IconsStateManagement\n          //callToActionCardColor={setColor}\n          callToActionCardCount={increaseCount}\n          {...movieStatus}\n        />\n      </CardHeader>\n      <Poster>\n        <PosterImage imgURL={PosterURL} />\n      </Poster>\n      <CardFooter>\n        <RatingStarComp rating={calculateAvarageRatings(Ratings)} />\n      </CardFooter>\n    </CardContainer>\n  );\n}\n\nexport default Card;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAKA;AALA;AAgBA;AAKA;AAMA;AANA;AAUA;AAMA;AACA;AAMA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;;;AAaA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAfA;AAvDA;AACA;AACA;AAyEA;AACA;AADA;AACA;AA5EA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkFA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AAAA;AAAA;AAGA;AAEA;AAFA;AAOA;AAAA;AAGA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}