{"version":3,"file":"static/webpack/static/development/pages/index.js.51b24e6adf26dd1243f4.hot-update.js","sources":["webpack:///./app/contentComponents/Card/IconsStateManagement/IconsStateManagement.tsx"],"sourcesContent":["import React from 'react';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\n//custom\nimport wrapperIconHOC from '../../IconCTA/IconAction';\nconst VisibilityWatchedIcon = wrapperIconHOC(\n  VisibilityOffOutlinedIcon,\n  VisibilityIcon\n);\nconst VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon);\n\n/*---------*/\ninterface IconStateInt {\n  watch: boolean;\n  favorite: boolean;\n}\n\ninterface PropsI {\n  callToActionCardColor?: (state: object) => void;\n  callToActionCardCount: (ss: number) => void;\n  watch: boolean;\n  favorite: boolean;\n}\n\nconst IconsStateManagement = ({\n  callToActionCardColor,\n  callToActionCardCount,\n  watch,\n  favorite,\n}: PropsI) => {\n  //initial state here at let declaration;\n  console.log('watch', watch, 'favorite', favorite)\n  let prevState = { watch, favorite };\n  const callToAction = (iconState: object) => {\n    callToActionCardColor({ ...prevState, ...iconState });\n    prevState = { ...prevState, ...iconState };\n  };\n  let tt = 0\n  const callToAction1 = () => {\n    tt = tt + 2\n    callToActionCardCount(tt)\n  };\n\n  // callToActionCardColor({ watch, favorite });\n  //initial state\n  //optional to set prevState here after setting initial card colors\n  //prevState = { watch, favorite }\n\n  return (\n    <>\n      <p onClick={() => { callToAction1() }}>{'click me'}</p>\n      <VisibilityWatchedIcon\n        callToAction={callToAction}\n        icon=\"watch\"\n        isActive={watch}\n      />\n      <VisibilitySavedIcon\n        callToAction={callToAction}\n        icon=\"favorite\"\n        isActive={favorite}\n      />\n    </>\n  );\n};\n\n\nexport default IconsStateManagement;\n//export default React.memo(IconsStateManagement);\n//React.memo HOC will make sure the component will remember its props\n//and only re-render the entire component body if any of props has\n//changed \n//without React.memo it will re-render anyway even without a prop change\n//notice this component doesn`t use hooks is simple functional components\n//that check the pros changes \n\n\n/*\n    from documentation:\n\n    React.memo only checks for prop changes.\n    By default it will only shallowly compare complex objects in the props object.\n    If you want control over the comparison, you can also provide a custom comparison function as the second argument\n\n*/\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAYA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAXA;AAeA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAhCA;AACA;AAyCA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;A","sourceRoot":""}