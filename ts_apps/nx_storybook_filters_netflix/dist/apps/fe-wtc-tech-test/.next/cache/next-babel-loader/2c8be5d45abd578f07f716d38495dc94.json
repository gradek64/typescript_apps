{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  transition: transform 0.6s ease;\\n  &.rotate {\\n    transform: rotate(90deg);\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  overflow: hidden;\\n  width: 100%;\\n  transition: height 0.6s ease;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  width: 100%;\\n  height: 30px;\\n  align-items: center;\\n  padding: 10px;\\n  justify-content: space-between;\\n  border: none;\\n  &.active {\\n    background-color: orange;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useRef, useState, useCallback } from 'react';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport styled from 'styled-components'; //styles\n\nvar AccordionHeader = styled.button(_templateObject());\nvar AccordionContent = styled.div(_templateObject2());\nvar ChevronIcon = styled.span(_templateObject3());\n\nfunction Accordion(props) {\n  var _refContent$current, _refContent$current2;\n\n  var children = props.children,\n      calculateHeight = props.calculateHeight,\n      name = props.name,\n      _props$nestedAccordio = props.nestedAccordion,\n      nestedAccordion = _props$nestedAccordio === void 0 ? false : _props$nestedAccordio;\n  var refContent = useRef(null);\n\n  var _useState = useState(''),\n      isOpen = _useState[0],\n      setOpen = _useState[1];\n\n  var elementHeight = (_refContent$current = refContent.current) === null || _refContent$current === void 0 ? void 0 : _refContent$current.scrollHeight; //if (!isNaN(elementHeight)) {\n\n  /* useMemo(() => calculateHeight({ name, value: elementHeight }), [\n    elementHeight,\n    calculateHeight,\n    name,\n  ]); */\n  // }\n\n  useCallback(function () {\n    console.log('outside');\n\n    if (!nestedAccordion) {\n      console.log('inside');\n      calculateHeight({\n        name: name,\n        value: elementHeight\n      });\n    }\n  }, [nestedAccordion]);\n\n  var openAccordion = function openAccordion() {\n    if (nestedAccordion) {\n      calculateHeight({\n        name: name,\n        value: elementHeight\n      });\n    }\n\n    setOpen(!isOpen ? 'active' : '');\n  };\n\n  return __jsx(\"div\", {\n    className: \"accordion\"\n  }, __jsx(AccordionHeader, {\n    className: \"accordionHeader \".concat(isOpen),\n    onClick: openAccordion\n  }, __jsx(\"span\", {\n    className: \"accordionTitle\"\n  }, \"AccordionTitle\"), __jsx(ChevronIcon, {\n    className: !!isOpen && 'rotate'\n  }, __jsx(ChevronRightIcon, null))), __jsx(AccordionContent, {\n    ref: refContent,\n    style: {\n      height: \"\".concat(isOpen !== '' ? Number((_refContent$current2 = refContent.current) === null || _refContent$current2 === void 0 ? void 0 : _refContent$current2.scrollHeight) : 0, \"px\")\n    }\n  }, children));\n}\n\nexport default Accordion;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/Accordion/Accordion.tsx"],"names":["React","useRef","useState","useCallback","ChevronRightIcon","styled","AccordionHeader","button","AccordionContent","div","ChevronIcon","span","Accordion","props","children","calculateHeight","name","nestedAccordion","refContent","isOpen","setOpen","elementHeight","current","scrollHeight","console","log","value","openAccordion","height","Number"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAA2CC,WAA3C,QAA8D,OAA9D;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;;AACA,IAAMC,eAAe,GAAGD,MAAM,CAACE,MAAV,mBAArB;AAaA,IAAMC,gBAAgB,GAAGH,MAAM,CAACI,GAAV,oBAAtB;AAMA,IAAMC,WAAW,GAAGL,MAAM,CAACM,IAAV,oBAAjB;;AAcA,SAASC,SAAT,CAAmBC,KAAnB,EAAkC;AAAA;;AAAA,MACxBC,QADwB,GACqCD,KADrC,CACxBC,QADwB;AAAA,MACdC,eADc,GACqCF,KADrC,CACdE,eADc;AAAA,MACGC,IADH,GACqCH,KADrC,CACGG,IADH;AAAA,8BACqCH,KADrC,CACSI,eADT;AAAA,MACSA,eADT,sCAC2B,KAD3B;AAGhC,MAAMC,UAAU,GAAGjB,MAAM,CAAiB,IAAjB,CAAzB;;AAHgC,kBAKNC,QAAQ,CAAC,EAAD,CALF;AAAA,MAKzBiB,MALyB;AAAA,MAKjBC,OALiB;;AAOhC,MAAMC,aAAa,0BAAGH,UAAU,CAACI,OAAd,wDAAG,oBAAoBC,YAA1C,CAPgC,CAQhC;;AACA;;;;;AAKA;;AACApB,EAAAA,WAAW,CAAC,YAAM;AAChBqB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AACA,QAAI,CAACR,eAAL,EAAsB;AACpBO,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAEAV,MAAAA,eAAe,CAAC;AAAEC,QAAAA,IAAI,EAAJA,IAAF;AAAQU,QAAAA,KAAK,EAAEL;AAAf,OAAD,CAAf;AACD;AACF,GAPU,EAOR,CAACJ,eAAD,CAPQ,CAAX;;AASA,MAAMU,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,QAAIV,eAAJ,EAAqB;AACnBF,MAAAA,eAAe,CAAC;AAAEC,QAAAA,IAAI,EAAJA,IAAF;AAAQU,QAAAA,KAAK,EAAEL;AAAf,OAAD,CAAf;AACD;;AACDD,IAAAA,OAAO,CAAC,CAACD,MAAD,GAAU,QAAV,GAAqB,EAAtB,CAAP;AACD,GALD;;AAOA,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,MAAC,eAAD;AACE,IAAA,SAAS,4BAAqBA,MAArB,CADX;AAEE,IAAA,OAAO,EAAEQ;AAFX,KAIE;AAAM,IAAA,SAAS,EAAC;AAAhB,sBAJF,EAKE,MAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACR,MAAF,IAAY;AAApC,KACE,MAAC,gBAAD,OADF,CALF,CADF,EAUE,MAAC,gBAAD;AACE,IAAA,GAAG,EAAED,UADP;AAEE,IAAA,KAAK,EAAE;AACLU,MAAAA,MAAM,YACJT,MAAM,KAAK,EAAX,GAAgBU,MAAM,yBAACX,UAAU,CAACI,OAAZ,yDAAC,qBAAoBC,YAArB,CAAtB,GAA2D,CADvD;AADD;AAFT,KAQGT,QARH,CAVF,CADF;AAuBD;;AAED,eAAeF,SAAf","sourcesContent":["import React, { useRef, useState, useMemo, useCallback } from 'react';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport styled from 'styled-components';\n\n//styles\nconst AccordionHeader = styled.button`\n  display: flex;\n  width: 100%;\n  height: 30px;\n  align-items: center;\n  padding: 10px;\n  justify-content: space-between;\n  border: none;\n  &.active {\n    background-color: orange;\n  }\n`;\n\nconst AccordionContent = styled.div`\n  overflow: hidden;\n  width: 100%;\n  transition: height 0.6s ease;\n`;\n\nconst ChevronIcon = styled.span`\n  transition: transform 0.6s ease;\n  &.rotate {\n    transform: rotate(90deg);\n  }\n`;\n\ninterface PropsI {\n  children: React.ReactNode;\n  forceHeight?: number;\n  name: string;\n  nestedAccordion?: boolean;\n  calculateHeight: ({ name: string, value: number }) => void;\n}\nfunction Accordion(props: PropsI) {\n  const { children, calculateHeight, name, nestedAccordion = false } = props;\n\n  const refContent = useRef<HTMLDivElement>(null);\n\n  const [isOpen, setOpen] = useState('');\n\n  const elementHeight = refContent.current?.scrollHeight;\n  //if (!isNaN(elementHeight)) {\n  /* useMemo(() => calculateHeight({ name, value: elementHeight }), [\n    elementHeight,\n    calculateHeight,\n    name,\n  ]); */\n  // }\n  useCallback(() => {\n    console.log('outside');\n    if (!nestedAccordion) {\n      console.log('inside');\n\n      calculateHeight({ name, value: elementHeight });\n    }\n  }, [nestedAccordion]);\n\n  const openAccordion = () => {\n    if (nestedAccordion) {\n      calculateHeight({ name, value: elementHeight });\n    }\n    setOpen(!isOpen ? 'active' : '');\n  };\n\n  return (\n    <div className=\"accordion\">\n      <AccordionHeader\n        className={`accordionHeader ${isOpen}`}\n        onClick={openAccordion}\n      >\n        <span className=\"accordionTitle\">AccordionTitle</span>\n        <ChevronIcon className={!!isOpen && 'rotate'}>\n          <ChevronRightIcon />\n        </ChevronIcon>\n      </AccordionHeader>\n      <AccordionContent\n        ref={refContent}\n        style={{\n          height: `${\n            isOpen !== '' ? Number(refContent.current?.scrollHeight) : 0\n          }px`,\n        }}\n      >\n        {children}\n      </AccordionContent>\n    </div>\n  );\n}\n\nexport default Accordion;\n"]},"metadata":{},"sourceType":"module"}