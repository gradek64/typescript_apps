{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-wrap: wrap;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\nvar Movies = styled.div(_templateObject());\nexport var MoviesContext = React.createContext([{}]);\nvar Provider = MoviesContext.Provider;\n\nvar Home = function Home() {\n  var _useState = useState(true),\n      loading = _useState[0],\n      isLoading = _useState[1];\n\n  var _useState2 = useState([]),\n      movies = _useState2[0],\n      getMovies = _useState2[1];\n\n  var calculateAvarageRatings = function calculateAvarageRatings(Ratings) {\n    var percentageValue = [];\n    var overAllPerc = Ratings.map(function (_ref) {\n      var Value = _ref.Value;\n      return Value;\n    }).reduce(function (avaragePerc, rating, index) {\n      if (rating.includes('/')) {\n        var _rating$split$map = rating.split('/').map(function (value) {\n          return Number(value);\n        }),\n            _rating$split$map2 = _slicedToArray(_rating$split$map, 2),\n            all = _rating$split$map2[0],\n            ratio = _rating$split$map2[1];\n\n        var calcPercentage = all / ratio * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        var value = rating.match(/\\d+/)[0];\n        var percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        var sumPercentage = percentageValue.reduce(function (acc, value) {\n          return acc + value;\n        });\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n    return overAllPerc;\n  };\n\n  var reduceData = useCallback(function (response) {\n    var averageRatings;\n    return response.map(function (_ref2, i) {\n      var Title = _ref2.Title,\n          Poster = _ref2.Poster,\n          Ratings = _ref2.Ratings;\n      averageRatings = {\n        avrRat: calculateAvarageRatings(Ratings)\n      };\n      isLoading(false);\n      return {\n        Title: Title,\n        Poster: Poster,\n        averageRatings: averageRatings\n      };\n    });\n  }, []);\n  useEffect(function () {\n    isLoading(true);\n\n    var fetchData = function fetchData() {\n      var result;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(generalAPIService.get('/api/movies'));\n\n            case 2:\n              result = _context.sent;\n              getMovies(reduceData(result));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchData();\n  }, [reduceData]);\n  return __jsx(\"main\", null, loading && 'movies are loading', __jsx(Movies, null, movies.map(function (fields, i) {\n    return __jsx(Provider, {\n      value: fields\n    }, __jsx(Card, _extends({}, fields, {\n      key: fields.Title\n    })));\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["React","useEffect","useState","useCallback","styled","Card","generalAPIService","Movies","div","MoviesContext","createContext","Provider","Home","loading","isLoading","movies","getMovies","calculateAvarageRatings","Ratings","percentageValue","overAllPerc","map","Value","reduce","avaragePerc","rating","index","includes","split","value","Number","all","ratio","calcPercentage","push","match","percentage","length","sumPercentage","acc","reduceData","response","averageRatings","i","Title","Poster","avrRat","fetchData","get","result","fields"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\n\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\nexport const MoviesContext = React.createContext([{}]);\nconst { Provider } = MoviesContext;\n\nconst Home = () => {\n  const [loading, isLoading] = useState(true);\n  const [movies, getMovies] = useState([]);\n\n  interface ImoviesResponseFields {\n    Title: string;\n    Poster: string;\n    Ratings: {}[];\n    key: string;\n  }\n  const calculateAvarageRatings = (Ratings: {}[]) => {\n    const percentageValue: number[] = [];\n\n    const overAllPerc = Ratings.map(\n      ({ Value }: { Value: string }) => Value\n    ).reduce((avaragePerc, rating, index) => {\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map((value) => Number(value));\n        const calcPercentage = (all / ratio) * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce(\n          (acc, value) => acc + value\n        );\n\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n\n    return overAllPerc;\n  };\n  const reduceData = useCallback((response: {}[]) => {\n    let averageRatings: { avrRat: number };\n    return response.map(\n      ({ Title, Poster, Ratings }: ImoviesResponseFields, i) => {\n        averageRatings = { avrRat: calculateAvarageRatings(Ratings) };\n        isLoading(false);\n        return { Title, Poster, averageRatings };\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    isLoading(true);\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, [reduceData]);\n\n  return (\n    <main>\n      {loading && 'movies are loading'}\n      <Movies>\n        {movies.map((fields, i) => (\n          <Provider value={fields}>\n            <Card {...fields} key={fields.Title} />\n          </Provider>\n        ))}\n      </Movies>\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}