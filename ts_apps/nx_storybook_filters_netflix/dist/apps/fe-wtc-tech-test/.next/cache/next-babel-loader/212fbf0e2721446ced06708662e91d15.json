{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  overflow: hidden;\\n  width: 100%;\\n  transition: max-height 0.6s ease;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  width: 100%;\\n  height: 30px;\\n  align-items: center;\\n  padding: 10px;\\n  justify-content: space-between;\\n  border: none;\\n  &.active {\\n    background-color: orange;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useRef, useState } from 'react';\nimport styled from 'styled-components'; //styles\n\nvar AccordionHeader = styled.button(_templateObject());\nvar AccordionContent = styled.div(_templateObject2());\n\nfunction Accordion(props) {\n  var _refContent$current;\n\n  var children = props.children;\n  var refContent = useRef(null);\n\n  var _useState = useState(''),\n      isOpen = _useState[0],\n      setOpen = _useState[1];\n\n  var openAccordion = function openAccordion() {\n    setOpen(!isOpen ? 'active' : '');\n  };\n\n  return __jsx(\"div\", {\n    className: \"accordion\"\n  }, __jsx(AccordionHeader, {\n    className: \"accordionHeader \".concat(isOpen),\n    onClick: openAccordion\n  }, __jsx(\"span\", {\n    className: \"accordionTitle\"\n  }, \"AccordionTitle\")), __jsx(AccordionContent, {\n    ref: refContent,\n    style: {\n      maxHeight: \"\".concat(isOpen !== '' ? Number((_refContent$current = refContent.current) === null || _refContent$current === void 0 ? void 0 : _refContent$current.scrollHeight) : 0, \"px\")\n    }\n  }, children));\n}\n\nexport default Accordion;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/Accordion/Accordion.tsx"],"names":["React","useRef","useState","styled","AccordionHeader","button","AccordionContent","div","Accordion","props","children","refContent","isOpen","setOpen","openAccordion","maxHeight","Number","current","scrollHeight"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;;AACA,IAAMC,eAAe,GAAGD,MAAM,CAACE,MAAV,mBAArB;AAaA,IAAMC,gBAAgB,GAAGH,MAAM,CAACI,GAAV,oBAAtB;;AASA,SAASC,SAAT,CAAmBC,KAAnB,EAAkC;AAAA;;AAAA,MACxBC,QADwB,GACXD,KADW,CACxBC,QADwB;AAGhC,MAAMC,UAAU,GAAGV,MAAM,CAAiB,IAAjB,CAAzB;;AAHgC,kBAKNC,QAAQ,CAAC,EAAD,CALF;AAAA,MAKzBU,MALyB;AAAA,MAKjBC,OALiB;;AAOhC,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BD,IAAAA,OAAO,CAAC,CAACD,MAAD,GAAU,QAAV,GAAqB,EAAtB,CAAP;AACD,GAFD;;AAIA,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,MAAC,eAAD;AACE,IAAA,SAAS,4BAAqBA,MAArB,CADX;AAEE,IAAA,OAAO,EAAEE;AAFX,KAIE;AAAM,IAAA,SAAS,EAAC;AAAhB,sBAJF,CADF,EAQE,MAAC,gBAAD;AACE,IAAA,GAAG,EAAEH,UADP;AAEE,IAAA,KAAK,EAAE;AACLI,MAAAA,SAAS,YACPH,MAAM,KAAK,EAAX,GAAgBI,MAAM,wBAACL,UAAU,CAACM,OAAZ,wDAAC,oBAAoBC,YAArB,CAAtB,GAA2D,CADpD;AADJ;AAFT,KAQGR,QARH,CARF,CADF;AAqBD;;AAED,eAAeF,SAAf","sourcesContent":["import React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\n\n//styles\nconst AccordionHeader = styled.button`\n  display: flex;\n  width: 100%;\n  height: 30px;\n  align-items: center;\n  padding: 10px;\n  justify-content: space-between;\n  border: none;\n  &.active {\n    background-color: orange;\n  }\n`;\n\nconst AccordionContent = styled.div`\n  overflow: hidden;\n  width: 100%;\n  transition: max-height 0.6s ease;\n`;\n\ninterface PropsI {\n  children: React.ReactNode;\n}\nfunction Accordion(props: PropsI) {\n  const { children } = props;\n\n  const refContent = useRef<HTMLDivElement>(null);\n\n  const [isOpen, setOpen] = useState('');\n\n  const openAccordion = () => {\n    setOpen(!isOpen ? 'active' : '');\n  };\n\n  return (\n    <div className=\"accordion\">\n      <AccordionHeader\n        className={`accordionHeader ${isOpen}`}\n        onClick={openAccordion}\n      >\n        <span className=\"accordionTitle\">AccordionTitle</span>\n        {/*  <span className={`chevron right ${!!isOpen && 'rotate'}`}></span> */}\n      </AccordionHeader>\n      <AccordionContent\n        ref={refContent}\n        style={{\n          maxHeight: `${\n            isOpen !== '' ? Number(refContent.current?.scrollHeight) : 0\n          }px`,\n        }}\n      >\n        {children}\n      </AccordionContent>\n    </div>\n  );\n}\n\nexport default Accordion;\n"]},"metadata":{},"sourceType":"module"}