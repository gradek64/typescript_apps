{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 100%;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: space-between;\\n  width: 100%;\\n  padding: 10px;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  max-width: 100%;\\n  height: auto;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  border-radius: 10px;\\n  width: 150px;\\n  margin: 0 auto;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  background-color: \", \";\\n  /* align-items: center; */\\n  min-width: 200px;\\n  min-height: 300px;\\n  border-radius: 20px;\\n  /* justify-content: center; */\\n  margin: 10px;\\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useReducer } from 'react';\nimport styled from 'styled-components';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'; //custom\n\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport wrapperIconHOC from '../Card/IconCTA/IconAction';\nvar cardColorMapping = {\n  \"default\": '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907'\n};\nvar CardContainer = styled.div(_templateObject(), function (props) {\n  return props.color || cardColorMapping[\"default\"];\n});\nvar Poster = styled.div(_templateObject2());\nvar PosterImage = styled.img(_templateObject3());\nvar CardHeader = styled.div(_templateObject4());\nvar CardFooter = styled.div(_templateObject5());\n/* ... inside the render or return of your component ... */\n\nvar VisibilityWatchedIcon = wrapperIconHOC(VisibilityIcon, VisibilityOffOutlinedIcon);\nvar VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon); //build card color object for each card\n\n/* const reducer = (people, action) => {\n\n  switch (action) {\n    case action.type == 'chomp':\n    case !watch && !favorite:\n  if(action.type == 'chomp') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = false;\n      }\n      return person;\n    })\n  }\n  if(action.type == 'revive') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = true;\n      }\n      return person;\n    })\n  }\n}\n */\n\nvar cardState = {\n  watch: false,\n  favorite: false\n};\nvar previousState;\n\nfunction Card(props) {\n  var Title = props.Title,\n      posterURL = props.Poster;\n\n  var _useState = useState(cardColorMapping[\"default\"]),\n      backgroundColor = _useState[0],\n      setBgColor = _useState[1];\n\n  var _useState2 = useState({\n    watch: false,\n    favorite: false\n  }),\n      colorState = _useState2[0],\n      setColorState = _useState2[1];\n\n  var _useReducer = useReducer(reducer, {\n    watch: false,\n    favorite: false\n  }),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var setColor = function setColor(_ref) {\n    var watch = _ref.watch,\n        favorite = _ref.favorite;\n\n    switch (true) {\n      case !watch && !favorite:\n        setBgColor(cardColorMapping[\"default\"]);\n        console.log('notWatchednotSaved');\n        break;\n\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        console.log('watchedNotSaved');\n        break;\n\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        console.log('savedNotWatched');\n        break;\n\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        console.log('watchedAndSaved');\n        break;\n    }\n  };\n\n  var callToAction = function callToAction(state) {\n    /* setColorState((prevState) => {\n      return { ...prevState, ...state };\n    }); */\n    //dispatch({ type: 'chomp', payload: state });\n    //console.log('state ', cardStateChange);\n  };\n\n  console.log('backgroundColor', backgroundColor);\n  return __jsx(CardContainer, {\n    color: backgroundColor\n  }, __jsx(CardHeader, null, __jsx(VisibilityWatchedIcon, {\n    callToAction: callToAction,\n    icon: \"watch\",\n    obj: {\n      watch: false,\n      favorite: false\n    }\n  }), __jsx(VisibilitySavedIcon, {\n    callToAction: callToAction,\n    icon: \"favorite\",\n    obj: {\n      watch: false,\n      favorite: false\n    }\n  })), __jsx(Poster, null, __jsx(PosterImage, {\n    src: posterURL,\n    alt: Title\n  })), __jsx(CardFooter, null, __jsx(RatingStarComp, {\n    rating: 20\n  })));\n}\n\nexport default Card;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/Card/Card.tsx"],"names":["cardColorMapping","savedNotWatched","watchedAndSaved","watchedNotSaved","CardContainer","styled","props","Poster","PosterImage","CardHeader","CardFooter","VisibilityWatchedIcon","wrapperIconHOC","VisibilitySavedIcon","cardState","watch","favorite","Title","posterURL","backgroundColor","setBgColor","useState","colorState","setColorState","state","dispatch","useReducer","setColor","console","callToAction"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from 'react';\nimport styled from 'styled-components';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\n//custom\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport wrapperIconHOC from '../Card/IconCTA/IconAction';\n\ninterface CardColorChange {\n  color: string;\n}\n\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907',\n};\n\nconst CardContainer = styled.div<CardColorChange>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${(props) => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  min-width: 200px;\n  min-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\n\nconst PosterImage = styled.img`\n  max-width: 100%;\n  height: auto;\n`;\n\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px;\n`;\n\nconst CardFooter = styled.div`\n  width: 100%;\n`;\n\n/* ... inside the render or return of your component ... */\n\ninterface Props {\n  Title: string;\n  Poster: string;\n}\n\nconst VisibilityWatchedIcon = wrapperIconHOC(\n  VisibilityIcon,\n  VisibilityOffOutlinedIcon\n);\nconst VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon);\n\n//build card color object for each card\n\n/* const reducer = (people, action) => {\n\n  switch (action) {\n    case action.type == 'chomp':\n    case !watch && !favorite:\n  if(action.type == 'chomp') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = false;\n      }\n      return person;\n    })\n  }\n  if(action.type == 'revive') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = true;\n      }\n      return person;\n    })\n  }\n}\n */\nconst cardState = { watch: false, favorite: false };\nlet previousState: { watch: boolean; favorite: boolean };\nfunction Card(props: Props) {\n  const { Title, Poster: posterURL } = props;\n\n  const [backgroundColor, setBgColor] = useState(cardColorMapping.default);\n  const [colorState, setColorState] = useState({\n    watch: false,\n    favorite: false,\n  });\n\n  const [state, dispatch] = useReducer(reducer, {\n    watch: false,\n    favorite: false,\n  });\n\n  const setColor = ({ watch, favorite }) => {\n    switch (true) {\n      case !watch && !favorite:\n        setBgColor(cardColorMapping.default);\n        console.log('notWatchednotSaved');\n        break;\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        console.log('watchedNotSaved');\n        break;\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        console.log('savedNotWatched');\n        break;\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        console.log('watchedAndSaved');\n        break;\n    }\n  };\n\n  const callToAction = (state: object) => {\n    /* setColorState((prevState) => {\n      return { ...prevState, ...state };\n    }); */\n    //dispatch({ type: 'chomp', payload: state });\n    //console.log('state ', cardStateChange);\n  };\n  console.log('backgroundColor', backgroundColor);\n  return (\n    <CardContainer color={backgroundColor}>\n      <CardHeader>\n        <VisibilityWatchedIcon\n          callToAction={callToAction}\n          icon=\"watch\"\n          obj={{\n            watch: false,\n            favorite: false,\n          }}\n        />\n        <VisibilitySavedIcon\n          callToAction={callToAction}\n          icon=\"favorite\"\n          obj={{\n            watch: false,\n            favorite: false,\n          }}\n        />\n      </CardHeader>\n      <Poster>\n        <PosterImage src={posterURL} alt={Title} />\n      </Poster>\n      <CardFooter>\n        <RatingStarComp rating={20} />\n      </CardFooter>\n    </CardContainer>\n  );\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}