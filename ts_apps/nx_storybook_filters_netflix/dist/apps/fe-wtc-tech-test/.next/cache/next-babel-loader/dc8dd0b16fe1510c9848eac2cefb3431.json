{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from '../app/contentComponents/Card/Card';\nimport generalAPIService from '../app/services/apiService';\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n`;\nconst Filters = styled.div`\n  display: flex;\n  width: 20%;\n  background-color: grey;\n`;\nconst Movies = styled.div`\n  display: flex;\n  width: 80%;\n  flex-wrap: wrap;\n`;\nconst initialState = {\n  movies: [{\n    Title: 'string',\n    Poster: 'string',\n    Ratings: [{}],\n    key: 'string',\n    Saved: 'True',\n    Watched: 'False',\n    Type: 'movie',\n    Actors: 'string',\n    Director: 'string'\n  }],\n  updateState: state => {\n    console.log('....state', state);\n  }\n};\nexport const MoviesContext = React.createContext(initialState);\nconst {\n  Provider,\n  Consumer\n} = MoviesContext;\nlet globalState = [];\nlet previosglobalState = [];\n/*eslint no-case-declarations: \"off\"*/\n\nconst movieReducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_FROM_FETCH':\n      /* [\n        ...action.payload.filter(({ Watched }) =>\n          JSON.parse(Watched.toLowerCase())\n        ),\n      ]; */\n      return _objectSpread({}, state, {\n        movies: [...action.payload]\n      });\n\n    case 'FILTER_WATCH':\n      console.log('gagdgegeeeeeeeee', action.payload);\n      console.log('state', state);\n      const actualState = globalState;\n      return _objectSpread({}, state, {\n        movies: [...state.movies.filter(({\n          Watched\n        }) => Watched === action.payload)]\n      });\n    // return state;\n\n    default:\n      return state;\n  }\n};\n\nconst Home = () => {\n  const {\n    0: loading,\n    1: isLoading\n  } = useState(true); //const [movies, getMovies] = useState([]);\n\n  const {\n    0: store,\n    1: dispatch\n  } = useReducer(movieReducer, initialState);\n  const reduceData = useCallback(response => {\n    return response.map(({\n      Title,\n      Poster,\n      Ratings,\n      Watched,\n      Saved,\n      Actors,\n      Director\n    }) => {\n      return {\n        Title,\n        Poster,\n        Ratings,\n        Watched,\n        Saved,\n        Actors,\n        Director\n      };\n    });\n  }, []);\n  useEffect(() => {\n    isLoading(true);\n\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      const reducedData = reduceData(result);\n      globalState = reducedData;\n      dispatch({\n        type: 'UPDATE_FROM_FETCH',\n        payload: reducedData\n      });\n      isLoading(false);\n    };\n\n    fetchData();\n  }, [reduceData]);\n  console.log('gagdg', store);\n  return __jsx(\"main\", null, loading && 'movies are loading', !loading && __jsx(Provider, {\n    value: _objectSpread({}, store, {\n      updateState: state => dispatch({\n        type: 'FILTER_WATCH',\n        payload: state\n      })\n    })\n  }, __jsx(Wrapper, null, __jsx(Filters, null), __jsx(Movies, null, __jsx(Consumer, null, ({\n    movies\n  }) => movies.map((fields, i) => __jsx(Card, {\n    key: fields.Title,\n    cardId: i\n  })))))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["Wrapper","styled","div","Filters","Movies","initialState","movies","Title","Poster","Ratings","key","Saved","Watched","Type","Actors","Director","updateState","state","console","MoviesContext","React","Consumer","globalState","previosglobalState","movieReducer","action","actualState","Home","isLoading","useState","dispatch","useReducer","reduceData","useCallback","response","useEffect","fetchData","result","generalAPIService","reducedData","type","payload","loading","fields","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from '../app/contentComponents/Card/Card';\nimport generalAPIService from '../app/services/apiService';\nimport FiltersGroup from '../app/contentComponents/FiltersGroup/FiltersGroup';\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst Filters = styled.div`\n  display: flex;\n  width: 20%;\n  background-color: grey;\n`;\nconst Movies = styled.div`\n  display: flex;\n  width: 80%;\n  flex-wrap: wrap;\n`;\n\ninterface ImoviesResponseFields {\n  Title: string;\n  Poster: string;\n  Ratings: {}[];\n  key: string;\n  Saved: string;\n  Watched: string;\n  Actors: string;\n  Director: string;\n  Type: 'movie' | 'series';\n}\nconst initialState = {\n  movies: [\n    {\n      Title: 'string',\n      Poster: 'string',\n      Ratings: [{}],\n      key: 'string',\n      Saved: 'True',\n      Watched: 'False',\n      Type: 'movie',\n      Actors: 'string',\n      Director: 'string',\n    },\n  ],\n  updateState: (state) => {\n    console.log('....state', state);\n  },\n};\nexport const MoviesContext = React.createContext(initialState);\nconst { Provider, Consumer } = MoviesContext;\n\nlet globalState = [];\nlet previosglobalState = [];\n/*eslint no-case-declarations: \"off\"*/\n\nconst movieReducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_FROM_FETCH':\n      /* [\n        ...action.payload.filter(({ Watched }) =>\n          JSON.parse(Watched.toLowerCase())\n        ),\n      ]; */\n      return { ...state, movies: [...action.payload] };\n    case 'FILTER_WATCH':\n      console.log('gagdgegeeeeeeeee', action.payload);\n      console.log('state', state);\n      const actualState = globalState;\n\n      return {\n        ...state,\n        movies: [\n          ...state.movies.filter(({ Watched }) => Watched === action.payload),\n        ],\n      };\n    // return state;\n    default:\n      return state;\n  }\n};\n\nconst Home = () => {\n  const [loading, isLoading] = useState(true);\n  //const [movies, getMovies] = useState([]);\n  const [store, dispatch] = useReducer(movieReducer, initialState);\n\n  const reduceData = useCallback((response: {}[]) => {\n    return response.map(\n      ({\n        Title,\n        Poster,\n        Ratings,\n        Watched,\n        Saved,\n        Actors,\n        Director,\n      }: ImoviesResponseFields) => {\n        return {\n          Title,\n          Poster,\n          Ratings,\n          Watched,\n          Saved,\n          Actors,\n          Director,\n        };\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    isLoading(true);\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      const reducedData = reduceData(result);\n      globalState = reducedData;\n      dispatch({ type: 'UPDATE_FROM_FETCH', payload: reducedData });\n      isLoading(false);\n    };\n\n    fetchData();\n  }, [reduceData]);\n\n  console.log('gagdg', store);\n\n  return (\n    <main>\n      {loading && 'movies are loading'}\n      {!loading && (\n        <Provider\n          value={{\n            ...store,\n            updateState: (state: boolean) =>\n              dispatch({ type: 'FILTER_WATCH', payload: state }),\n          }}\n        >\n          <Wrapper>\n            <Filters></Filters>\n            <Movies>\n              <Consumer>\n                {({ movies }) =>\n                  movies.map((fields, i) => (\n                    <Card key={fields.Title} cardId={i} />\n                  ))\n                }\n              </Consumer>\n            </Movies>\n          </Wrapper>\n        </Provider>\n      )}\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}