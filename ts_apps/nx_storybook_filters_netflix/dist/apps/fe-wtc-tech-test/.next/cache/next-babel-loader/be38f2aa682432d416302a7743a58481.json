{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nexport var calculateAvarageRatings = function calculateAvarageRatings(Ratings) {\n  var percentageValue = [];\n  var overAllPerc = Ratings.map(function (_ref) {\n    var Value = _ref.Value;\n    return Value;\n  }).reduce(function (avaragePerc, rating, index) {\n    if (rating.includes('/')) {\n      var _rating$split$map = rating.split('/').map(function (value) {\n        return Number(value);\n      }),\n          _rating$split$map2 = _slicedToArray(_rating$split$map, 2),\n          all = _rating$split$map2[0],\n          ratio = _rating$split$map2[1];\n\n      var calcPercentage = all / ratio * 100;\n      percentageValue.push(calcPercentage);\n    }\n\n    if (rating.includes('%')) {\n      var value = rating.match(/\\d+/)[0];\n      var percentage = Number(value);\n      percentageValue.push(percentage);\n    }\n\n    if (index === Ratings.length - 1) {\n      var sumPercentage = percentageValue.reduce(function (acc, value) {\n        return acc + value;\n      });\n      avaragePerc = sumPercentage / Ratings.length;\n      return avaragePerc;\n    }\n\n    return 0;\n  }, 0);\n  return overAllPerc;\n};","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/Card/CardUtills/calculateAvarageRating.ts"],"names":["calculateAvarageRatings","percentageValue","overAllPerc","Value","rating","all","ratio","Number","calcPercentage","value","percentage","index","Ratings","sumPercentage","acc","avaragePerc"],"mappings":";AAAA,OAAO,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAA,OAAA,EAAmB;AACxD,MAAMC,eAAyB,GAA/B,EAAA;AAEA,MAAMC,WAAW,GAAG,OAAO,CAAP,GAAA,CAClB,UAAA,IAAA,EAAA;AAAA,QAAGC,KAAH,GAAA,IAAA,CAAA,KAAA;AAAA,WAAA,KAAA;AADkB,GAAA,EAAA,MAAA,CAEX,UAAA,WAAA,EAAA,MAAA,EAAA,KAAA,EAAgC;AACvC,QAAIC,MAAM,CAANA,QAAAA,CAAJ,GAAIA,CAAJ,EAA0B;AAAA,UAAA,iBAAA,GACH,MAAM,CAAN,KAAA,CAAA,GAAA,EAAA,GAAA,CAAsB,UAAA,KAAA,EAAA;AAAA,eAAWG,MAAM,CAAjB,KAAiB,CAAjB;AADnB,OACH,CADG;AAAA,UAAA,kBAAA,GAAA,cAAA,CAAA,iBAAA,EAAA,CAAA,CAAA;AAAA,UACjBF,GADiB,GAAA,kBAAA,CAAA,CAAA,CAAA;AAAA,UACZC,KADY,GAAA,kBAAA,CAAA,CAAA,CAAA;;AAExB,UAAME,cAAc,GAAIH,GAAG,GAAJ,KAACA,GAAxB,GAAA;AACAJ,MAAAA,eAAe,CAAfA,IAAAA,CAAAA,cAAAA;AACD;;AAED,QAAIG,MAAM,CAANA,QAAAA,CAAJ,GAAIA,CAAJ,EAA0B;AACxB,UAAMK,KAAK,GAAGL,MAAM,CAANA,KAAAA,CAAAA,KAAAA,EAAd,CAAcA,CAAd;AACA,UAAMM,UAAU,GAAGH,MAAM,CAAzB,KAAyB,CAAzB;AACAN,MAAAA,eAAe,CAAfA,IAAAA,CAAAA,UAAAA;AACD;;AAED,QAAIU,KAAK,KAAKC,OAAO,CAAPA,MAAAA,GAAd,CAAA,EAAkC;AAChC,UAAMC,aAAa,GAAG,eAAe,CAAf,MAAA,CAAuB,UAAA,GAAA,EAAA,KAAA,EAAA;AAAA,eAAgBC,GAAG,GAAnB,KAAA;AAA7C,OAAsB,CAAtB;AAEAC,MAAAA,WAAW,GAAGF,aAAa,GAAGD,OAAO,CAArCG,MAAAA;AACA,aAAA,WAAA;AACD;;AACD,WAAA,CAAA;AArBkB,GAAA,EAApB,CAAoB,CAApB;AAwBA,SAAA,WAAA;AA3BK,CAAA","sourcesContent":["export const calculateAvarageRatings = (Ratings: {}[]) => {\n  const percentageValue: number[] = [];\n\n  const overAllPerc = Ratings.map(\n    ({ Value }: { Value: string }) => Value\n  ).reduce((avaragePerc, rating, index) => {\n    if (rating.includes('/')) {\n      const [all, ratio] = rating.split('/').map((value) => Number(value));\n      const calcPercentage = (all / ratio) * 100;\n      percentageValue.push(calcPercentage);\n    }\n\n    if (rating.includes('%')) {\n      const value = rating.match(/\\d+/)[0];\n      const percentage = Number(value);\n      percentageValue.push(percentage);\n    }\n\n    if (index === Ratings.length - 1) {\n      const sumPercentage = percentageValue.reduce((acc, value) => acc + value);\n\n      avaragePerc = sumPercentage / Ratings.length;\n      return avaragePerc;\n    }\n    return 0;\n  }, 0);\n\n  return overAllPerc;\n};\n"]},"metadata":{},"sourceType":"module"}