{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react'; //custom\n\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport { MoviesContext } from '../../../pages/index';\nimport Input from '../../contentComponents/Input/Input';\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\n\nfunction FiltersGroup() {\n  const {\n    movies,\n    updateState\n  } = useContext(MoviesContext);\n\n  const callToAction = state => {\n    const {\n      yes\n    } = state;\n    console.log('state', state);\n    updateState(yes ? 'True' : 'False');\n  };\n\n  const showFilters = 2;\n\n  const displayFilters = (ArrOfFilters, length) => ({\n    displayed: ArrOfFilters.slice(0, showFilters),\n    hidden: ArrOfFilters.slice(showFilters, length)\n  });\n\n  const employees = [{\n    name: 'john',\n    order: 1,\n    hireDate: 'July 1, 2011'\n  }, {\n    name: 'david',\n    order: 2,\n    hireDate: 'August 15, 2011'\n  }, {\n    name: 'ana',\n    order: 3,\n    hireDate: 'December 12, 2011'\n  }]; //ASC\n\n  employees.sort((a, b) => a.order - b.order); //DESC\n\n  employees.sort((a, b) => b.order - a.order);\n  let metaScoreStrings = '';\n\n  const calculateMetaScore = score => {\n    if (score < 60) {\n      metaScoreStrings = '< 60';\n    }\n\n    if (score > 60 && score < 80) {\n      metaScoreStrings = 'between 60 & 80';\n    }\n\n    if (score > 80 && score < 90) {\n      metaScoreStrings = 'between 80 & 90';\n    }\n\n    if (score > 90) {\n      metaScoreStrings = '> 90';\n    }\n\n    return metaScoreStrings;\n  };\n\n  const generate = value => (obj, element) => {\n    if (value === 'Metascore') {\n      obj = generateFilters(calculateMetaScore(Number(element[value])), movies.length);\n      return obj;\n    }\n\n    obj = generateFilters(element[value], movies.length);\n    return obj;\n  }; //static filters\n\n\n  const watched = Object.entries({\n    YES: movies.filter(({\n      Watched\n    }) => Watched === 'True').length,\n    NO: movies.filter(({\n      Watched\n    }) => Watched === 'False').length\n  });\n  const savedInWatched = Object.entries({\n    YES: movies.filter(({\n      Saved\n    }) => Saved === 'True').length,\n    NO: movies.filter(({\n      Saved\n    }) => Saved === 'False').length\n  });\n  const type = Object.entries({\n    MOVIE: movies.filter(({\n      Type\n    }) => Type === 'movie').length,\n    SERIES: movies.filter(({\n      Type\n    }) => Type === 'series').length\n  }); //generated filters\n\n  const metasArr = Object.entries(movies.reduce(generate('Metascore'), {}));\n  const YearArr = Object.entries(movies.reduce(generate('Year'), {}));\n  const genreArr = Object.entries(movies.reduce(generate('Genre'), {}));\n  const actorsArr = Object.entries(movies.reduce(generate('Actors'), {}));\n  const directorArr = Object.entries(movies.reduce(generate('Director'), {}));\n  const metasArrFormat = displayFilters(metasArr, metasArr.length);\n  const yearArrFormat = displayFilters(YearArr, YearArr.length);\n  const genreArrFormat = displayFilters(genreArr, genreArr.length);\n  const actorsArrFormat = displayFilters(actorsArr, actorsArr.length);\n  const directorArrFormat = displayFilters(directorArr, directorArr.length);\n  const filtersLabels = {\n    TYPE: displayFilters(type, type.length),\n    YEARS: yearArrFormat,\n    METASCORE: metasArrFormat,\n    GENRE: genreArrFormat,\n    WATCHED: displayFilters(watched, watched.length),\n    'SAVED IN WATCHED LIST': displayFilters(savedInWatched, savedInWatched.length),\n    ACTORS: actorsArrFormat,\n    DIRECTORS: directorArrFormat\n  };\n  return __jsx(React.Fragment, null, __jsx(FilterContainer, null, Object.entries(filtersLabels).map(([title, filters]) => __jsx(\"div\", {\n    className: \"accordion\",\n    key: title\n  }, __jsx(Accordion, {\n    open: true,\n    shevron: false,\n    clickDisable: true,\n    title: title\n  }, __jsx(\"div\", null, filters['displayed'].map(([key, value]) => __jsx(\"div\", {\n    key: key\n  }, __jsx(Input, {\n    name: key,\n    value: `${key}(${value})`,\n    callback: callToAction\n  }))))), filters['hidden'].length > 0 && __jsx(Accordion, {\n    title: 'see more',\n    directional: true,\n    shevron: false\n  }, filters['hidden'].map(([key, value]) => __jsx(\"div\", {\n    key: key\n  }, __jsx(Input, {\n    name: key,\n    value: `${key}(${value})`,\n    callback: callToAction\n  }))))))));\n} //make sure it render only the amount of movies.length\n\n\nexport default React.memo(FiltersGroup);","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/FiltersGroup.tsx"],"names":["React","useContext","Accordion","generateFilters","styled","MoviesContext","Input","FilterContainer","div","FiltersGroup","movies","updateState","callToAction","state","yes","console","log","showFilters","displayFilters","ArrOfFilters","length","displayed","slice","hidden","employees","name","order","hireDate","sort","a","b","metaScoreStrings","calculateMetaScore","score","generate","value","obj","element","Number","watched","Object","entries","YES","filter","Watched","NO","savedInWatched","Saved","type","MOVIE","Type","SERIES","metasArr","reduce","YearArr","genreArr","actorsArr","directorArr","metasArrFormat","yearArrFormat","genreArrFormat","actorsArrFormat","directorArrFormat","filtersLabels","TYPE","YEARS","METASCORE","GENRE","WATCHED","ACTORS","DIRECTORS","map","title","filters","key","memo"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\n//custom\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport { MoviesContext } from '../../../pages/index';\nimport Input from '../../contentComponents/Input/Input';\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\n\nfunction FiltersGroup() {\n  const { movies, updateState } = useContext(MoviesContext);\n\n  const callToAction = (state) => {\n    const { yes } = state;\n    console.log('state', state);\n    updateState(yes ? 'True' : 'False');\n  };\n  const showFilters = 2;\n  const displayFilters = (\n    ArrOfFilters: [string, unknown][],\n    length: number\n  ) => ({\n    displayed: ArrOfFilters.slice(0, showFilters),\n    hidden: ArrOfFilters.slice(showFilters, length),\n  });\n\n  const employees = [\n    { name: 'john', order: 1, hireDate: 'July 1, 2011' },\n    { name: 'david', order: 2, hireDate: 'August 15, 2011' },\n    { name: 'ana', order: 3, hireDate: 'December 12, 2011' },\n  ];\n\n  //ASC\n\n  employees.sort((a, b) => a.order - b.order);\n  //DESC\n  employees.sort((a, b) => b.order - a.order);\n\n  let metaScoreStrings = '';\n  const calculateMetaScore = (score: number) => {\n    if (score < 60) {\n      metaScoreStrings = '< 60';\n    }\n    if (score > 60 && score < 80) {\n      metaScoreStrings = 'between 60 & 80';\n    }\n    if (score > 80 && score < 90) {\n      metaScoreStrings = 'between 80 & 90';\n    }\n    if (score > 90) {\n      metaScoreStrings = '> 90';\n    }\n    return metaScoreStrings;\n  };\n\n  const generate = (value: string) => (obj: {}, element: {}) => {\n    if (value === 'Metascore') {\n      obj = generateFilters(\n        calculateMetaScore(Number(element[value])),\n        movies.length\n      );\n\n      return obj;\n    }\n    obj = generateFilters(element[value], movies.length);\n    return obj;\n  };\n\n  //static filters\n  const watched = Object.entries({\n    YES: movies.filter(({ Watched }) => Watched === 'True').length,\n    NO: movies.filter(({ Watched }) => Watched === 'False').length,\n  });\n  const savedInWatched = Object.entries({\n    YES: movies.filter(({ Saved }) => Saved === 'True').length,\n    NO: movies.filter(({ Saved }) => Saved === 'False').length,\n  });\n  const type = Object.entries({\n    MOVIE: movies.filter(({ Type }) => Type === 'movie').length,\n    SERIES: movies.filter(({ Type }) => Type === 'series').length,\n  });\n  //generated filters\n  const metasArr = Object.entries(movies.reduce(generate('Metascore'), {}));\n  const YearArr = Object.entries(movies.reduce(generate('Year'), {}));\n  const genreArr = Object.entries(movies.reduce(generate('Genre'), {}));\n  const actorsArr = Object.entries(movies.reduce(generate('Actors'), {}));\n  const directorArr = Object.entries(movies.reduce(generate('Director'), {}));\n\n  const metasArrFormat = displayFilters(metasArr, metasArr.length);\n  const yearArrFormat = displayFilters(YearArr, YearArr.length);\n  const genreArrFormat = displayFilters(genreArr, genreArr.length);\n  const actorsArrFormat = displayFilters(actorsArr, actorsArr.length);\n  const directorArrFormat = displayFilters(directorArr, directorArr.length);\n\n  const filtersLabels = {\n    TYPE: displayFilters(type, type.length),\n    YEARS: yearArrFormat,\n    METASCORE: metasArrFormat,\n    GENRE: genreArrFormat,\n    WATCHED: displayFilters(watched, watched.length),\n    'SAVED IN WATCHED LIST': displayFilters(\n      savedInWatched,\n      savedInWatched.length\n    ),\n    ACTORS: actorsArrFormat,\n    DIRECTORS: directorArrFormat,\n  };\n\n  return (\n    <>\n      <FilterContainer>\n        {Object.entries(filtersLabels).map(([title, filters]) => (\n          <div className=\"accordion\" key={title}>\n            <Accordion open shevron={false} clickDisable={true} title={title}>\n              <div>\n                {filters['displayed'].map(([key, value]) => (\n                  <div key={key}>\n                    <Input\n                      name={key}\n                      value={`${key}(${value})`}\n                      callback={callToAction}\n                    />\n                  </div>\n                ))}\n              </div>\n            </Accordion>\n            {filters['hidden'].length > 0 && (\n              <Accordion title={'see more'} directional={true} shevron={false}>\n                {filters['hidden'].map(([key, value]) => (\n                  <div key={key}>\n                    <Input\n                      name={key}\n                      value={`${key}(${value})`}\n                      callback={callToAction}\n                    />\n                  </div>\n                ))}\n              </Accordion>\n            )}\n          </div>\n        ))}\n      </FilterContainer>\n    </>\n  );\n}\n\n//make sure it render only the amount of movies.length\nexport default React.memo(FiltersGroup);\n"]},"metadata":{},"sourceType":"module"}