{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'; //custom\n\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport wrapperIconHOC from '../Card/IconCTA/IconAction';\nimport IconsStateManagement from '../IconsManagement/IconsStateManagement';\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907'\n};\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${props => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  min-width: 200px;\n  min-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\nconst PosterImage = styled.div`\n  width: 150px;\n  height: 221px;\n  border-radius: 10px;\n  background-image: url(${props => props.image});\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n`;\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px 10px 0px 10px;\n`;\nconst CardFooter = styled.div`\n  width: 100%;\n`;\n/* ... inside the render or return of your component ... */\n\nconst VisibilityWatchedIcon = wrapperIconHOC(VisibilityIcon, VisibilityOffOutlinedIcon);\nconst VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon); //build card color object for each card\n\n/* const reducer = (people, action) => {\n\n  switch (action) {\n    case action.type == 'chomp':\n    case !watch && !favorite:\n  if(action.type == 'chomp') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = false;\n      }\n      return person;\n    })\n  }\n  if(action.type == 'revive') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = true;\n      }\n      return person;\n    })\n  }\n}\n */\n\n/* const cardState = { watch: false, favorite: false };*/\n\nfunction Card(props) {\n  const {\n    Title,\n    Poster: posterURL,\n    cardNumber\n  } = props;\n  const {\n    0: backgroundColor,\n    1: setBgColor\n  } = useState(cardColorMapping.default); //register setColor once and dont re-render\n\n  const setColor = useCallback(({\n    watch,\n    favorite\n  }) => {\n    switch (true) {\n      case !watch && !favorite:\n        setBgColor(cardColorMapping.default);\n        break;\n\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        break;\n\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        break;\n\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n  return __jsx(CardContainer, {\n    color: backgroundColor\n  }, __jsx(CardHeader, null, __jsx(IconsStateManagement, {\n    callToActionCardColor: setColor\n  })), __jsx(Poster, null, __jsx(PosterImage, {\n    image: posterURL\n  })), __jsx(CardFooter, null, __jsx(RatingStarComp, {\n    rating: 50\n  })));\n}\n\nexport default Card;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/Card/Card.tsx"],"names":["cardColorMapping","default","savedNotWatched","watchedAndSaved","watchedNotSaved","CardContainer","styled","div","props","Poster","PosterImage","image","CardHeader","CardFooter","VisibilityWatchedIcon","wrapperIconHOC","VisibilitySavedIcon","cardNumber","setBgColor","useState","setColor","useCallback","favorite","watch","backgroundColor","posterURL"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\n//custom\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport wrapperIconHOC from '../Card/IconCTA/IconAction';\nimport IconsStateManagement from '../IconsManagement/IconsStateManagement';\n\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907',\n};\n\nconst CardContainer = styled.div<{\n  color: string;\n}>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${(props) => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  min-width: 200px;\n  min-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\n\nconst PosterImage = styled.div<{\n  image: string;\n}>`\n  width: 150px;\n  height: 221px;\n  border-radius: 10px;\n  background-image: url(${(props) => props.image});\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n`;\n\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px 10px 0px 10px;\n`;\n\nconst CardFooter = styled.div`\n  width: 100%;\n`;\n\n/* ... inside the render or return of your component ... */\n\ninterface Props {\n  Title: string;\n  Poster: string;\n  cardNumber: string;\n}\n\nconst VisibilityWatchedIcon = wrapperIconHOC(\n  VisibilityIcon,\n  VisibilityOffOutlinedIcon\n);\nconst VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon);\n\n//build card color object for each card\n\n/* const reducer = (people, action) => {\n\n  switch (action) {\n    case action.type == 'chomp':\n    case !watch && !favorite:\n  if(action.type == 'chomp') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = false;\n      }\n      return person;\n    })\n  }\n  if(action.type == 'revive') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = true;\n      }\n      return person;\n    })\n  }\n}\n */\n/* const cardState = { watch: false, favorite: false };*/\n\nfunction Card(props: Props) {\n  const { Title, Poster: posterURL, cardNumber } = props;\n  const [backgroundColor, setBgColor] = useState(cardColorMapping.default);\n\n  //register setColor once and dont re-render\n  const setColor = useCallback(({ watch, favorite }) => {\n    switch (true) {\n      case !watch && !favorite:\n        setBgColor(cardColorMapping.default);\n        break;\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        break;\n\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        break;\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  return (\n    <CardContainer color={backgroundColor}>\n      <CardHeader>\n        <IconsStateManagement callToActionCardColor={setColor} />\n        {/* <VisibilityWatchedIcon\n          callToAction={()=>{return}}\n          icon=\"watch\"\n          obj={{\n            watch: false,\n            favorite: false,\n          }}\n          cardNumber={cardNumber}\n        />\n        <VisibilitySavedIcon\n          callToAction={()=>{return}}\n          icon=\"favorite\"\n          obj={{\n            watch: false,\n            favorite: false,\n          }}\n          cardNumber={cardNumber}\n        /> */}\n      </CardHeader>\n      <Poster>\n        <PosterImage image={posterURL} />\n      </Poster>\n      <CardFooter>\n        {/*}has to be between 0 100 %*/}\n        <RatingStarComp rating={50} />\n      </CardFooter>\n    </CardContainer>\n  );\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}