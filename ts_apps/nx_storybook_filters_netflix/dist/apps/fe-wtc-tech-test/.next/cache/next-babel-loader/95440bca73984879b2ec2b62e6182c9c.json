{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useState } from 'react';\nimport styled, { css } from 'styled-components'; //styles\n\nconst AccordionHeader = styled.button`\n  display: flex;\n  width: 100%;\n  height: 30px;\n  align-items: center;\n  padding: 10px;\n  justify-content: space-between;\n  border: none;\n  ${props => props.disabled && css`\n      color: black;\n    `}\n  &.active {\n    background-color: orange;\n  }\n`;\nconst AccordionContent = styled.div`\n  overflow: hidden;\n  height: auto;\n  width: 100%;\n  transition: height 0.6s ease;\n`;\nconst ChevronIcon = styled.span`\n  transition: transform 0.6s ease;\n  &.rotate {\n    transform: rotate(90deg);\n  }\n`;\nconst Chevron = styled.span`\n  transition: transform 0.6s ease;\n  &:before {\n    border-style: solid;\n    border-width: 0.25em 0.25em 0 0;\n    content: '';\n    display: inline-block;\n    height: 0.45em;\n    left: 0.15em;\n    position: relative;\n    top: 0.15em;\n    transform: rotate(-45deg);\n    vertical-align: top;\n    width: 0.45em;\n  }\n  &.right {\n    &:before {\n      left: 0;\n      transform: rotate(45deg);\n    }\n  }\n  &.active {\n    transform: rotate(90deg);\n  }\n`;\n\nfunction Accordion(props) {\n  var _refContent$current;\n\n  const {\n    children,\n    open = false,\n    shevron = true,\n    clickDisable = false\n  } = props;\n  const refContent = useRef(null);\n  const {\n    0: isOpen,\n    1: setOpen\n  } = useState(open ? 'active' : '');\n  /* <ChevronIcon className={!!isOpen && 'rotate'}>\n            <ChevronRightIcon />\n          </ChevronIcon> */\n\n  return __jsx(\"div\", {\n    className: \"accordion\"\n  }, __jsx(AccordionHeader, {\n    className: `accordionHeader ${isOpen}`,\n    onClick: () => {\n      setOpen(!isOpen ? 'active' : '');\n    },\n    disabled: clickDisable\n  }, __jsx(\"span\", {\n    className: \"accordionTitle\"\n  }, \"AccordionTitle\"), shevron && __jsx(Chevron, {\n    className: `accordionHeader ${isOpen}`\n  })), __jsx(AccordionContent, {\n    ref: refContent,\n    style: {\n      height: `${isOpen !== '' ? Number((_refContent$current = refContent.current) === null || _refContent$current === void 0 ? void 0 : _refContent$current.scrollHeight) : 0}px`\n    }\n  }, children));\n}\n\nexport default Accordion;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/Accordion/Accordion.tsx"],"names":["React","useRef","useState","styled","css","AccordionHeader","button","props","disabled","AccordionContent","div","ChevronIcon","span","Chevron","Accordion","children","open","shevron","clickDisable","refContent","isOpen","setOpen","height","Number","current","scrollHeight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAA8D,OAA9D;AAEA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B,C,CAEA;;AACA,MAAMC,eAAe,GAAGF,MAAM,CAACG,MAE5B;;;;;;;;IAQEC,KAAD,IACAA,KAAK,CAACC,QAAN,IACAJ,GAAI;;KAEF;;;;CAdN;AAoBA,MAAMK,gBAAgB,GAAGN,MAAM,CAACO,GAAI;;;;;CAApC;AAOA,MAAMC,WAAW,GAAGR,MAAM,CAACS,IAAK;;;;;CAAhC;AAOA,MAAMC,OAAO,GAAGV,MAAM,CAACS,IAAK;;;;;;;;;;;;;;;;;;;;;;;;CAA5B;;AAgCA,SAASE,SAAT,CAAmBP,KAAnB,EAAkC;AAAA;;AAChC,QAAM;AACJQ,IAAAA,QADI;AAEJC,IAAAA,IAAI,GAAG,KAFH;AAGJC,IAAAA,OAAO,GAAG,IAHN;AAIJC,IAAAA,YAAY,GAAG;AAJX,MAKFX,KALJ;AAOA,QAAMY,UAAU,GAAGlB,MAAM,CAAiB,IAAjB,CAAzB;AACA,QAAM;AAAA,OAACmB,MAAD;AAAA,OAASC;AAAT,MAAoBnB,QAAQ,CAACc,IAAI,GAAG,QAAH,GAAc,EAAnB,CAAlC;AACA;;;;AAGA,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,MAAC,eAAD;AACE,IAAA,SAAS,EAAG,mBAAkBI,MAAO,EADvC;AAEE,IAAA,OAAO,EAAE,MAAM;AACbC,MAAAA,OAAO,CAAC,CAACD,MAAD,GAAU,QAAV,GAAqB,EAAtB,CAAP;AACD,KAJH;AAKE,IAAA,QAAQ,EAAEF;AALZ,KAOE;AAAM,IAAA,SAAS,EAAC;AAAhB,sBAPF,EAQGD,OAAO,IAAI,MAAC,OAAD;AAAS,IAAA,SAAS,EAAG,mBAAkBG,MAAO;AAA9C,IARd,CADF,EAWE,MAAC,gBAAD;AACE,IAAA,GAAG,EAAED,UADP;AAEE,IAAA,KAAK,EAAE;AACLG,MAAAA,MAAM,EAAG,GACPF,MAAM,KAAK,EAAX,GAAgBG,MAAM,wBAACJ,UAAU,CAACK,OAAZ,wDAAC,oBAAoBC,YAArB,CAAtB,GAA2D,CAC5D;AAHI;AAFT,KAQGV,QARH,CAXF,CADF;AAwBD;;AAED,eAAeD,SAAf","sourcesContent":["import React, { useRef, useState, useMemo, useCallback } from 'react';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport styled, { css } from 'styled-components';\n\n//styles\nconst AccordionHeader = styled.button<{\n  disabled: boolean;\n}>`\n  display: flex;\n  width: 100%;\n  height: 30px;\n  align-items: center;\n  padding: 10px;\n  justify-content: space-between;\n  border: none;\n  ${(props) =>\n    props.disabled &&\n    css`\n      color: black;\n    `}\n  &.active {\n    background-color: orange;\n  }\n`;\n\nconst AccordionContent = styled.div`\n  overflow: hidden;\n  height: auto;\n  width: 100%;\n  transition: height 0.6s ease;\n`;\n\nconst ChevronIcon = styled.span`\n  transition: transform 0.6s ease;\n  &.rotate {\n    transform: rotate(90deg);\n  }\n`;\n\nconst Chevron = styled.span`\n  transition: transform 0.6s ease;\n  &:before {\n    border-style: solid;\n    border-width: 0.25em 0.25em 0 0;\n    content: '';\n    display: inline-block;\n    height: 0.45em;\n    left: 0.15em;\n    position: relative;\n    top: 0.15em;\n    transform: rotate(-45deg);\n    vertical-align: top;\n    width: 0.45em;\n  }\n  &.right {\n    &:before {\n      left: 0;\n      transform: rotate(45deg);\n    }\n  }\n  &.active {\n    transform: rotate(90deg);\n  }\n`;\n\ninterface PropsI {\n  children: React.ReactNode;\n  open?: boolean;\n  shevron?: boolean;\n  clickDisable?: boolean;\n}\nfunction Accordion(props: PropsI) {\n  const {\n    children,\n    open = false,\n    shevron = true,\n    clickDisable = false,\n  } = props;\n\n  const refContent = useRef<HTMLDivElement>(null);\n  const [isOpen, setOpen] = useState(open ? 'active' : '');\n  /* <ChevronIcon className={!!isOpen && 'rotate'}>\n            <ChevronRightIcon />\n          </ChevronIcon> */\n  return (\n    <div className=\"accordion\">\n      <AccordionHeader\n        className={`accordionHeader ${isOpen}`}\n        onClick={() => {\n          setOpen(!isOpen ? 'active' : '');\n        }}\n        disabled={clickDisable}\n      >\n        <span className=\"accordionTitle\">AccordionTitle</span>\n        {shevron && <Chevron className={`accordionHeader ${isOpen}`} />}\n      </AccordionHeader>\n      <AccordionContent\n        ref={refContent}\n        style={{\n          height: `${\n            isOpen !== '' ? Number(refContent.current?.scrollHeight) : 0\n          }px`,\n        }}\n      >\n        {children}\n      </AccordionContent>\n    </div>\n  );\n}\n\nexport default Accordion;\n"]},"metadata":{},"sourceType":"module"}