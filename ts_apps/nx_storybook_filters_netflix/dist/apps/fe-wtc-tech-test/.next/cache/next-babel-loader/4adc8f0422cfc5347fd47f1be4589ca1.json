{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from '../app/contentComponents/Card/Card';\nimport generalAPIService from '../app/services/apiService';\nimport FiltersGroup from '../app/contentComponents/FiltersGroup/FiltersGroup';\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n`;\nconst Filters = styled.div`\n  display: flex;\n  width: 20%;\n  background-color: grey;\n`;\nconst Movies = styled.div`\n  display: flex;\n  width: 80%;\n  flex-wrap: wrap;\n`;\nexport const MoviesContext = React.createContext({});\nconst {\n  Provider,\n  Consumer\n} = MoviesContext;\n\nconst movieReducer = (state, action) => {\n  switch (action.type) {\n    /* eslint-disable no-case-declarations */\n    case 'UPDATE':\n      return [_objectSpread({}, state, {}, action.payload)];\n\n    case 'REMOVE_ITEM':\n      const order = state.items.findIndex(({\n        title\n      }) => title === action.title);\n      state.items.splice(order, 1);\n      return {\n        items: [...state.items]\n      };\n\n    default:\n      return [...state];\n  }\n};\n\nconst Home = () => {\n  const {\n    0: loading,\n    1: isLoading\n  } = useState(true); //const [movies, getMovies] = useState([]);\n\n  const {\n    0: movies,\n    1: dispatchAction\n  } = useReducer(movieReducer, []);\n  const reduceData = useCallback(response => {\n    return response.map(({\n      Title,\n      Poster,\n      Ratings,\n      Watched,\n      Saved\n    }) => {\n      isLoading(false);\n      return {\n        Title,\n        Poster,\n        Ratings,\n        Watched,\n        Saved\n      };\n    });\n  }, []);\n  useEffect(() => {\n    isLoading(true);\n\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies'); //getMovies(reduceData(result));\n\n      dispatchAction({\n        type: 'UPDATE',\n        payload: reduceData(result)\n      });\n    };\n\n    fetchData();\n  }, [reduceData]);\n  console.log('gagdg', movies);\n  return __jsx(\"main\", null, loading && 'movies are loading', !loading && __jsx(Provider, {\n    value: movies\n  }, __jsx(Wrapper, null, __jsx(Filters, null, __jsx(FiltersGroup, null)), __jsx(Movies, null, __jsx(Consumer, null, moviesObj => moviesObj.map((fields, i) => __jsx(Card, {\n    key: fields.Title,\n    cardId: i\n  })))))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["Wrapper","styled","div","Filters","Movies","MoviesContext","React","Consumer","movieReducer","action","order","state","title","items","Home","isLoading","useState","dispatchAction","useReducer","reduceData","useCallback","response","Saved","useEffect","fetchData","result","generalAPIService","type","payload","console","loading","movies","moviesObj","fields","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from '../app/contentComponents/Card/Card';\nimport generalAPIService from '../app/services/apiService';\nimport FiltersGroup from '../app/contentComponents/FiltersGroup/FiltersGroup';\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst Filters = styled.div`\n  display: flex;\n  width: 20%;\n  background-color: grey;\n`;\nconst Movies = styled.div`\n  display: flex;\n  width: 80%;\n  flex-wrap: wrap;\n`;\n\ninterface ImoviesResponseFields {\n  Title: string;\n  Poster: string;\n  Ratings: {}[];\n  key: string;\n  Saved: string;\n  Watched: string;\n}\nexport const MoviesContext = React.createContext({} as ImoviesResponseFields[]);\nconst { Provider, Consumer } = MoviesContext;\n\nconst movieReducer = (state, action) => {\n  switch (action.type) {\n    /* eslint-disable no-case-declarations */\n    case 'UPDATE':\n      return [{ ...state, ...action.payload }];\n    case 'REMOVE_ITEM':\n      const order = state.items.findIndex(\n        ({ title }) => title === action.title\n      );\n      state.items.splice(order, 1);\n      return { items: [...state.items] };\n    default:\n      return [...state];\n  }\n};\n\nconst Home = () => {\n  const [loading, isLoading] = useState(true);\n  //const [movies, getMovies] = useState([]);\n  const [movies, dispatchAction] = useReducer(movieReducer, []);\n\n  const reduceData = useCallback((response: {}[]) => {\n    return response.map(\n      ({ Title, Poster, Ratings, Watched, Saved }: ImoviesResponseFields) => {\n        isLoading(false);\n        return {\n          Title,\n          Poster,\n          Ratings,\n          Watched,\n          Saved,\n        };\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    isLoading(true);\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      //getMovies(reduceData(result));\n      dispatchAction({ type: 'UPDATE', payload: reduceData(result) });\n    };\n\n    fetchData();\n  }, [reduceData]);\n\n  console.log('gagdg', movies);\n\n  return (\n    <main>\n      {loading && 'movies are loading'}\n      {!loading && (\n        <Provider value={movies}>\n          <Wrapper>\n            <Filters>\n              <FiltersGroup />\n            </Filters>\n            <Movies>\n              <Consumer>\n                {(moviesObj) =>\n                  moviesObj.map((fields, i) => (\n                    <Card key={fields.Title} cardId={i} />\n                  ))\n                }\n              </Consumer>\n            </Movies>\n          </Wrapper>\n        </Provider>\n      )}\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}