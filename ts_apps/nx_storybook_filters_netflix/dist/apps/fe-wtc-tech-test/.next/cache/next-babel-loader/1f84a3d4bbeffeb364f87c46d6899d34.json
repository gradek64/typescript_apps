{"ast":null,"code":"let actorsStringData = '';\nlet trackIndex = 1;\n\nconst generateFilters = (stringData, allMovies) => {\n  actorsStringData += stringData + ',';\n\n  function findDuplicate(arr) {\n    const object = {};\n    arr.forEach(function (item) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('trackIndex', trackIndex);\n\n  if (trackIndex === allMovies) {\n    const trimLastComa = actorsStringData.trim().replace(/,$/, '');\n    const allActors = [...trimLastComa.split(',')];\n    trackIndex = 1;\n    actorsStringData = '';\n    return findDuplicate(allActors);\n  } else {\n    trackIndex++;\n  }\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["actorsStringData","trackIndex","generateFilters","stringData","allMovies","findDuplicate","arr","object","forEach","item","trimStirng","trim","console","log","trimLastComa","replace","allActors","split"],"mappings":"AAAA,IAAIA,gBAAgB,GAAG,EAAvB;AACA,IAAIC,UAAU,GAAG,CAAjB;;AACA,MAAMC,eAAe,GAAG,CAACC,UAAD,EAAqBC,SAArB,KAA2C;AACjEJ,EAAAA,gBAAgB,IAAIG,UAAU,GAAG,GAAjC;;AAEA,WAASE,aAAT,CAAuBC,GAAvB,EAAsC;AACpC,UAAMC,MAAM,GAAG,EAAf;AACAD,IAAAA,GAAG,CAACE,OAAJ,CAAY,UAAUC,IAAV,EAAwB;AAClC,YAAMC,UAAU,GAAGD,IAAI,CAACE,IAAL,EAAnB;AACA,UAAI,CAACJ,MAAM,CAACG,UAAD,CAAX,EAAyBH,MAAM,CAACG,UAAD,CAAN,GAAqB,CAArB;AACzBH,MAAAA,MAAM,CAACG,UAAD,CAAN,IAAsB,CAAtB;AACD,KAJD;AAKA,WAAOH,MAAP;AACD;;AAEDK,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BZ,UAA1B;;AACA,MAAIA,UAAU,KAAKG,SAAnB,EAA8B;AAC5B,UAAMU,YAAY,GAAGd,gBAAgB,CAACW,IAAjB,GAAwBI,OAAxB,CAAgC,IAAhC,EAAsC,EAAtC,CAArB;AACA,UAAMC,SAAS,GAAG,CAAC,GAAGF,YAAY,CAACG,KAAb,CAAmB,GAAnB,CAAJ,CAAlB;AACAhB,IAAAA,UAAU,GAAG,CAAb;AACAD,IAAAA,gBAAgB,GAAG,EAAnB;AACA,WAAOK,aAAa,CAACW,SAAD,CAApB;AACD,GAND,MAMO;AACLf,IAAAA,UAAU;AACX;AACF,CAvBD;;AAyBA,SAASC,eAAT","sourcesContent":["let actorsStringData = '';\nlet trackIndex = 1;\nconst generateFilters = (stringData: string, allMovies: number) => {\n  actorsStringData += stringData + ',';\n\n  function findDuplicate(arr: string[]) {\n    const object = {};\n    arr.forEach(function (item: string) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('trackIndex', trackIndex);\n  if (trackIndex === allMovies) {\n    const trimLastComa = actorsStringData.trim().replace(/,$/, '');\n    const allActors = [...trimLastComa.split(',')];\n    trackIndex = 1;\n    actorsStringData = '';\n    return findDuplicate(allActors);\n  } else {\n    trackIndex++;\n  }\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}