{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar stringDataArg = '';\nvar trackIndex = 1;\n\nvar generateFilters = function generateFilters(stringData, allMovies) {\n  stringDataArg += stringData + ',';\n\n  function findDuplicate(arr) {\n    var object = {};\n    arr.forEach(function (item) {\n      var trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  if (trackIndex === allMovies) {\n    var trimLastComa = stringDataArg.trim().replace(/,$/, '');\n\n    var concatenatedString = _toConsumableArray(trimLastComa.split(','));\n\n    trackIndex = 1;\n    stringDataArg = '';\n    return findDuplicate(concatenatedString);\n  } else {\n    trackIndex++;\n  }\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["stringDataArg","trackIndex","generateFilters","stringData","allMovies","findDuplicate","arr","object","forEach","item","trimStirng","trim","trimLastComa","replace","concatenatedString","split"],"mappings":";AAAA,IAAIA,aAAa,GAAG,EAApB;AACA,IAAIC,UAAU,GAAG,CAAjB;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,UAAD,EAAqBC,SAArB,EAA2C;AACjEJ,EAAAA,aAAa,IAAIG,UAAU,GAAG,GAA9B;;AAEA,WAASE,aAAT,CAAuBC,GAAvB,EAAsC;AACpC,QAAMC,MAAM,GAAG,EAAf;AACAD,IAAAA,GAAG,CAACE,OAAJ,CAAY,UAAUC,IAAV,EAAwB;AAClC,UAAMC,UAAU,GAAGD,IAAI,CAACE,IAAL,EAAnB;AACA,UAAI,CAACJ,MAAM,CAACG,UAAD,CAAX,EAAyBH,MAAM,CAACG,UAAD,CAAN,GAAqB,CAArB;AACzBH,MAAAA,MAAM,CAACG,UAAD,CAAN,IAAsB,CAAtB;AACD,KAJD;AAKA,WAAOH,MAAP;AACD;;AAED,MAAIN,UAAU,KAAKG,SAAnB,EAA8B;AAC5B,QAAMQ,YAAY,GAAGZ,aAAa,CAACW,IAAd,GAAqBE,OAArB,CAA6B,IAA7B,EAAmC,EAAnC,CAArB;;AACA,QAAMC,kBAAkB,sBAAOF,YAAY,CAACG,KAAb,CAAmB,GAAnB,CAAP,CAAxB;;AACAd,IAAAA,UAAU,GAAG,CAAb;AACAD,IAAAA,aAAa,GAAG,EAAhB;AACA,WAAOK,aAAa,CAACS,kBAAD,CAApB;AACD,GAND,MAMO;AACLb,IAAAA,UAAU;AACX;AACF,CAtBD;;AAwBA,SAASC,eAAT","sourcesContent":["let stringDataArg = '';\nlet trackIndex = 1;\nconst generateFilters = (stringData: string, allMovies: number) => {\n  stringDataArg += stringData + ',';\n\n  function findDuplicate(arr: string[]) {\n    const object = {};\n    arr.forEach(function (item: string) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  if (trackIndex === allMovies) {\n    const trimLastComa = stringDataArg.trim().replace(/,$/, '');\n    const concatenatedString = [...trimLastComa.split(',')];\n    trackIndex = 1;\n    stringDataArg = '';\n    return findDuplicate(concatenatedString);\n  } else {\n    trackIndex++;\n  }\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}