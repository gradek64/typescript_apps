{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Home = () => {\n  const {\n    0: movies,\n    1: getMovies\n  } = useState([]);\n\n  const calculateAvarageRatings = Ratings => {\n    const overAllPerc = Ratings.map(({\n      Value\n    }) => Value).reduce((avaragePerc, rating, index) => {\n      const percentageValue = [];\n      console.log('rating.....', rating);\n\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map(value => Number(value));\n        console.log([all, ratio]);\n        console.log('[all, ratio]', all / ratio);\n        const calcPercentage = all / ratio;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        console.log('percentage', percentage);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce((acc, value) => acc + value);\n        console.log('percentageValue', percentageValue);\n        console.log('avaragePerc', sumPercentage);\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n    return overAllPerc;\n  };\n\n  const reduceData = response => {\n    return response.map(({\n      Title,\n      Poster,\n      Ratings\n    }) => {\n      const averageRatings = calculateAvarageRatings([{\n        Source: 'Internet Movie Database',\n        Value: '8.1/10'\n      }, {\n        Source: 'Rotten Tomatoes',\n        Value: '85%'\n      }, {\n        Source: 'Metacritic',\n        Value: '69/100'\n      }]);\n      console.log('averageRatings', averageRatings);\n      return {\n        Title,\n        Poster,\n        averageRatings\n      };\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      console.log('result', result);\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, []);\n  return __jsx(\"main\", null, __jsx(Movies, null, movies.map(fields => __jsx(Card, _extends({}, fields, {\n    key: fields.Title\n  })))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["React","useEffect","useState","styled","Card","generalAPIService","Movies","div","Home","movies","getMovies","calculateAvarageRatings","Ratings","overAllPerc","map","Value","reduce","avaragePerc","rating","index","percentageValue","console","log","includes","all","ratio","split","value","Number","calcPercentage","push","match","percentage","length","sumPercentage","acc","reduceData","response","Title","Poster","averageRatings","Source","fetchData","result","get","fields"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\n\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Home = () => {\n  const [movies, getMovies] = useState([]);\n\n  interface ImoviesResponseFields {\n    Title: string;\n    Poster: string;\n    Ratings: {}[];\n    key: string;\n  }\n  const calculateAvarageRatings = (Ratings: {}[]) => {\n    const overAllPerc = Ratings.map(\n      ({ Value }: { Value: string }) => Value\n    ).reduce((avaragePerc, rating, index) => {\n      const percentageValue: number[] = [];\n\n      console.log('rating.....', rating);\n\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map((value) => Number(value));\n        console.log([all, ratio]);\n        console.log('[all, ratio]', all / ratio);\n        const calcPercentage = all / ratio;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        console.log('percentage', percentage);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce(\n          (acc, value) => acc + value\n        );\n        console.log('percentageValue', percentageValue);\n        console.log('avaragePerc', sumPercentage);\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n\n    return overAllPerc;\n  };\n  const reduceData = (response: {}[]) => {\n    return response.map(({ Title, Poster, Ratings }: ImoviesResponseFields) => {\n      const averageRatings = calculateAvarageRatings([\n        { Source: 'Internet Movie Database', Value: '8.1/10' },\n        { Source: 'Rotten Tomatoes', Value: '85%' },\n        { Source: 'Metacritic', Value: '69/100' },\n      ]);\n\n      console.log('averageRatings', averageRatings);\n\n      return { Title, Poster, averageRatings };\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      console.log('result', result);\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <main>\n      <Movies>\n        {movies.map((fields) => (\n          <Card {...fields} key={fields.Title} />\n        ))}\n      </Movies>\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}