{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\nexport const MoviesContext = React.createContext({});\nconst {\n  Provider\n} = MoviesContext;\n\nconst Home = () => {\n  const {\n    0: loading,\n    1: isLoading\n  } = useState(true);\n  const {\n    0: movies,\n    1: getMovies\n  } = useState([]);\n\n  const calculateAvarageRatings = Ratings => {\n    const percentageValue = [];\n    const overAllPerc = Ratings.map(({\n      Value\n    }) => Value).reduce((avaragePerc, rating, index) => {\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map(value => Number(value));\n        const calcPercentage = all / ratio * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce((acc, value) => acc + value);\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n    return overAllPerc;\n  };\n\n  const reduceData = useCallback(response => {\n    //const averageRatingsAll: { avrRat: number }[] = [];\n    //let averageRatings: { avrRat: number };\n    return response.map(({\n      Title,\n      Poster,\n      Ratings\n    }, i) => {\n      //averageRatingsAll.push({ avrRat: calculateAvarageRatings(Ratings) });\n      //averageRatings = averageRatingsAll[i];\n      isLoading(false);\n      return {\n        Title,\n        Poster,\n        Ratings\n      };\n    });\n  }, []);\n  useEffect(() => {\n    isLoading(true);\n\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, [reduceData]);\n  return __jsx(\"main\", null, loading && 'movies are loading', __jsx(Provider, {\n    value: movies\n  }, __jsx(Movies, null, movies.map((fields, i) => //<Card {...fields} key={fields.Title} cardId={i}/>\n  __jsx(Card, {\n    key: fields.Title,\n    cardId: i\n  })))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["React","useEffect","useState","useCallback","styled","Card","generalAPIService","Movies","div","MoviesContext","createContext","Provider","Home","loading","isLoading","movies","getMovies","calculateAvarageRatings","Ratings","percentageValue","overAllPerc","map","Value","reduce","avaragePerc","rating","index","includes","all","ratio","split","value","Number","calcPercentage","push","match","percentage","length","sumPercentage","acc","reduceData","response","Title","Poster","i","fetchData","result","get","fields"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\n\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\ninterface ContextProps {\n  Title: string;\n  Poster: string;\n  Ratings: { avrRat: number };\n}\n\ninterface ImoviesResponseFields {\n  Title: string;\n  Poster: string;\n  Ratings: {}[];\n  key: string;\n}\nexport const MoviesContext = React.createContext({} as ImoviesResponseFields[]);\nconst { Provider } = MoviesContext;\n\nconst Home = () => {\n  const [loading, isLoading] = useState(true);\n  const [movies, getMovies] = useState([]);\n\n  const calculateAvarageRatings = (Ratings: {}[]) => {\n    const percentageValue: number[] = [];\n\n    const overAllPerc = Ratings.map(\n      ({ Value }: { Value: string }) => Value\n    ).reduce((avaragePerc, rating, index) => {\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map((value) => Number(value));\n        const calcPercentage = (all / ratio) * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce(\n          (acc, value) => acc + value\n        );\n\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n\n    return overAllPerc;\n  };\n  const reduceData = useCallback((response: {}[]) => {\n    //const averageRatingsAll: { avrRat: number }[] = [];\n    //let averageRatings: { avrRat: number };\n    return response.map(\n      ({ Title, Poster, Ratings }: ImoviesResponseFields, i) => {\n        //averageRatingsAll.push({ avrRat: calculateAvarageRatings(Ratings) });\n        //averageRatings = averageRatingsAll[i];\n        isLoading(false);\n        return { Title, Poster, Ratings };\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    isLoading(true);\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, [reduceData]);\n\n  return (\n    <main>\n      {loading && 'movies are loading'}\n      <Provider value={movies}>\n        <Movies>\n          {movies.map((fields, i) => (\n            //<Card {...fields} key={fields.Title} cardId={i}/>\n            <Card key={fields.Title} cardId={i} />\n          ))}\n        </Movies>\n      </Provider>\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}