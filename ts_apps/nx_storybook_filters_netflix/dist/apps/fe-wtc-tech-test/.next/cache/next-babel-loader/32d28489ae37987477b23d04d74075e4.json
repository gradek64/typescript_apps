{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\nexport const MoviesContext = React.createContext({});\nconst {\n  Provider\n} = MoviesContext;\n\nconst Home = () => {\n  const {\n    0: loading,\n    1: isLoading\n  } = useState(true);\n  const {\n    0: movies,\n    1: getMovies\n  } = useState([]);\n\n  const calculateAvarageRatings = Ratings => {\n    const percentageValue = [];\n    const overAllPerc = Ratings.map(({\n      Value\n    }) => Value).reduce((avaragePerc, rating, index) => {\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map(value => Number(value));\n        const calcPercentage = all / ratio * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce((acc, value) => acc + value);\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n    return overAllPerc;\n  };\n\n  const reduceData = useCallback(response => {\n    //const averageRatingsAll: { avrRat: number }[] = [];\n    //let averageRatings: { avrRat: number };\n    return response.map(({\n      Title,\n      Poster,\n      Ratings\n    }, i) => {\n      //averageRatingsAll.push({ avrRat: calculateAvarageRatings(Ratings) });\n      //averageRatings = averageRatingsAll[i];\n      isLoading(false);\n      return {\n        Title,\n        Poster,\n        Ratings\n      };\n    });\n  }, []);\n  useEffect(() => {\n    isLoading(true);\n\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, [reduceData]);\n  return __jsx(\"main\", null, loading && 'movies are loading', __jsx(Provider, {\n    value: movies\n  }, __jsx(Movies, null, movies.map((fields, i) => __jsx(Card, {\n    key: fields.Title,\n    cardId: i\n  })))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["Movies","styled","div","MoviesContext","React","Provider","Home","isLoading","useState","getMovies","calculateAvarageRatings","Ratings","percentageValue","overAllPerc","Value","rating","value","Number","calcPercentage","all","percentage","index","sumPercentage","acc","avaragePerc","reduceData","useCallback","response","useEffect","fetchData","result","generalAPIService","loading","movies","fields","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\n\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\ninterface ImoviesResponseFields {\n  Title: string;\n  Poster: string;\n  Ratings: {}[];\n  key: string;\n  Saved: boolean;\n  Watched: boolean;\n}\nexport const MoviesContext = React.createContext({} as ImoviesResponseFields[]);\nconst { Provider } = MoviesContext;\n\nconst Home = () => {\n  const [loading, isLoading] = useState(true);\n  const [movies, getMovies] = useState([]);\n\n  const calculateAvarageRatings = (Ratings: {}[]) => {\n    const percentageValue: number[] = [];\n\n    const overAllPerc = Ratings.map(\n      ({ Value }: { Value: string }) => Value\n    ).reduce((avaragePerc, rating, index) => {\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map((value) => Number(value));\n        const calcPercentage = (all / ratio) * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce(\n          (acc, value) => acc + value\n        );\n\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n\n    return overAllPerc;\n  };\n  const reduceData = useCallback((response: {}[]) => {\n    //const averageRatingsAll: { avrRat: number }[] = [];\n    //let averageRatings: { avrRat: number };\n    return response.map(\n      ({ Title, Poster, Ratings }: ImoviesResponseFields, i) => {\n        //averageRatingsAll.push({ avrRat: calculateAvarageRatings(Ratings) });\n        //averageRatings = averageRatingsAll[i];\n        isLoading(false);\n        return { Title, Poster, Ratings };\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    isLoading(true);\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, [reduceData]);\n\n  return (\n    <main>\n      {loading && 'movies are loading'}\n      <Provider value={movies}>\n        <Movies>\n          {movies.map((fields, i) => (\n            <Card key={fields.Title} cardId={i} />\n          ))}\n        </Movies>\n      </Provider>\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}