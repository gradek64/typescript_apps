{"ast":null,"code":"let actorsStringData = '';\nlet trackIndex = 1;\n\nconst generateFilters = (stringData, allMovies) => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  const actors3 = 'Harrison Ford';\n  const actors4 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed'; //first combine actors results\n\n  actorsStringData += stringData;\n  const allActors = [...actorsStringData.split(',')];\n  console.log('allActors', allActors); //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the cod\n\n  function findDuplicate(arr) {\n    const object = {};\n    arr.forEach(function (item) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('trackIndex', trackIndex);\n\n  if (trackIndex === allMovies) {\n    return findDuplicate(allActors);\n  }\n\n  trackIndex++;\n  return;\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["actorsStringData","trackIndex","generateFilters","actors","actors2","actors3","actors4","allActors","console","object","arr","trimStirng","item","findDuplicate"],"mappings":"AAAA,IAAIA,gBAAgB,GAApB,EAAA;AACA,IAAIC,UAAU,GAAd,CAAA;;AACA,MAAMC,eAAe,GAAG,CAAA,UAAA,EAAA,SAAA,KAA2C;AACjE,QAAMC,MAAM,GAAZ,6DAAA;AACA,QAAMC,OAAO,GAAb,4EAAA;AAEA,QAAMC,OAAO,GAAb,eAAA;AACA,QAAMC,OAAO,GALoD,4EAKjE,CALiE,CAQjE;;AACAN,EAAAA,gBAAgB,IAAhBA,UAAAA;AAEA,QAAMO,SAAS,GAAG,CAAC,GAAGP,gBAAgB,CAAhBA,KAAAA,CAAtB,GAAsBA,CAAJ,CAAlB;AAEAQ,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,WAAAA,EAbiE,SAajEA,EAbiE,CAejE;AACA;;AAEA,WAAA,aAAA,CAAA,GAAA,EAAsC;AACpC,UAAMC,MAAM,GAAZ,EAAA;AACAC,IAAAA,GAAG,CAAHA,OAAAA,CAAY,UAAA,IAAA,EAAwB;AAClC,YAAMC,UAAU,GAAGC,IAAI,CAAvB,IAAmBA,EAAnB;AACA,UAAI,CAACH,MAAM,CAAX,UAAW,CAAX,EAAyBA,MAAM,CAANA,UAAM,CAANA,GAAAA,CAAAA;AACzBA,MAAAA,MAAM,CAANA,UAAM,CAANA,IAAAA,CAAAA;AAHFC,KAAAA;AAKA,WAAA,MAAA;AACD;;AAEDF,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,YAAAA,EAAAA,UAAAA;;AACA,MAAIP,UAAU,KAAd,SAAA,EAA8B;AAC5B,WAAOY,aAAa,CAApB,SAAoB,CAApB;AACD;;AAEDZ,EAAAA,UAAU;AACV;AAlCF,CAAA;;AAqCA,SAAA,eAAA","sourcesContent":["let actorsStringData = '';\nlet trackIndex = 1;\nconst generateFilters = (stringData: string, allMovies: number) => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  const actors3 = 'Harrison Ford';\n  const actors4 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n\n  //first combine actors results\n  actorsStringData += stringData;\n\n  const allActors = [...actorsStringData.split(',')];\n\n  console.log('allActors', allActors);\n\n  //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the cod\n\n  function findDuplicate(arr: string[]) {\n    const object = {};\n    arr.forEach(function (item: string) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('trackIndex', trackIndex);\n  if (trackIndex === allMovies) {\n    return findDuplicate(allActors);\n  }\n\n  trackIndex++;\n  return;\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}