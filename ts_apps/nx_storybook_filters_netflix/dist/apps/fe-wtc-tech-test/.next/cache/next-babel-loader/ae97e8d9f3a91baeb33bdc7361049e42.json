{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from '../app/contentComponents/Card/Card';\nimport generalAPIService from '../app/services/apiService';\nimport FiltersGroup from '../app/contentComponents/FiltersGroup/FiltersGroup';\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n`;\nconst Filters = styled.div`\n  display: flex;\n  width: 20%;\n  background-color: grey;\n`;\nconst Movies = styled.div`\n  display: flex;\n  width: 80%;\n  flex-wrap: wrap;\n`;\nconst initialState = {\n  movies: [{\n    Title: 'string',\n    Poster: 'string',\n    Ratings: [{}],\n    key: 'string',\n    Saved: 'True',\n    Watched: 'False',\n    Type: 'movie'\n  }],\n  updateState: state => state\n};\nexport const MoviesContext = React.createContext(initialState);\nconst {\n  Provider,\n  Consumer\n} = MoviesContext;\n\nconst movieReducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_FROM_FETCH':\n      /* [\n        ...action.payload.filter(({ Watched }) =>\n          JSON.parse(Watched.toLowerCase())\n        ),\n      ]; */\n      return state;\n\n    case 'FILTER_WATCHED':\n      //return movies.filter(({ Watched }) => Watched === action.payload);\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nconst Home = () => {\n  const {\n    0: loading,\n    1: isLoading\n  } = useState(true); //const [movies, getMovies] = useState([]);\n\n  const {\n    0: store,\n    1: dispatch\n  } = useReducer(movieReducer, initialState);\n  const reduceData = useCallback(response => {\n    return response.map(({\n      Title,\n      Poster,\n      Ratings,\n      Watched,\n      Saved\n    }) => {\n      return {\n        Title,\n        Poster,\n        Ratings,\n        Watched,\n        Saved\n      };\n    });\n  }, []);\n  useEffect(() => {\n    isLoading(true);\n\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      dispatch({\n        type: 'UPDATE_FROM_FETCH',\n        payload: reduceData(result)\n      });\n      isLoading(false);\n    };\n\n    fetchData();\n  }, [reduceData]);\n  console.log('gagdg', store);\n  return __jsx(\"main\", null, loading && 'movies are loading', !loading && __jsx(Provider, {\n    value: store\n  }, __jsx(Wrapper, null, __jsx(Filters, null, __jsx(FiltersGroup, null)), __jsx(Movies, null, __jsx(Consumer, null, ({\n    movies\n  }) => movies.map((fields, i) => __jsx(Card, {\n    key: fields.Title,\n    cardId: i\n  })))))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["Wrapper","styled","div","Filters","Movies","initialState","movies","Title","Poster","Ratings","key","Saved","Watched","Type","updateState","state","MoviesContext","React","Consumer","movieReducer","action","Home","isLoading","useState","dispatch","useReducer","reduceData","useCallback","response","useEffect","fetchData","result","generalAPIService","type","payload","console","loading","store","fields","i"],"mappings":";AAAA,OAAA,KAAA,IAAA,SAAA,EAAA,QAAA,EAAA,WAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,MAAA,MAAA,mBAAA,C,CAEA;;AACA,OAAA,IAAA,MAAA,oCAAA;AACA,OAAA,iBAAA,MAAA,4BAAA;AACA,OAAA,YAAA,MAAA,oDAAA;AAEA,MAAMA,OAAO,GAAGC,MAAM,CAACC,GAAI;;;CAA3B;AAKA,MAAMC,OAAO,GAAGF,MAAM,CAACC,GAAI;;;;CAA3B;AAKA,MAAME,MAAM,GAAGH,MAAM,CAACC,GAAI;;;;CAA1B;AAeA,MAAMG,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,KAAK,EADP,QAAA;AAEEC,IAAAA,MAAM,EAFR,QAAA;AAGEC,IAAAA,OAAO,EAAE,CAHX,EAGW,CAHX;AAIEC,IAAAA,GAAG,EAJL,QAAA;AAKEC,IAAAA,KAAK,EALP,MAAA;AAMEC,IAAAA,OAAO,EANT,OAAA;AAOEC,IAAAA,IAAI,EAAE;AAPR,GADM,CADW;AAYnBC,EAAAA,WAAW,EAAGC,KAAD,IAAWA;AAZL,CAArB;AAcA,OAAO,MAAMC,aAAa,GAAGC,KAAK,CAALA,aAAAA,CAAtB,YAAsBA,CAAtB;AACP,MAAM;AAAA,EAAA,QAAA;AAAYC,EAAAA;AAAZ,IAAN,aAAA;;AAEA,MAAMC,YAAY,GAAG,CAAA,KAAA,EAAA,MAAA,KAAmB;AACtC,UAAQC,MAAM,CAAd,IAAA;AACE,SAAA,mBAAA;AACE;;;;;AAKA,aAAA,KAAA;;AACF,SAAA,gBAAA;AACE;AACA,aAAA,KAAA;;AACF;AACE,aAAA,KAAA;AAZJ;AADF,CAAA;;AAiBA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAA,OAAA,OAAA;AAAA,OAAUC;AAAV,MAAuBC,QAAQ,CADpB,IACoB,CAArC,CADiB,CAEjB;;AACA,QAAM;AAAA,OAAA,KAAA;AAAA,OAAQC;AAAR,MAAoBC,UAAU,CAAA,YAAA,EAApC,YAAoC,CAApC;AAEA,QAAMC,UAAU,GAAGC,WAAW,CAAEC,QAAD,IAAoB;AACjD,WAAO,QAAQ,CAAR,GAAA,CACL,CAAC;AAAA,MAAA,KAAA;AAAA,MAAA,MAAA;AAAA,MAAA,OAAA;AAAA,MAAA,OAAA;AAAmCjB,MAAAA;AAAnC,KAAD,KAAuE;AACrE,aAAO;AAAA,QAAA,KAAA;AAAA,QAAA,MAAA;AAAA,QAAA,OAAA;AAAA,QAAA,OAAA;AAKLA,QAAAA;AALK,OAAP;AAFJ,KAAO,CAAP;AAD4B,GAAA,EAA9B,EAA8B,CAA9B;AAcAkB,EAAAA,SAAS,CAAC,MAAM;AACdP,IAAAA,SAAS,CAATA,IAAS,CAATA;;AACA,UAAMQ,SAAS,GAAG,YAAY;AAC5B,YAAMC,MAAM,GAAG,MAAMC,iBAAiB,CAAjBA,GAAAA,CAArB,aAAqBA,CAArB;AACAR,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAN,mBAAA;AAA6BC,QAAAA,OAAO,EAAER,UAAU,CAAA,MAAA;AAAhD,OAAD,CAARF;AACAF,MAAAA,SAAS,CAATA,KAAS,CAATA;AAHF,KAAA;;AAMAQ,IAAAA,SAAS;AARF,GAAA,EASN,CATHD,UASG,CATM,CAATA;AAWAM,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,OAAAA,EAAAA,KAAAA;AAEA,SACE,KAAA,CAAA,MAAA,EAAA,IAAA,EACGC,OAAO,IADV,oBAAA,EAEG,CAAA,OAAA,IACC,KAAA,CAAA,QAAA,EAAA;AAAU,IAAA,KAAK,EAAEC;AAAjB,GAAA,EACE,KAAA,CAAA,OAAA,EAAA,IAAA,EACE,KAAA,CAAA,OAAA,EAAA,IAAA,EACE,KAAA,CAAA,YAAA,EAFJ,IAEI,CADF,CADF,EAIE,KAAA,CAAA,MAAA,EAAA,IAAA,EACE,KAAA,CAAA,QAAA,EAAA,IAAA,EACG,CAAC;AAAE/B,IAAAA;AAAF,GAAD,KACC,MAAM,CAAN,GAAA,CAAW,CAAA,MAAA,EAAA,CAAA,KACT,KAAA,CAAA,IAAA,EAAA;AAAM,IAAA,GAAG,EAAEgC,MAAM,CAAjB,KAAA;AAAyB,IAAA,MAAM,EAAEC;AAAjC,GAAA,CADF,CAFJ,CADF,CAJF,CADF,CAHJ,CADF;AAhCF,CAAA;;AAyDA,eAAA,IAAA","sourcesContent":["import React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from '../app/contentComponents/Card/Card';\nimport generalAPIService from '../app/services/apiService';\nimport FiltersGroup from '../app/contentComponents/FiltersGroup/FiltersGroup';\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst Filters = styled.div`\n  display: flex;\n  width: 20%;\n  background-color: grey;\n`;\nconst Movies = styled.div`\n  display: flex;\n  width: 80%;\n  flex-wrap: wrap;\n`;\n\ninterface ImoviesResponseFields {\n  Title: string;\n  Poster: string;\n  Ratings: {}[];\n  key: string;\n  Saved: string;\n  Watched: string;\n  Type: 'movie' | 'series';\n}\nconst initialState = {\n  movies: [\n    {\n      Title: 'string',\n      Poster: 'string',\n      Ratings: [{}],\n      key: 'string',\n      Saved: 'True',\n      Watched: 'False',\n      Type: 'movie',\n    },\n  ],\n  updateState: (state) => state,\n};\nexport const MoviesContext = React.createContext(initialState);\nconst { Provider, Consumer } = MoviesContext;\n\nconst movieReducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_FROM_FETCH':\n      /* [\n        ...action.payload.filter(({ Watched }) =>\n          JSON.parse(Watched.toLowerCase())\n        ),\n      ]; */\n      return state;\n    case 'FILTER_WATCHED':\n      //return movies.filter(({ Watched }) => Watched === action.payload);\n      return state;\n    default:\n      return state;\n  }\n};\n\nconst Home = () => {\n  const [loading, isLoading] = useState(true);\n  //const [movies, getMovies] = useState([]);\n  const [store, dispatch] = useReducer(movieReducer, initialState);\n\n  const reduceData = useCallback((response: {}[]) => {\n    return response.map(\n      ({ Title, Poster, Ratings, Watched, Saved }: ImoviesResponseFields) => {\n        return {\n          Title,\n          Poster,\n          Ratings,\n          Watched,\n          Saved,\n        };\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    isLoading(true);\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      dispatch({ type: 'UPDATE_FROM_FETCH', payload: reduceData(result) });\n      isLoading(false);\n    };\n\n    fetchData();\n  }, [reduceData]);\n\n  console.log('gagdg', store);\n\n  return (\n    <main>\n      {loading && 'movies are loading'}\n      {!loading && (\n        <Provider value={store}>\n          <Wrapper>\n            <Filters>\n              <FiltersGroup />\n            </Filters>\n            <Movies>\n              <Consumer>\n                {({ movies }) =>\n                  movies.map((fields, i) => (\n                    <Card key={fields.Title} cardId={i} />\n                  ))\n                }\n              </Consumer>\n            </Movies>\n          </Wrapper>\n        </Provider>\n      )}\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}