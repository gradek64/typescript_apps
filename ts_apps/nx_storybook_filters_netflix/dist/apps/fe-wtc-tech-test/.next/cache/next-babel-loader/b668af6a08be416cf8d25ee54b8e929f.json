{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport IconsStateManagement from '../IconsManagement/IconsStateManagement';\nimport { MoviesContext } from '../index';\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907'\n};\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${props => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  min-width: 200px;\n  min-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\nconst PosterImage = styled.div`\n  width: 150px;\n  height: 221px;\n  border-radius: 10px;\n  background-image: url(${props => props.imgURL});\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n`;\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px 10px 0px 10px;\n`;\nconst CardFooter = styled.div`\n  width: 100%;\n  padding-top: 7px;\n`;\n\nfunction Card() {\n  //const { Title, Poster: posterURL } = props;\n  const {\n    0: backgroundColor,\n    1: setBgColor\n  } = useState(cardColorMapping.default); //register setColor once and dont re-render\n\n  const setColor = useCallback(({\n    watch,\n    favorite\n  }) => {\n    switch (true) {\n      case !watch && !favorite:\n        setBgColor(cardColorMapping.default);\n        break;\n\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        break;\n\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        break;\n\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n\n  const calculateAvarageRatings = Ratings => {\n    const percentageValue = [];\n    const overAllPerc = Ratings.map(({\n      Value\n    }) => Value).reduce((avaragePerc, rating, index) => {\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map(value => Number(value));\n        const calcPercentage = all / ratio * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce((acc, value) => acc + value);\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n    return overAllPerc;\n  };\n\n  return __jsx(MoviesContext.Consumer, null, contextArray => contextArray.map(({\n    Title,\n    Poster: posterURL,\n    Ratings\n  }) => __jsx(CardContainer, {\n    color: backgroundColor,\n    key: Title\n  }, __jsx(CardHeader, null, __jsx(IconsStateManagement, {\n    callToActionCardColor: setColor\n  })), __jsx(Poster, null, __jsx(PosterImage, {\n    imgURL: posterURL\n  })), __jsx(CardFooter, null, __jsx(RatingStarComp, {\n    rating: calculateAvarageRatings(Ratings)\n  })))));\n}\n\nexport default Card;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/Card/Card.tsx"],"names":["React","useState","useCallback","styled","RatingStarComp","IconsStateManagement","MoviesContext","cardColorMapping","default","savedNotWatched","watchedAndSaved","watchedNotSaved","CardContainer","div","props","color","Poster","PosterImage","imgURL","CardHeader","CardFooter","Card","backgroundColor","setBgColor","setColor","watch","favorite","calculateAvarageRatings","Ratings","percentageValue","overAllPerc","map","Value","reduce","avaragePerc","rating","index","includes","all","ratio","split","value","Number","calcPercentage","push","match","percentage","length","sumPercentage","acc","contextArray","Title","posterURL"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\n//custom\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport IconsStateManagement from '../IconsManagement/IconsStateManagement';\nimport { MoviesContext } from '../index';\n\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907',\n};\n\nconst CardContainer = styled.div<{\n  color: string;\n}>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${(props) => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  min-width: 200px;\n  min-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\nconst PosterImage = styled.div<{\n  imgURL: string;\n}>`\n  width: 150px;\n  height: 221px;\n  border-radius: 10px;\n  background-image: url(${(props) => props.imgURL});\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n`;\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px 10px 0px 10px;\n`;\nconst CardFooter = styled.div`\n  width: 100%;\n  padding-top: 7px;\n`;\n\ninterface ContextProps {\n  Title: string;\n  Poster: string;\n  averageRatings: { avrRat: number };\n}\n\nfunction Card() {\n  //const { Title, Poster: posterURL } = props;\n  const [backgroundColor, setBgColor] = useState(cardColorMapping.default);\n\n  //register setColor once and dont re-render\n  const setColor = useCallback(({ watch, favorite }) => {\n    switch (true) {\n      case !watch && !favorite:\n        setBgColor(cardColorMapping.default);\n        break;\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        break;\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        break;\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  const calculateAvarageRatings = (Ratings: {}[]) => {\n    const percentageValue: number[] = [];\n\n    const overAllPerc = Ratings.map(\n      ({ Value }: { Value: string }) => Value\n    ).reduce((avaragePerc, rating, index) => {\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map((value) => Number(value));\n        const calcPercentage = (all / ratio) * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce(\n          (acc, value) => acc + value\n        );\n\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n\n    return overAllPerc;\n  };\n\n  return (\n    <MoviesContext.Consumer>\n      {(contextArray) =>\n        contextArray.map(({ Title, Poster: posterURL, Ratings }) => (\n          <CardContainer color={backgroundColor} key={Title}>\n            <CardHeader>\n              <IconsStateManagement callToActionCardColor={setColor} />\n            </CardHeader>\n            <Poster>\n              <PosterImage imgURL={posterURL} />\n            </Poster>\n            <CardFooter>\n              {/*has to be between 0-100 %*/}\n              <RatingStarComp rating={calculateAvarageRatings(Ratings)} />\n            </CardFooter>\n          </CardContainer>\n        ))\n      }\n    </MoviesContext.Consumer>\n  );\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}