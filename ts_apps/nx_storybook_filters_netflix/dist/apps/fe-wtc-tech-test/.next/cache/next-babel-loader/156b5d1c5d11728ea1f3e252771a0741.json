{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Home = () => {\n  const {\n    0: movies,\n    1: getMovies\n  } = useState([]);\n\n  const calculateAvarageRatings = Ratings => {\n    const overAllPerc = Ratings.map(({\n      Value\n    }) => Value).reduce((avaragePerc, rating, index) => {\n      let percentageValue;\n\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map(value => Number(value));\n        const calcPercentage = all / ratio;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce((acc, value) => acc + value);\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n    return overAllPerc;\n  };\n\n  const reduceData = response => {\n    return response.map(({\n      Title,\n      Poster,\n      Ratings\n    }) => {\n      const averageRatings = calculateAvarageRatings(Ratings);\n      return {\n        Title,\n        Poster,\n        averageRatings\n      };\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      console.log('result', result);\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, []);\n  return __jsx(\"main\", null, __jsx(Movies, null, movies.map(fields => __jsx(Card, _extends({}, fields, {\n    key: fields.Title\n  })))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["React","useEffect","useState","styled","Card","generalAPIService","Movies","div","Home","movies","getMovies","calculateAvarageRatings","Ratings","overAllPerc","map","Value","reduce","avaragePerc","rating","index","percentageValue","includes","all","ratio","split","value","Number","calcPercentage","push","match","percentage","length","sumPercentage","acc","reduceData","response","Title","Poster","averageRatings","fetchData","result","get","console","log","fields"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,iBAAP,MAA8B,uBAA9B;AAEA,MAAMC,MAAM,GAAGH,MAAM,CAACI,GAAI;;;CAA1B;;AAKA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBR,QAAQ,CAAC,EAAD,CAApC;;AAQA,QAAMS,uBAAuB,GAAIC,OAAD,IAAmB;AACjD,UAAMC,WAAW,GAAGD,OAAO,CAACE,GAAR,CAClB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAkCA,KADhB,EAElBC,MAFkB,CAEX,CAACC,WAAD,EAAcC,MAAd,EAAsBC,KAAtB,KAAgC;AACvC,UAAIC,eAAJ;;AAEA,UAAIF,MAAM,CAACG,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AACxB,cAAM,CAACC,GAAD,EAAMC,KAAN,IAAeL,MAAM,CAACM,KAAP,CAAa,GAAb,EAAkBV,GAAlB,CAAuBW,KAAD,IAAWC,MAAM,CAACD,KAAD,CAAvC,CAArB;AACA,cAAME,cAAc,GAAGL,GAAG,GAAGC,KAA7B;AACAH,QAAAA,eAAe,CAACQ,IAAhB,CAAqBD,cAArB;AACD;;AAED,UAAIT,MAAM,CAACG,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AACxB,cAAMI,KAAK,GAAGP,MAAM,CAACW,KAAP,CAAa,KAAb,EAAoB,CAApB,CAAd;AACA,cAAMC,UAAU,GAAGJ,MAAM,CAACD,KAAD,CAAzB;AACAL,QAAAA,eAAe,CAACQ,IAAhB,CAAqBE,UAArB;AACD;;AAED,UAAIX,KAAK,KAAKP,OAAO,CAACmB,MAAR,GAAiB,CAA/B,EAAkC;AAChC,cAAMC,aAAa,GAAGZ,eAAe,CAACJ,MAAhB,CACpB,CAACiB,GAAD,EAAMR,KAAN,KAAgBQ,GAAG,GAAGR,KADF,CAAtB;AAGAR,QAAAA,WAAW,GAAGe,aAAa,GAAGpB,OAAO,CAACmB,MAAtC;AACA,eAAOd,WAAP;AACD;AACF,KAxBmB,EAwBjB,CAxBiB,CAApB;AA0BA,WAAOJ,WAAP;AACD,GA5BD;;AA6BA,QAAMqB,UAAU,GAAIC,QAAD,IAAoB;AACrC,WAAOA,QAAQ,CAACrB,GAAT,CAAa,CAAC;AAAEsB,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBzB,MAAAA;AAAjB,KAAD,KAAuD;AACzE,YAAM0B,cAAc,GAAG3B,uBAAuB,CAACC,OAAD,CAA9C;AAEA,aAAO;AAAEwB,QAAAA,KAAF;AAASC,QAAAA,MAAT;AAAiBC,QAAAA;AAAjB,OAAP;AACD,KAJM,CAAP;AAKD,GAND;;AAQArC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsC,SAAS,GAAG,YAAY;AAC5B,YAAMC,MAAM,GAAG,MAAMnC,iBAAiB,CAACoC,GAAlB,CAAsB,aAAtB,CAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,MAAtB;AACA9B,MAAAA,SAAS,CAACwB,UAAU,CAACM,MAAD,CAAX,CAAT;AACD,KAJD;;AAMAD,IAAAA,SAAS;AACV,GARQ,EAQN,EARM,CAAT;AAUA,SACE,oBACE,MAAC,MAAD,QACG9B,MAAM,CAACK,GAAP,CAAY8B,MAAD,IACV,MAAC,IAAD,eAAUA,MAAV;AAAkB,IAAA,GAAG,EAAEA,MAAM,CAACR;AAA9B,KADD,CADH,CADF,CADF;AASD,CAjED;;AAmEA,eAAe5B,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\n\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Home = () => {\n  const [movies, getMovies] = useState([]);\n\n  interface ImoviesResponseFields {\n    Title: string;\n    Poster: string;\n    Ratings: {}[];\n    key: string;\n  }\n  const calculateAvarageRatings = (Ratings: {}[]) => {\n    const overAllPerc = Ratings.map(\n      ({ Value }: { Value: string }) => Value\n    ).reduce((avaragePerc, rating, index) => {\n      let percentageValue: number[];\n\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map((value) => Number(value));\n        const calcPercentage = all / ratio;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce(\n          (acc, value) => acc + value\n        );\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n\n    return overAllPerc;\n  };\n  const reduceData = (response: {}[]) => {\n    return response.map(({ Title, Poster, Ratings }: ImoviesResponseFields) => {\n      const averageRatings = calculateAvarageRatings(Ratings);\n\n      return { Title, Poster, averageRatings };\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      console.log('result', result);\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <main>\n      <Movies>\n        {movies.map((fields) => (\n          <Card {...fields} key={fields.Title} />\n        ))}\n      </Movies>\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}