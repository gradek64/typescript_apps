{"ast":null,"code":"const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed'; //first combine actors results\n\n  const allActors = [...actors.split(','), ...actors2.split(',')];\n  const filteredActors = []; //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  const ss = allActors.map(actor => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n      return actor;\n    }\n\n    filteredActors.push(actor);\n    return filteredActors.push(actor);\n  });\n  console.log('ss', ss);\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["generateFilters","actors","actors2","allActors","filteredActors","ss","actor","console"],"mappings":"AAAA,MAAMA,eAAe,GAAG,MAAM;AAC5B,QAAMC,MAAM,GAAZ,6DAAA;AACA,QAAMC,OAAO,GAFe,4EAE5B,CAF4B,CAK5B;;AAEA,QAAMC,SAAS,GAAG,CAAC,GAAGF,MAAM,CAANA,KAAAA,CAAJ,GAAIA,CAAJ,EAAuB,GAAGC,OAAO,CAAPA,KAAAA,CAA5C,GAA4CA,CAA1B,CAAlB;AACA,QAAME,cAAc,GARQ,EAQ5B,CAR4B,CAS5B;AACA;;AAEA,QAAMC,EAAE,GAAG,SAAS,CAAT,GAAA,CAAeC,KAAD,IAAW;AAClC;AACA,QAAIF,cAAc,CAAdA,QAAAA,CAAJ,KAAIA,CAAJ,EAAoC;AAClCG,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,iBAAAA,EAAAA,KAAAA;AACA,aAAA,KAAA;AACD;;AACDH,IAAAA,cAAc,CAAdA,IAAAA,CAAAA,KAAAA;AACA,WAAOA,cAAc,CAAdA,IAAAA,CAAP,KAAOA,CAAP;AAPF,GAAW,CAAX;AAUAG,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,IAAAA,EAAAA,EAAAA;AAtBF,CAAA;;AAyBA,SAAA,eAAA","sourcesContent":["const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n\n  //first combine actors results\n\n  const allActors = [...actors.split(','), ...actors2.split(',')];\n  const filteredActors = [];\n  //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  const ss = allActors.map((actor) => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n      return actor;\n    }\n    filteredActors.push(actor);\n    return filteredActors.push(actor);\n  });\n\n  console.log('ss', ss);\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}