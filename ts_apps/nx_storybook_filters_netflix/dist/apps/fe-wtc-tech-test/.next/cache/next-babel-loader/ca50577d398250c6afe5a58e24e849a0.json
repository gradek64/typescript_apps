{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  color: white;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useContext } from 'react';\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined'; //custom\n\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport wrapperIconHOC from '../../contentComponents/IconCTA/IconAction';\nimport { MoviesContext } from '../../../pages/index';\n/* const all = Object.entries(generateFilters());\nconst displayed1 = all.slice(0, 5);\nconst hidden1 = all.slice(5, all.length); */\n\nvar FilterContainer = styled.div(_templateObject());\nvar CheckBox = wrapperIconHOC(CheckBoxOutlineBlankOutlinedIcon, CheckBoxOutlinedIcon);\n\nfunction FiltersGroup() {\n  var _useContext = useContext(MoviesContext),\n      movies = _useContext.movies,\n      updateState = _useContext.updateState;\n  /* const { Watched, Saved, Title, Poster: PosterURL, Ratings } = [...movies];\n  const movieStatus = {\n    watch: JSON.parse(Watched.toLowerCase()),\n    favorite: JSON.parse(Saved.toLowerCase()),\n  }; */\n\n\n  var callToAction = function callToAction(state) {\n    var yes = state.yes,\n        no = state.no;\n    updateState(yes ? 'True' : 'False');\n  };\n\n  console.log('movies', movies);\n\n  var displayFilters = function displayFilters(ArrOfFilters, length) {\n    return {\n      displayed: ArrOfFilters.slice(0, 5),\n      hidden: ArrOfFilters.slice(5, length)\n    };\n  };\n\n  var below60 = [];\n  var between6080 = [];\n  var between8090 = [];\n  var above90 = [];\n  var metaScoreStrings = '';\n\n  var calculateMetaScore = function calculateMetaScore(score) {\n    if (score < 60) {\n      metaScoreStrings += 'below60';\n    }\n\n    if (score > 60 && score < 80) {\n      metaScoreStrings += 'between6080';\n    }\n\n    if (score > 80 && score < 90) {\n      metaScoreStrings += 'between8090';\n    }\n\n    if (score > 90) {\n      metaScoreStrings += 'abbove90';\n    }\n\n    return metaScoreStrings;\n  };\n\n  var watched = Object.entries({\n    YES: movies.filter(function (_ref) {\n      var Watched = _ref.Watched;\n      return Watched === 'True';\n    }).length,\n    NO: movies.filter(function (_ref2) {\n      var Watched = _ref2.Watched;\n      return Watched === 'False';\n    }).length\n  });\n  var metaScores = Object.entries({\n    'below 60': below60.length,\n    'between 60 and 80': between6080.length,\n    'between 80 and 90': between8090.length,\n    'above 90': above90.length\n  });\n  var type = Object.entries({\n    MOVIE: movies.filter(function (_ref3) {\n      var Type = _ref3.Type;\n      return Type === 'movie';\n    }).length,\n    SERIES: movies.filter(function (_ref4) {\n      var Type = _ref4.Type;\n      return Type === 'series';\n    }).length\n  });\n  /*  const actorsFilters = movies.reduce((obj, { Actors }) => {\n    obj = generateFilters(Actors, movies.length);\n    return obj;\n  }, {});\n   const entries = Object.entries(actorsFilters);\n  const dd = displayFilters(entries, entries.length);\n  console.log('displayed', dd); */\n\n  var actorsFilters = movies.reduce(function (obj, _ref5) {\n    var Year = _ref5.Year,\n        Metascore = _ref5.Metascore;\n    console.log('.....Dreic.....', Year);\n    if (Metascore) calculateMetaScore(Number(Metascore));\n    obj = generateFilters(Year, movies.length);\n    return obj;\n  }, {});\n  var metascore = movies.map(function (_ref6) {\n    var Metascore = _ref6.Metascore;\n    var ss = calculateMetaScore(Number(Metascore));\n    console.log('metascore', metaScores);\n    return ss;\n  }); //const entries = Object.entries(actorsFilters);\n\n  /*  const displayed = watched.slice(0, 5);\n  const hidden = watched.slice(5, all.length); */\n\n  /* const FilterLabel = {\n    watched,\n    type,\n    actors:generateFilters()\n  }; */\n\n  var ss = true;\n  return __jsx(React.Fragment, null, ss && '...loadin', __jsx(FilterContainer, null, ['watched'].map(function (title) {\n    return __jsx(\"div\", {\n      className: \"accordion\"\n    }, __jsx(Accordion, {\n      open: true,\n      shevron: false,\n      clickDisable: true,\n      title: title\n    }, __jsx(\"div\", null, [].map(function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 2),\n          key = _ref8[0],\n          value = _ref8[1];\n\n      return __jsx(\"div\", {\n        key: key\n      }, __jsx(CheckBox, {\n        callToAction: callToAction,\n        icon: \"yes\"\n      }), \"\".concat(key, \"(\").concat(value, \")\"));\n    }))), [].length > 0 && __jsx(Accordion, {\n      title: '...more',\n      directional: true,\n      shevron: false\n    }, [].map(function (_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 2),\n          key = _ref10[0],\n          value = _ref10[1];\n\n      return __jsx(\"div\", {\n        key: key\n      }, __jsx(CheckBox, {\n        callToAction: callToAction,\n        icon: \"no\"\n      }), \"\".concat(key, \"(\").concat(value, \")\"));\n    })));\n  })));\n} //make sure it render only the amount of movies.lenght\n\n\nexport default React.memo(FiltersGroup);","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/FiltersGroup.tsx"],"names":["FilterContainer","styled","CheckBox","wrapperIconHOC","movies","updateState","useContext","callToAction","yes","no","state","console","displayFilters","displayed","ArrOfFilters","hidden","below60","between6080","between8090","above90","metaScoreStrings","calculateMetaScore","score","watched","YES","Watched","NO","length","metaScores","type","MOVIE","Type","SERIES","actorsFilters","Year","Metascore","Number","obj","generateFilters","metascore","ss","title","key","value","React"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined';\n\n//custom\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport wrapperIconHOC from '../../contentComponents/IconCTA/IconAction';\nimport { MoviesContext } from '../../../pages/index';\nimport { SSL_OP_EPHEMERAL_RSA } from 'constants';\n\n/* const all = Object.entries(generateFilters());\nconst displayed1 = all.slice(0, 5);\nconst hidden1 = all.slice(5, all.length); */\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\n\nconst CheckBox = wrapperIconHOC(\n  CheckBoxOutlineBlankOutlinedIcon,\n  CheckBoxOutlinedIcon\n);\n\nfunction FiltersGroup() {\n  const { movies, updateState } = useContext(MoviesContext);\n  /* const { Watched, Saved, Title, Poster: PosterURL, Ratings } = [...movies];\n  const movieStatus = {\n    watch: JSON.parse(Watched.toLowerCase()),\n    favorite: JSON.parse(Saved.toLowerCase()),\n  }; */\n\n  const callToAction = (state) => {\n    const { yes, no } = state;\n    updateState(yes ? 'True' : 'False');\n  };\n  console.log('movies', movies);\n\n  const displayFilters = (\n    ArrOfFilters: [string, unknown][],\n    length: number\n  ) => ({\n    displayed: ArrOfFilters.slice(0, 5),\n    hidden: ArrOfFilters.slice(5, length),\n  });\n\n  const below60 = [];\n  const between6080 = [];\n  const between8090 = [];\n  const above90 = [];\n\n  let metaScoreStrings = '';\n  const calculateMetaScore = (score: number) => {\n    if (score < 60) {\n      metaScoreStrings += 'below60';\n    }\n    if (score > 60 && score < 80) {\n      metaScoreStrings += 'between6080';\n    }\n    if (score > 80 && score < 90) {\n      metaScoreStrings += 'between8090';\n    }\n    if (score > 90) {\n      metaScoreStrings += 'abbove90';\n    }\n    return metaScoreStrings;\n  };\n\n  const watched = Object.entries({\n    YES: movies.filter(({ Watched }) => Watched === 'True').length,\n    NO: movies.filter(({ Watched }) => Watched === 'False').length,\n  });\n\n  const metaScores = Object.entries({\n    'below 60': below60.length,\n    'between 60 and 80': between6080.length,\n    'between 80 and 90': between8090.length,\n    'above 90': above90.length,\n  });\n\n  const type = Object.entries({\n    MOVIE: movies.filter(({ Type }) => Type === 'movie').length,\n    SERIES: movies.filter(({ Type }) => Type === 'series').length,\n  });\n\n  interface ImoviesResponseFields {\n    Title: string;\n    Poster: string;\n    Ratings: {}[];\n    Saved: string;\n    Watched: string;\n    Actors: string;\n    Type: string;\n  }\n\n  /*  const actorsFilters = movies.reduce((obj, { Actors }) => {\n    obj = generateFilters(Actors, movies.length);\n    return obj;\n  }, {});\n\n  const entries = Object.entries(actorsFilters);\n  const dd = displayFilters(entries, entries.length);\n  console.log('displayed', dd); */\n\n  const actorsFilters = movies.reduce((obj, { Year, Metascore }) => {\n    console.log('.....Dreic.....', Year);\n\n    if (Metascore) calculateMetaScore(Number(Metascore));\n\n    obj = generateFilters(Year, movies.length);\n    return obj;\n  }, {});\n\n  const metascore = movies.map(({ Metascore }) => {\n    const ss = calculateMetaScore(Number(Metascore));\n\n    console.log('metascore', metaScores);\n    return ss;\n  });\n\n  //const entries = Object.entries(actorsFilters);\n\n  /*  const displayed = watched.slice(0, 5);\n  const hidden = watched.slice(5, all.length); */\n\n  /* const FilterLabel = {\n    watched,\n    type,\n    actors:generateFilters()\n  }; */\n\n  const ss = true;\n  return (\n    <>\n      {ss && '...loadin'}\n      <FilterContainer>\n        {['watched'].map((title) => (\n          <div className=\"accordion\">\n            <Accordion open shevron={false} clickDisable={true} title={title}>\n              <div>\n                {[].map(([key, value]) => (\n                  <div key={key}>\n                    <CheckBox callToAction={callToAction} icon=\"yes\" />\n                    {`${key}(${value})`}\n                  </div>\n                ))}\n              </div>\n            </Accordion>\n            {[].length > 0 && (\n              <Accordion title={'...more'} directional={true} shevron={false}>\n                {[].map(([key, value]) => (\n                  <div key={key}>\n                    <CheckBox callToAction={callToAction} icon=\"no\" />\n                    {`${key}(${value})`}\n                  </div>\n                ))}\n              </Accordion>\n            )}\n          </div>\n        ))}\n      </FilterContainer>\n    </>\n  );\n}\n\n//make sure it render only the amount of movies.lenght\nexport default React.memo(FiltersGroup);\n"]},"metadata":{},"sourceType":"module"}