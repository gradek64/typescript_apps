{"ast":null,"code":"const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  const actors3 = 'Harrison Ford'; //first combine actors results\n\n  const allActors = [...actors.split(','), ...actors2.split(','), ...actors3.split(',')];\n  const filteredActors = [];\n  let duplicatesdActors = []; //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  const ss = allActors.map(actor => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n      duplicatesdActors.push(actor);\n    }\n\n    if (duplicatesdActors.length > 0) {\n      filteredActors.push(duplicatesdActors); //do it again for the first actor on first interation\n\n      if (allActors.includes(duplicatesdActors[0])) {\n        console.log('duplicate actor', actor);\n        duplicatesdActors.push(actor);\n      }\n\n      duplicatesdActors = [];\n    } else {\n      filteredActors.push(actor);\n      console.log('filteredActors', filteredActors);\n    }\n  });\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["generateFilters","actors","actors2","actors3","allActors","filteredActors","duplicatesdActors","ss","actor","console"],"mappings":"AAAA,MAAMA,eAAe,GAAG,MAAM;AAC5B,QAAMC,MAAM,GAAZ,6DAAA;AACA,QAAMC,OAAO,GAAb,4EAAA;AAEA,QAAMC,OAAO,GAJe,eAI5B,CAJ4B,CAM5B;;AAEA,QAAMC,SAAS,GAAG,CAChB,GAAGH,MAAM,CAANA,KAAAA,CADa,GACbA,CADa,EAEhB,GAAGC,OAAO,CAAPA,KAAAA,CAFa,GAEbA,CAFa,EAGhB,GAAGC,OAAO,CAAPA,KAAAA,CAHL,GAGKA,CAHa,CAAlB;AAKA,QAAME,cAAc,GAApB,EAAA;AACA,MAAIC,iBAAiB,GAdO,EAc5B,CAd4B,CAe5B;AACA;;AAEA,QAAMC,EAAE,GAAG,SAAS,CAAT,GAAA,CAAeC,KAAD,IAAW;AAClC;AACA,QAAIH,cAAc,CAAdA,QAAAA,CAAJ,KAAIA,CAAJ,EAAoC;AAClCI,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,iBAAAA,EAAAA,KAAAA;AACAH,MAAAA,iBAAiB,CAAjBA,IAAAA,CAAAA,KAAAA;AACD;;AAED,QAAIA,iBAAiB,CAAjBA,MAAAA,GAAJ,CAAA,EAAkC;AAChCD,MAAAA,cAAc,CAAdA,IAAAA,CADgC,iBAChCA,EADgC,CAEhC;;AACA,UAAID,SAAS,CAATA,QAAAA,CAAmBE,iBAAiB,CAAxC,CAAwC,CAApCF,CAAJ,EAA8C;AAC5CK,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,iBAAAA,EAAAA,KAAAA;AACAH,QAAAA,iBAAiB,CAAjBA,IAAAA,CAAAA,KAAAA;AACD;;AACDA,MAAAA,iBAAiB,GAAjBA,EAAAA;AAPF,KAAA,MAQO;AACLD,MAAAA,cAAc,CAAdA,IAAAA,CAAAA,KAAAA;AAEAI,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,gBAAAA,EAAAA,cAAAA;AACD;AAnBH,GAAW,CAAX;AAlBF,CAAA;;AAyCA,SAAA,eAAA","sourcesContent":["const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  const actors3 = 'Harrison Ford';\n\n  //first combine actors results\n\n  const allActors = [\n    ...actors.split(','),\n    ...actors2.split(','),\n    ...actors3.split(','),\n  ];\n  const filteredActors = [];\n  let duplicatesdActors = [];\n  //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  const ss = allActors.map((actor) => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n      duplicatesdActors.push(actor);\n    }\n\n    if (duplicatesdActors.length > 0) {\n      filteredActors.push(duplicatesdActors);\n      //do it again for the first actor on first interation\n      if (allActors.includes(duplicatesdActors[0])) {\n        console.log('duplicate actor', actor);\n        duplicatesdActors.push(actor);\n      }\n      duplicatesdActors = [];\n    } else {\n      filteredActors.push(actor);\n\n      console.log('filteredActors', filteredActors);\n    }\n  });\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}