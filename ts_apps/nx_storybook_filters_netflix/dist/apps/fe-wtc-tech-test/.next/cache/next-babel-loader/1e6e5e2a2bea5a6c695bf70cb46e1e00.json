{"ast":null,"code":"const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed'; //first combine actors results\n\n  const allActors = [...actors.split(','), ...actors2.split(',')];\n  console.log('allActors', allActors);\n  const filteredActors = //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n  allActors.map(actor => {\n    //duplicates\n\n    /*  if (allActors.filter((actor=>actor)) {\n    console.log('duplicate actor', actor);\n    } */\n    console.log(allActors.filter(actor => actor));\n  });\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["generateFilters","actors","actors2","allActors","split","console","log","filteredActors","map","actor","filter"],"mappings":"AAAA,MAAMA,eAAe,GAAG,MAAM;AAC5B,QAAMC,MAAM,GAAG,6DAAf;AACA,QAAMC,OAAO,GACX,4EADF,CAF4B,CAK5B;;AAEA,QAAMC,SAAS,GAAG,CAAC,GAAGF,MAAM,CAACG,KAAP,CAAa,GAAb,CAAJ,EAAuB,GAAGF,OAAO,CAACE,KAAR,CAAc,GAAd,CAA1B,CAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,SAAzB;AACA,QAAMI,cAAc,GAClB;AACA;AAEAJ,EAAAA,SAAS,CAACK,GAAV,CAAeC,KAAD,IAAW;AACvB;;AACA;;;AAGAJ,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAS,CAACO,MAAV,CAAkBD,KAAD,IAAWA,KAA5B,CAAZ;AACD,GAND,CAJF;AAWD,CApBD;;AAsBA,SAAST,eAAT","sourcesContent":["const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n\n  //first combine actors results\n\n  const allActors = [...actors.split(','), ...actors2.split(',')];\n  console.log('allActors', allActors);\n  const filteredActors =\n    //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n    //and continue with the code\n\n    allActors.map((actor) => {\n      //duplicates\n      /*  if (allActors.filter((actor=>actor)) {\n      console.log('duplicate actor', actor);\n    } */\n      console.log(allActors.filter((actor) => actor));\n    });\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}