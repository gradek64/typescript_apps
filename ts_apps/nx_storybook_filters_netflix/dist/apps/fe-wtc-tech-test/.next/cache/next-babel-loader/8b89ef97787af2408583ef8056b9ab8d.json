{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined'; //custom\n\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport wrapperIconHOC from '../../contentComponents/IconCTA/IconAction';\nimport { MoviesContext } from '../../../pages/index';\n/* const all = Object.entries(generateFilters());\nconst displayed1 = all.slice(0, 5);\nconst hidden1 = all.slice(5, all.length); */\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\nconst CheckBox = wrapperIconHOC(CheckBoxOutlineBlankOutlinedIcon, CheckBoxOutlinedIcon);\n\nfunction FiltersGroup() {\n  const {\n    movies,\n    updateState\n  } = useContext(MoviesContext);\n\n  const callToAction = state => {\n    const {\n      yes,\n      no\n    } = state;\n    updateState(yes ? 'True' : 'False');\n  };\n\n  console.log('movies', movies);\n\n  const displayFilters = (ArrOfFilters, length) => ({\n    displayed: ArrOfFilters.slice(0, 5),\n    hidden: ArrOfFilters.slice(5, length)\n  });\n\n  let metaScoreStrings = '';\n\n  const calculateMetaScore = score => {\n    if (score < 60) {\n      metaScoreStrings = 'below60';\n    }\n\n    if (score > 60 && score < 80) {\n      metaScoreStrings = 'between6080';\n    }\n\n    if (score > 80 && score < 90) {\n      metaScoreStrings = 'between8090';\n    }\n\n    if (score > 90) {\n      metaScoreStrings = 'abbove90';\n    }\n\n    return metaScoreStrings;\n  };\n\n  const generate = value => (obj, element) => {\n    if (value === 'Metascore') obj = generateFilters(calculateMetaScore(Number(element[value])), movies.length);else {\n      obj = generateFilters(element[value], movies.length);\n    }\n    return obj;\n  }; //static filters\n\n\n  const watched = Object.entries({\n    YES: movies.filter(({\n      Watched\n    }) => Watched === 'True').length,\n    NO: movies.filter(({\n      Watched\n    }) => Watched === 'False').length\n  });\n  const savedInWatched = Object.entries({\n    YES: movies.filter(({\n      Saved\n    }) => Saved === 'True').length,\n    NO: movies.filter(({\n      Saved\n    }) => Saved === 'False').length\n  });\n  const type = Object.entries({\n    MOVIE: movies.filter(({\n      Type\n    }) => Type === 'movie').length,\n    SERIES: movies.filter(({\n      Type\n    }) => Type === 'series').length\n  }); //generated filters\n\n  const metasArr = Object.entries(movies.reduce(generate('Metascore'), {}));\n  const YearArr = Object.entries(movies.reduce(generate('Year'), {}));\n  const genreArr = Object.entries(movies.reduce(generate('Genre'), {}));\n  const actorsArr = Object.entries(movies.reduce(generate('Actors'), {}));\n  const directorArr = Object.entries(movies.reduce(generate('Actors'), {}));\n  const metasArrFormat = displayFilters(metasArr, metasArr.length);\n  const yearArrFormat = displayFilters(YearArr, YearArr.length);\n  const genreArrFormat = displayFilters(genreArr, genreArr.length);\n  const actorsArrFormat = displayFilters(actorsArr, actorsArr.length);\n  const directorArrFormat = displayFilters(directorArr, directorArr.length);\n  const filtersLabels = {\n    TYPE: displayFilters(type, type.length),\n    YEARS: yearArrFormat,\n    METASCORE: metasArrFormat,\n    GENRE: genreArrFormat,\n    WATCHED: displayFilters(watched, watched.length),\n    'SAVED IN WATCHED LIST': displayFilters(savedInWatched, savedInWatched.length),\n    ACTORS: actorsArrFormat,\n    DIRECTORS: directorArrFormat\n  };\n  const sss = Object.entries(filtersLabels);\n  console.log('ssss', sss);\n  console.log('watched', watched);\n  const ss = false;\n  return __jsx(React.Fragment, null, ss && '...loadin', __jsx(FilterContainer, null, sss.map(([title, filters]) => __jsx(\"div\", {\n    className: \"accordion\"\n  }, __jsx(Accordion, {\n    open: true,\n    shevron: false,\n    clickDisable: true,\n    title: title\n  }, __jsx(\"div\", null, filters['displayed'].map(([key, value]) => __jsx(\"div\", {\n    key: key\n  }, __jsx(CheckBox, {\n    callToAction: callToAction,\n    icon: \"yes\"\n  }), `${key}(${value})`)))), filters['hidden'].length > 0 && __jsx(Accordion, {\n    title: '...more',\n    directional: true,\n    shevron: false\n  }, filters['hidden'].map(([key, value]) => __jsx(\"div\", {\n    key: key\n  }, __jsx(CheckBox, {\n    callToAction: callToAction,\n    icon: \"no\"\n  }), `${key}(${value})`)))))));\n} //make sure it render only the amount of movies.lenght\n\n\nexport default React.memo(FiltersGroup);","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/FiltersGroup.tsx"],"names":["FilterContainer","styled","div","CheckBox","wrapperIconHOC","updateState","useContext","callToAction","state","no","yes","console","displayFilters","displayed","ArrOfFilters","hidden","metaScoreStrings","calculateMetaScore","score","generate","value","obj","generateFilters","Number","element","movies","watched","YES","Watched","NO","length","savedInWatched","Saved","type","MOVIE","Type","SERIES","metasArr","Object","YearArr","genreArr","actorsArr","directorArr","metasArrFormat","yearArrFormat","genreArrFormat","actorsArrFormat","directorArrFormat","filtersLabels","TYPE","YEARS","METASCORE","GENRE","WATCHED","ACTORS","DIRECTORS","sss","ss","title","filters","key","React"],"mappings":";AAAA,OAAA,KAAA,IAAA,UAAA,QAAA,OAAA;AACA,OAAA,gCAAA,MAAA,iDAAA;AACA,OAAA,oBAAA,MAAA,qCAAA,C,CAEA;;AACA,OAAA,SAAA,MAAA,wBAAA;AACA,SAAA,eAAA,QAAA,iCAAA;AACA,OAAA,MAAA,MAAA,mBAAA;AACA,OAAA,cAAA,MAAA,4CAAA;AACA,SAAA,aAAA,QAAA,sBAAA;AAGA;;;;AAIA,MAAMA,eAAe,GAAGC,MAAM,CAACC,GAAI;;;;CAAnC;AAMA,MAAMC,QAAQ,GAAGC,cAAc,CAAA,gCAAA,EAA/B,oBAA+B,CAA/B;;AAKA,SAAA,YAAA,GAAwB;AACtB,QAAM;AAAA,IAAA,MAAA;AAAUC,IAAAA;AAAV,MAA0BC,UAAU,CAA1C,aAA0C,CAA1C;;AAEA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,UAAM;AAAA,MAAA,GAAA;AAAOC,MAAAA;AAAP,QAAN,KAAA;AACAJ,IAAAA,WAAW,CAACK,GAAG,GAAA,MAAA,GAAfL,OAAW,CAAXA;AAFF,GAAA;;AAIAM,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,EAAAA,MAAAA;;AAEA,QAAMC,cAAc,GAAG,CAAA,YAAA,EAAA,MAAA,MAGjB;AACJC,IAAAA,SAAS,EAAEC,YAAY,CAAZA,KAAAA,CAAAA,CAAAA,EADP,CACOA,CADP;AAEJC,IAAAA,MAAM,EAAED,YAAY,CAAZA,KAAAA,CAAAA,CAAAA,EAAAA,MAAAA;AAFJ,GAHiB,CAAvB;;AAQA,MAAIE,gBAAgB,GAApB,EAAA;;AACA,QAAMC,kBAAkB,GAAIC,KAAD,IAAmB;AAC5C,QAAIA,KAAK,GAAT,EAAA,EAAgB;AACdF,MAAAA,gBAAgB,GAAhBA,SAAAA;AACD;;AACD,QAAIE,KAAK,GAALA,EAAAA,IAAcA,KAAK,GAAvB,EAAA,EAA8B;AAC5BF,MAAAA,gBAAgB,GAAhBA,aAAAA;AACD;;AACD,QAAIE,KAAK,GAALA,EAAAA,IAAcA,KAAK,GAAvB,EAAA,EAA8B;AAC5BF,MAAAA,gBAAgB,GAAhBA,aAAAA;AACD;;AACD,QAAIE,KAAK,GAAT,EAAA,EAAgB;AACdF,MAAAA,gBAAgB,GAAhBA,UAAAA;AACD;;AACD,WAAA,gBAAA;AAbF,GAAA;;AAgBA,QAAMG,QAAQ,GAAIC,KAAD,IAAmB,CAAA,GAAA,EAAA,OAAA,KAA0B;AAC5D,QAAIA,KAAK,KAAT,WAAA,EACEC,GAAG,GAAGC,eAAe,CACnBL,kBAAkB,CAACM,MAAM,CAACC,OAAO,CADd,KACc,CAAR,CAAP,CADC,EAEnBC,MAAM,CAHV,MACuB,CAArBJ,CADF,KAKK;AACHA,MAAAA,GAAG,GAAGC,eAAe,CAACE,OAAO,CAAR,KAAQ,CAAR,EAAiBC,MAAM,CAA5CJ,MAAqB,CAArBA;AACD;AACD,WAAA,GAAA;AA3CoB,GAkCtB,CAlCsB,CA8CtB;;;AACA,QAAMK,OAAO,GAAG,MAAM,CAAN,OAAA,CAAe;AAC7BC,IAAAA,GAAG,EAAEF,MAAM,CAANA,MAAAA,CAAc,CAAC;AAAEG,MAAAA;AAAF,KAAD,KAAiBA,OAAO,KAAtCH,MAAAA,EADwB,MAAA;AAE7BI,IAAAA,EAAE,EAAEJ,MAAM,CAANA,MAAAA,CAAc,CAAC;AAAEG,MAAAA;AAAF,KAAD,KAAiBA,OAAO,KAAtCH,OAAAA,EAAoDK;AAF3B,GAAf,CAAhB;AAIA,QAAMC,cAAc,GAAG,MAAM,CAAN,OAAA,CAAe;AACpCJ,IAAAA,GAAG,EAAEF,MAAM,CAANA,MAAAA,CAAc,CAAC;AAAEO,MAAAA;AAAF,KAAD,KAAeA,KAAK,KAAlCP,MAAAA,EAD+B,MAAA;AAEpCI,IAAAA,EAAE,EAAEJ,MAAM,CAANA,MAAAA,CAAc,CAAC;AAAEO,MAAAA;AAAF,KAAD,KAAeA,KAAK,KAAlCP,OAAAA,EAAgDK;AAFhB,GAAf,CAAvB;AAIA,QAAMG,IAAI,GAAG,MAAM,CAAN,OAAA,CAAe;AAC1BC,IAAAA,KAAK,EAAET,MAAM,CAANA,MAAAA,CAAc,CAAC;AAAEU,MAAAA;AAAF,KAAD,KAAcA,IAAI,KAAhCV,OAAAA,EADmB,MAAA;AAE1BW,IAAAA,MAAM,EAAEX,MAAM,CAANA,MAAAA,CAAc,CAAC;AAAEU,MAAAA;AAAF,KAAD,KAAcA,IAAI,KAAhCV,QAAAA,EAA+CK;AAF7B,GAAf,CAAb,CAvDsB,CA2DtB;;AACA,QAAMO,QAAQ,GAAGC,MAAM,CAANA,OAAAA,CAAeb,MAAM,CAANA,MAAAA,CAAcN,QAAQ,CAAtBM,WAAsB,CAAtBA,EAAhC,EAAgCA,CAAfa,CAAjB;AACA,QAAMC,OAAO,GAAGD,MAAM,CAANA,OAAAA,CAAeb,MAAM,CAANA,MAAAA,CAAcN,QAAQ,CAAtBM,MAAsB,CAAtBA,EAA/B,EAA+BA,CAAfa,CAAhB;AACA,QAAME,QAAQ,GAAGF,MAAM,CAANA,OAAAA,CAAeb,MAAM,CAANA,MAAAA,CAAcN,QAAQ,CAAtBM,OAAsB,CAAtBA,EAAhC,EAAgCA,CAAfa,CAAjB;AACA,QAAMG,SAAS,GAAGH,MAAM,CAANA,OAAAA,CAAeb,MAAM,CAANA,MAAAA,CAAcN,QAAQ,CAAtBM,QAAsB,CAAtBA,EAAjC,EAAiCA,CAAfa,CAAlB;AACA,QAAMI,WAAW,GAAGJ,MAAM,CAANA,OAAAA,CAAeb,MAAM,CAANA,MAAAA,CAAcN,QAAQ,CAAtBM,QAAsB,CAAtBA,EAAnC,EAAmCA,CAAfa,CAApB;AAEA,QAAMK,cAAc,GAAG/B,cAAc,CAAA,QAAA,EAAWyB,QAAQ,CAAxD,MAAqC,CAArC;AACA,QAAMO,aAAa,GAAGhC,cAAc,CAAA,OAAA,EAAU2B,OAAO,CAArD,MAAoC,CAApC;AACA,QAAMM,cAAc,GAAGjC,cAAc,CAAA,QAAA,EAAW4B,QAAQ,CAAxD,MAAqC,CAArC;AACA,QAAMM,eAAe,GAAGlC,cAAc,CAAA,SAAA,EAAY6B,SAAS,CAA3D,MAAsC,CAAtC;AACA,QAAMM,iBAAiB,GAAGnC,cAAc,CAAA,WAAA,EAAc8B,WAAW,CAAjE,MAAwC,CAAxC;AAEA,QAAMM,aAAa,GAAG;AACpBC,IAAAA,IAAI,EAAErC,cAAc,CAAA,IAAA,EAAOqB,IAAI,CADX,MACA,CADA;AAEpBiB,IAAAA,KAAK,EAFe,aAAA;AAGpBC,IAAAA,SAAS,EAHW,cAAA;AAIpBC,IAAAA,KAAK,EAJe,cAAA;AAKpBC,IAAAA,OAAO,EAAEzC,cAAc,CAAA,OAAA,EAAUc,OAAO,CALpB,MAKG,CALH;AAMpB,6BAAyBd,cAAc,CAAA,cAAA,EAErCmB,cAAc,CARI,MAMmB,CANnB;AAUpBuB,IAAAA,MAAM,EAVc,eAAA;AAWpBC,IAAAA,SAAS,EAAER;AAXS,GAAtB;AAcA,QAAMS,GAAG,GAAGlB,MAAM,CAANA,OAAAA,CAAZ,aAAYA,CAAZ;AAEA3B,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,MAAAA,EAAAA,GAAAA;AACAA,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,SAAAA,EAAAA,OAAAA;AAEA,QAAM8C,EAAE,GAAR,KAAA;AACA,SACE,KAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACGA,EAAE,IADL,WAAA,EAEE,KAAA,CAAA,eAAA,EAAA,IAAA,EACG,GAAG,CAAH,GAAA,CAAQ,CAAC,CAAA,KAAA,EAAD,OAAC,CAAD,KACP,KAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EACE,KAAA,CAAA,SAAA,EAAA;AAAW,IAAA,IAAI,EAAf,IAAA;AAAgB,IAAA,OAAO,EAAvB,KAAA;AAAgC,IAAA,YAAY,EAA5C,IAAA;AAAoD,IAAA,KAAK,EAAEC;AAA3D,GAAA,EACE,KAAA,CAAA,KAAA,EAAA,IAAA,EACGC,OAAO,CAAPA,WAAO,CAAPA,CAAAA,GAAAA,CAAyB,CAAC,CAAA,GAAA,EAAD,KAAC,CAAD,KACxB,KAAA,CAAA,KAAA,EAAA;AAAK,IAAA,GAAG,EAAEC;AAAV,GAAA,EACE,KAAA,CAAA,QAAA,EAAA;AAAU,IAAA,YAAY,EAAtB,YAAA;AAAsC,IAAA,IAAI,EAAC;AAA3C,GAAA,CADF,EAEI,GAAEA,GAAI,IAAGxC,KANrB,GAIQ,CADDuC,CADH,CADF,CADF,EAWGA,OAAO,CAAPA,QAAO,CAAPA,CAAAA,MAAAA,GAAAA,CAAAA,IACC,KAAA,CAAA,SAAA,EAAA;AAAW,IAAA,KAAK,EAAhB,SAAA;AAA6B,IAAA,WAAW,EAAxC,IAAA;AAAgD,IAAA,OAAO,EAAE;AAAzD,GAAA,EACGA,OAAO,CAAPA,QAAO,CAAPA,CAAAA,GAAAA,CAAsB,CAAC,CAAA,GAAA,EAAD,KAAC,CAAD,KACrB,KAAA,CAAA,KAAA,EAAA;AAAK,IAAA,GAAG,EAAEC;AAAV,GAAA,EACE,KAAA,CAAA,QAAA,EAAA;AAAU,IAAA,YAAY,EAAtB,YAAA;AAAsC,IAAA,IAAI,EAAC;AAA3C,GAAA,CADF,EAEI,GAAEA,GAAI,IAAGxC,KArB7B,GAmBgB,CADDuC,CADH,CAZJ,CADD,CADH,CAFF,CADF;EAiCF;;;AACA,eAAeE,KAAK,CAALA,IAAAA,CAAf,YAAeA,CAAf","sourcesContent":["import React, { useState, useContext } from 'react';\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined';\n\n//custom\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport wrapperIconHOC from '../../contentComponents/IconCTA/IconAction';\nimport { MoviesContext } from '../../../pages/index';\nimport { SSL_OP_EPHEMERAL_RSA } from 'constants';\n\n/* const all = Object.entries(generateFilters());\nconst displayed1 = all.slice(0, 5);\nconst hidden1 = all.slice(5, all.length); */\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\n\nconst CheckBox = wrapperIconHOC(\n  CheckBoxOutlineBlankOutlinedIcon,\n  CheckBoxOutlinedIcon\n);\n\nfunction FiltersGroup() {\n  const { movies, updateState } = useContext(MoviesContext);\n\n  const callToAction = (state) => {\n    const { yes, no } = state;\n    updateState(yes ? 'True' : 'False');\n  };\n  console.log('movies', movies);\n\n  const displayFilters = (\n    ArrOfFilters: [string, unknown][],\n    length: number\n  ) => ({\n    displayed: ArrOfFilters.slice(0, 5),\n    hidden: ArrOfFilters.slice(5, length),\n  });\n\n  let metaScoreStrings = '';\n  const calculateMetaScore = (score: number) => {\n    if (score < 60) {\n      metaScoreStrings = 'below60';\n    }\n    if (score > 60 && score < 80) {\n      metaScoreStrings = 'between6080';\n    }\n    if (score > 80 && score < 90) {\n      metaScoreStrings = 'between8090';\n    }\n    if (score > 90) {\n      metaScoreStrings = 'abbove90';\n    }\n    return metaScoreStrings;\n  };\n\n  const generate = (value: string) => (obj: {}, element: {}) => {\n    if (value === 'Metascore')\n      obj = generateFilters(\n        calculateMetaScore(Number(element[value])),\n        movies.length\n      );\n    else {\n      obj = generateFilters(element[value], movies.length);\n    }\n    return obj;\n  };\n\n  //static filters\n  const watched = Object.entries({\n    YES: movies.filter(({ Watched }) => Watched === 'True').length,\n    NO: movies.filter(({ Watched }) => Watched === 'False').length,\n  });\n  const savedInWatched = Object.entries({\n    YES: movies.filter(({ Saved }) => Saved === 'True').length,\n    NO: movies.filter(({ Saved }) => Saved === 'False').length,\n  });\n  const type = Object.entries({\n    MOVIE: movies.filter(({ Type }) => Type === 'movie').length,\n    SERIES: movies.filter(({ Type }) => Type === 'series').length,\n  });\n  //generated filters\n  const metasArr = Object.entries(movies.reduce(generate('Metascore'), {}));\n  const YearArr = Object.entries(movies.reduce(generate('Year'), {}));\n  const genreArr = Object.entries(movies.reduce(generate('Genre'), {}));\n  const actorsArr = Object.entries(movies.reduce(generate('Actors'), {}));\n  const directorArr = Object.entries(movies.reduce(generate('Actors'), {}));\n\n  const metasArrFormat = displayFilters(metasArr, metasArr.length);\n  const yearArrFormat = displayFilters(YearArr, YearArr.length);\n  const genreArrFormat = displayFilters(genreArr, genreArr.length);\n  const actorsArrFormat = displayFilters(actorsArr, actorsArr.length);\n  const directorArrFormat = displayFilters(directorArr, directorArr.length);\n\n  const filtersLabels = {\n    TYPE: displayFilters(type, type.length),\n    YEARS: yearArrFormat,\n    METASCORE: metasArrFormat,\n    GENRE: genreArrFormat,\n    WATCHED: displayFilters(watched, watched.length),\n    'SAVED IN WATCHED LIST': displayFilters(\n      savedInWatched,\n      savedInWatched.length\n    ),\n    ACTORS: actorsArrFormat,\n    DIRECTORS: directorArrFormat,\n  };\n\n  const sss = Object.entries(filtersLabels);\n\n  console.log('ssss', sss);\n  console.log('watched', watched);\n\n  const ss = false;\n  return (\n    <>\n      {ss && '...loadin'}\n      <FilterContainer>\n        {sss.map(([title, filters]) => (\n          <div className=\"accordion\">\n            <Accordion open shevron={false} clickDisable={true} title={title}>\n              <div>\n                {filters['displayed'].map(([key, value]) => (\n                  <div key={key}>\n                    <CheckBox callToAction={callToAction} icon=\"yes\" />\n                    {`${key}(${value})`}\n                  </div>\n                ))}\n              </div>\n            </Accordion>\n            {filters['hidden'].length > 0 && (\n              <Accordion title={'...more'} directional={true} shevron={false}>\n                {filters['hidden'].map(([key, value]) => (\n                  <div key={key}>\n                    <CheckBox callToAction={callToAction} icon=\"no\" />\n                    {`${key}(${value})`}\n                  </div>\n                ))}\n              </Accordion>\n            )}\n          </div>\n        ))}\n      </FilterContainer>\n    </>\n  );\n}\n\n//make sure it render only the amount of movies.lenght\nexport default React.memo(FiltersGroup);\n"]},"metadata":{},"sourceType":"module"}