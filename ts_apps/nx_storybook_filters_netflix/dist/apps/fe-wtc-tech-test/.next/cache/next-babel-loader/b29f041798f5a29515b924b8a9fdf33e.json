{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // custom\n\n\nimport { ENV_POSTS, ENV_WEATHER } from '../utils/ENV';\n\nconst apiService = () => {\n  const TIMEOUT = 30000;\n\n  const errorInterceptor = err => {\n    switch (err.status) {\n      case -1:\n        if (err.xhrStatus === 'abort') {\n          if (!err.config) {\n            err.config = {\n              timeout: TIMEOUT\n            };\n          }\n\n          console.warn(`REQUEST CANCELED (config timeout: ${err.config.timeout}ms)`);\n        }\n\n        break;\n\n      case 401:\n      case 405:\n        // events.emit('NOT_AUTHENTICATED');\n        break;\n\n      case 403:\n        // events.emit('NOT_AUTHORISED');\n        // break;\n        // case 405:\n        //   events.emit('METHOD_NOT_ALLOWED');\n        break;\n\n      default:\n    }\n\n    throw err;\n  };\n\n  const responseMiddleware = res => res;\n\n  const requestPath = (path, params) => {\n    //for testing work with 2 BASE_URLs\n    const PATH = path.includes('location') ? ENV_WEATHER.BASE_URL : ENV_POSTS.BASE_URL;\n\n    if (params && Object.keys(params).length > 1) {\n      let query = '';\n\n      for (const keys in params) {\n        query += keys + '=' + params[keys] + '&';\n      }\n\n      console.log('requestPath1', PATH + path); //remove last '&' symbol\n\n      return PATH + path + '?' + query.replace(/&$/, '').trim();\n    } //console.log('requestPath2', PATH + path);\n\n\n    return PATH + path;\n  };\n\n  const requestInterceptor = (serviceConfig, customRequestHeaders) => {\n    const requestHeaders = {\n      'Content-Type': 'application/json'\n    };\n    let request = {\n      method: serviceConfig.method,\n      //mode: 'no-cors', // no-cors, *cors, same-origin\n      cache: 'default',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin',\n      // include, *same-origin, omit\n      headers: _objectSpread({}, requestHeaders, {}, customRequestHeaders)\n    }; //request with body object not empty {}\n\n    if (serviceConfig.body && Object.keys(serviceConfig.body).length > 1) {\n      request = Object.assign(request, {\n        //convert to JSON object\n        body: JSON.stringify(serviceConfig.body)\n      });\n    } //console.log('request with headers', request);\n\n\n    return request;\n  };\n\n  const sendRequest = async (serviceConfig, customRequestHeaders) => {\n    try {\n      const response = await fetch(requestPath(serviceConfig.path, serviceConfig.params), requestInterceptor(serviceConfig, customRequestHeaders));\n      const res = await response.json();\n      return responseMiddleware(res);\n    } catch (err) {\n      console.log('it has errored');\n      return errorInterceptor(err);\n    }\n  };\n\n  const get = (path, {\n    params = {}\n  } = {}, //this syntax means optional with defualt {}\n  {\n    customRequestHeaders = {}\n  } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({\n    method: 'GET',\n    path,\n    params\n  }, customRequestHeaders);\n\n  const post = (path, {\n    body\n  }, {\n    customRequestHeaders = {}\n  } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({\n    method: 'POST',\n    path,\n    body\n  }, customRequestHeaders);\n\n  const put = (path, {\n    body\n  }, {\n    customRequestHeaders = {}\n  } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({\n    method: 'PUT',\n    path,\n    body\n  }, customRequestHeaders);\n\n  const patch = (path, {\n    body\n  }, {\n    customRequestHeaders = {}\n  } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({\n    method: 'PATCH',\n    path,\n    body\n  }, customRequestHeaders);\n\n  const del = (path, {\n    params\n  }, {\n    customRequestHeaders = {}\n  } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({\n    method: 'DELETE',\n    path,\n    params\n  }, customRequestHeaders);\n\n  return {\n    get,\n    post,\n    put,\n    patch,\n    delete: del\n  };\n};\n\nexport default apiService();","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/services/apiService.ts"],"names":["apiService","TIMEOUT","errorInterceptor","err","timeout","console","responseMiddleware","res","requestPath","PATH","path","ENV_WEATHER","ENV_POSTS","params","Object","query","keys","requestInterceptor","requestHeaders","request","method","serviceConfig","cache","credentials","headers","body","JSON","sendRequest","response","fetch","get","customRequestHeaders","post","put","patch","del","delete"],"mappings":"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","sourcesContent":["// custom\nimport { ENV_POSTS, ENV_WEATHER } from '../utils/ENV';\n\nconst apiService = () => {\n  const TIMEOUT = 30000;\n\n  const errorInterceptor = (err) => {\n    switch (err.status) {\n      case -1:\n        if (err.xhrStatus === 'abort') {\n          if (!err.config) {\n            err.config = { timeout: TIMEOUT };\n          }\n          console.warn(\n            `REQUEST CANCELED (config timeout: ${err.config.timeout}ms)`\n          );\n        }\n        break;\n      case 401:\n      case 405:\n        // events.emit('NOT_AUTHENTICATED');\n        break;\n      case 403:\n        // events.emit('NOT_AUTHORISED');\n        // break;\n        // case 405:\n        //   events.emit('METHOD_NOT_ALLOWED');\n        break;\n      default:\n    }\n    throw err;\n  };\n\n  const responseMiddleware = (res) => res;\n\n  const requestPath = (path: string, params?: Object) => {\n    //for testing work with 2 BASE_URLs\n    const PATH = path.includes('location')\n      ? ENV_WEATHER.BASE_URL\n      : ENV_POSTS.BASE_URL;\n    if (params && Object.keys(params).length > 1) {\n      let query: string = '';\n\n      for (const keys in params) {\n        query += keys + '=' + params[keys] + '&';\n      }\n      console.log('requestPath1', PATH + path);\n      //remove last '&' symbol\n      return PATH + path + '?' + query.replace(/&$/, '').trim();\n    }\n\n    //console.log('requestPath2', PATH + path);\n\n    return PATH + path;\n  };\n\n  interface RequestInit {}\n  const requestInterceptor = (\n    serviceConfig: {\n      path: string;\n      method: string;\n      params?: Object;\n      body?: Object;\n    },\n    customRequestHeaders: Object\n  ): RequestInit => {\n    const requestHeaders = {\n      'Content-Type': 'application/json',\n    };\n\n    let request = {\n      method: serviceConfig.method,\n      //mode: 'no-cors', // no-cors, *cors, same-origin\n      cache: 'default', // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        ...requestHeaders,\n        ...customRequestHeaders,\n      },\n    };\n\n    //request with body object not empty {}\n    if (serviceConfig.body && Object.keys(serviceConfig.body).length > 1) {\n      request = Object.assign(request, {\n        //convert to JSON object\n        body: JSON.stringify(serviceConfig.body),\n      });\n    }\n    //console.log('request with headers', request);\n    return request;\n  };\n\n  const sendRequest = async (\n    serviceConfig: {\n      path: string;\n      method: string;\n      params?: Object;\n      body?: Object;\n    },\n    customRequestHeaders: Object\n  ): Promise<{ [key: string]: any }> => {\n    try {\n      const response = await fetch(\n        requestPath(serviceConfig.path, serviceConfig.params),\n        requestInterceptor(serviceConfig, customRequestHeaders)\n      );\n      const res = await response.json();\n      return responseMiddleware(res);\n    } catch (err) {\n      console.log('it has errored');\n      return errorInterceptor(err);\n    }\n  };\n\n  const get = (\n    path: string,\n    { params = {} } = {}, //this syntax means optional with defualt {}\n    { customRequestHeaders = {} } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({ method: 'GET', path, params }, customRequestHeaders);\n\n  const post = (\n    path: string,\n    { body }: { body: { [key: string]: any } },\n    { customRequestHeaders = {} } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({ method: 'POST', path, body }, customRequestHeaders);\n\n  const put = (\n    path: string,\n    { body }: { body: { [key: string]: any } },\n    { customRequestHeaders = {} } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({ method: 'PUT', path, body }, customRequestHeaders);\n\n  const patch = (\n    path: string,\n    { body }: { body: { [key: string]: any } },\n    { customRequestHeaders = {} } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({ method: 'PATCH', path, body }, customRequestHeaders);\n\n  const del = (\n    path: string,\n    { params }: { params?: Object },\n    { customRequestHeaders = {} } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({ method: 'DELETE', path, params }, customRequestHeaders);\n\n  return {\n    get,\n    post,\n    put,\n    patch,\n    delete: del,\n  };\n};\n\nexport default apiService();\n"]},"metadata":{},"sourceType":"module"}