{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar generateFilters = function generateFilters() {\n  var actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  var actors2 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed'; //first combine actors results\n\n  var allActors = [].concat(_toConsumableArray(actors.split(',')), _toConsumableArray(actors2.split(',')));\n  console.log('allActors', allActors);\n  var filteredActors = //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n  allActors.map(function (actor) {\n    //duplicates\n\n    /*  if (allActors.filter((actor=>actor)) {\n    console.log('duplicate actor', actor);\n    } */\n    console.log(allActors.filter(function (actor) {\n      return allActors.includes(actor);\n    }));\n  });\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["generateFilters","actors","actors2","allActors","console","filteredActors"],"mappings":";;AAAA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,MAAMC,MAAM,GAAZ,6DAAA;AACA,MAAMC,OAAO,GAFe,4EAE5B,CAF4B,CAK5B;;AAEA,MAAMC,SAAS,GAAA,GAAA,MAAA,CAAA,kBAAA,CAAOF,MAAM,CAANA,KAAAA,CAAP,GAAOA,CAAP,CAAA,EAAA,kBAAA,CAA6BC,OAAO,CAAPA,KAAAA,CAA5C,GAA4CA,CAA7B,CAAA,CAAf;AACAE,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,WAAAA,EAAAA,SAAAA;AACA,MAAMC,cAAc,GAClB;AACA;AAEAF,EAAAA,SAAS,CAATA,GAAAA,CAAc,UAAA,KAAA,EAAW;AACvB;;AACA;;;AAGAC,IAAAA,OAAO,CAAPA,GAAAA,CAAY,SAAS,CAAT,MAAA,CAAiB,UAAA,KAAA,EAAA;AAAA,aAAWD,SAAS,CAATA,QAAAA,CAAX,KAAWA,CAAX;AAA7BC,KAAY,CAAZA;AATJ,GAIED,CAJF;AATF,CAAA;;AAsBA,SAAA,eAAA","sourcesContent":["const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n\n  //first combine actors results\n\n  const allActors = [...actors.split(','), ...actors2.split(',')];\n  console.log('allActors', allActors);\n  const filteredActors =\n    //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n    //and continue with the code\n\n    allActors.map((actor) => {\n      //duplicates\n      /*  if (allActors.filter((actor=>actor)) {\n      console.log('duplicate actor', actor);\n    } */\n      console.log(allActors.filter((actor) => allActors.includes(actor)));\n    });\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}