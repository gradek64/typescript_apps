{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// custom\nimport { ENV_POSTS, ENV_WEATHER } from '../utils/ENV';\n\nconst apiService = () => {\n  const TIMEOUT = 30000;\n\n  const errorInterceptor = err => {\n    switch (err.status) {\n      case -1:\n        if (err.xhrStatus === 'abort') {\n          if (!err.config) {\n            err.config = {\n              timeout: TIMEOUT\n            };\n          }\n\n          console.warn(`REQUEST CANCELED (config timeout: ${err.config.timeout}ms)`);\n        }\n\n        break;\n\n      case 401:\n      case 405:\n        // events.emit('NOT_AUTHENTICATED');\n        break;\n\n      case 403:\n        // events.emit('NOT_AUTHORISED');\n        // break;\n        // case 405:\n        //   events.emit('METHOD_NOT_ALLOWED');\n        break;\n\n      default:\n    }\n\n    throw err;\n  };\n\n  const responseMiddleware = res => res;\n\n  const requestPath = (path, params) => {\n    //for testing work with 2 BASE_URLs\n    const PATH = path.includes('location') ? ENV_WEATHER.BASE_URL : ENV_POSTS.BASE_URL;\n\n    if (params && Object.keys(params).length > 1) {\n      let query = '';\n\n      for (const keys in params) {\n        query += keys + '=' + params[keys] + '&';\n      }\n\n      console.log('requestPath1', PATH + path); //remove last '&' symbol\n\n      return PATH + path + '?' + query.replace(/&$/, '').trim();\n    } //console.log('requestPath2', PATH + path);\n\n\n    return PATH + path;\n  };\n\n  const requestInterceptor = (serviceConfig, customRequestHeaders) => {\n    const requestHeaders = {\n      'Content-Type': 'application/json'\n    };\n    let request = {\n      method: serviceConfig.method,\n      //mode: 'no-cors', // no-cors, *cors, same-origin\n      cache: 'default',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin',\n      // include, *same-origin, omit\n      headers: _objectSpread({}, requestHeaders, {}, customRequestHeaders)\n    }; //request with body object not empty {}\n\n    if (serviceConfig.body && Object.keys(serviceConfig.body).length > 1) {\n      request = Object.assign(request, {\n        //convert to JSON object\n        body: JSON.stringify(serviceConfig.body)\n      });\n    } //console.log('request with headers', request);\n\n\n    return request;\n  };\n\n  const sendRequest = async (serviceConfig, customRequestHeaders) => {\n    try {\n      const response = await fetch(requestPath(serviceConfig.path, serviceConfig.params), requestInterceptor(serviceConfig, customRequestHeaders));\n      const res = await response.json();\n      return responseMiddleware(res);\n    } catch (err) {\n      console.log('it has errored');\n      return errorInterceptor(err);\n    }\n  };\n\n  const get = (path, {\n    params = {}\n  } = {}, //this syntax means optional with defualt {}\n  {\n    customRequestHeaders = {}\n  } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({\n    method: 'GET',\n    path,\n    params\n  }, customRequestHeaders);\n\n  const post = (path, {\n    body\n  }, {\n    customRequestHeaders = {}\n  } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({\n    method: 'POST',\n    path,\n    body\n  }, customRequestHeaders);\n\n  const put = (path, {\n    body\n  }, {\n    customRequestHeaders = {}\n  } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({\n    method: 'PUT',\n    path,\n    body\n  }, customRequestHeaders);\n\n  const patch = (path, {\n    body\n  }, {\n    customRequestHeaders = {}\n  } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({\n    method: 'PATCH',\n    path,\n    body\n  }, customRequestHeaders);\n\n  const del = (path, {\n    params\n  }, {\n    customRequestHeaders = {}\n  } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({\n    method: 'DELETE',\n    path,\n    params\n  }, customRequestHeaders);\n\n  return {\n    get,\n    post,\n    put,\n    patch,\n    delete: del\n  };\n};\n\nexport default apiService();","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/services/apiService.ts"],"names":["ENV_POSTS","ENV_WEATHER","apiService","TIMEOUT","errorInterceptor","err","status","xhrStatus","config","timeout","console","warn","responseMiddleware","res","requestPath","path","params","PATH","includes","BASE_URL","Object","keys","length","query","log","replace","trim","requestInterceptor","serviceConfig","customRequestHeaders","requestHeaders","request","method","cache","credentials","headers","body","assign","JSON","stringify","sendRequest","response","fetch","json","get","post","put","patch","del","delete"],"mappings":"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","sourcesContent":["// custom\nimport { ENV_POSTS, ENV_WEATHER } from '../utils/ENV';\n\nconst apiService = () => {\n  const TIMEOUT = 30000;\n\n  const errorInterceptor = (err) => {\n    switch (err.status) {\n      case -1:\n        if (err.xhrStatus === 'abort') {\n          if (!err.config) {\n            err.config = { timeout: TIMEOUT };\n          }\n          console.warn(\n            `REQUEST CANCELED (config timeout: ${err.config.timeout}ms)`\n          );\n        }\n        break;\n      case 401:\n      case 405:\n        // events.emit('NOT_AUTHENTICATED');\n        break;\n      case 403:\n        // events.emit('NOT_AUTHORISED');\n        // break;\n        // case 405:\n        //   events.emit('METHOD_NOT_ALLOWED');\n        break;\n      default:\n    }\n    throw err;\n  };\n\n  const responseMiddleware = (res) => res;\n\n  const requestPath = (path: string, params?: Object) => {\n    //for testing work with 2 BASE_URLs\n    const PATH = path.includes('location')\n      ? ENV_WEATHER.BASE_URL\n      : ENV_POSTS.BASE_URL;\n    if (params && Object.keys(params).length > 1) {\n      let query: string = '';\n\n      for (const keys in params) {\n        query += keys + '=' + params[keys] + '&';\n      }\n      console.log('requestPath1', PATH + path);\n      //remove last '&' symbol\n      return PATH + path + '?' + query.replace(/&$/, '').trim();\n    }\n\n    //console.log('requestPath2', PATH + path);\n\n    return PATH + path;\n  };\n\n  interface RequestInit {}\n  const requestInterceptor = (\n    serviceConfig: {\n      path: string;\n      method: string;\n      params?: Object;\n      body?: Object;\n    },\n    customRequestHeaders: Object\n  ): RequestInit => {\n    const requestHeaders = {\n      'Content-Type': 'application/json',\n    };\n\n    let request = {\n      method: serviceConfig.method,\n      //mode: 'no-cors', // no-cors, *cors, same-origin\n      cache: 'default', // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        ...requestHeaders,\n        ...customRequestHeaders,\n      },\n    };\n\n    //request with body object not empty {}\n    if (serviceConfig.body && Object.keys(serviceConfig.body).length > 1) {\n      request = Object.assign(request, {\n        //convert to JSON object\n        body: JSON.stringify(serviceConfig.body),\n      });\n    }\n    //console.log('request with headers', request);\n    return request;\n  };\n\n  const sendRequest = async (\n    serviceConfig: {\n      path: string;\n      method: string;\n      params?: Object;\n      body?: Object;\n    },\n    customRequestHeaders: Object\n  ): Promise<{ [key: string]: any }> => {\n    try {\n      const response = await fetch(\n        requestPath(serviceConfig.path, serviceConfig.params),\n        requestInterceptor(serviceConfig, customRequestHeaders)\n      );\n      const res = await response.json();\n      return responseMiddleware(res);\n    } catch (err) {\n      console.log('it has errored');\n      return errorInterceptor(err);\n    }\n  };\n\n  const get = (\n    path: string,\n    { params = {} } = {}, //this syntax means optional with defualt {}\n    { customRequestHeaders = {} } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({ method: 'GET', path, params }, customRequestHeaders);\n\n  const post = (\n    path: string,\n    { body }: { body: { [key: string]: any } },\n    { customRequestHeaders = {} } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({ method: 'POST', path, body }, customRequestHeaders);\n\n  const put = (\n    path: string,\n    { body }: { body: { [key: string]: any } },\n    { customRequestHeaders = {} } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({ method: 'PUT', path, body }, customRequestHeaders);\n\n  const patch = (\n    path: string,\n    { body }: { body: { [key: string]: any } },\n    { customRequestHeaders = {} } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({ method: 'PATCH', path, body }, customRequestHeaders);\n\n  const del = (\n    path: string,\n    { params }: { params?: Object },\n    { customRequestHeaders = {} } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({ method: 'DELETE', path, params }, customRequestHeaders);\n\n  return {\n    get,\n    post,\n    put,\n    patch,\n    delete: del,\n  };\n};\n\nexport default apiService();\n"]},"metadata":{},"sourceType":"module"}