{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  width: 80%;\\n  flex-wrap: wrap;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  width: 20%;\\n  background-color: grey;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  width: 100%;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from '../app/contentComponents/Card/Card';\nimport generalAPIService from '../app/services/apiService';\nimport FiltersGroup from '../app/contentComponents/FiltersGroup/FiltersGroup';\nvar Wrapper = styled.div(_templateObject());\nvar Filters = styled.div(_templateObject2());\nvar Movies = styled.div(_templateObject3());\nvar initialState = {\n  movies: [{\n    Title: 'string',\n    Poster: 'string',\n    Ratings: [{}],\n    key: 'string',\n    Saved: 'True',\n    Watched: 'False'\n  }]\n};\nexport var MoviesContext = React.createContext({});\nvar Provider = MoviesContext.Provider,\n    Consumer = MoviesContext.Consumer;\n\nvar movieReducer = function movieReducer(state, action) {\n  switch (action.type) {\n    case 'UPDATE':\n      console.log(action);\n      console.log(state);\n      return _toConsumableArray(action.payload);\n\n    default:\n      return state;\n  }\n};\n\nvar Home = function Home() {\n  var _useState = useState(true),\n      loading = _useState[0],\n      isLoading = _useState[1]; //const [movies, getMovies] = useState([]);\n\n\n  var _useReducer = useReducer(movieReducer, initialState.movies),\n      store = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var reduceData = useCallback(function (response) {\n    return response.map(function (_ref) {\n      var Title = _ref.Title,\n          Poster = _ref.Poster,\n          Ratings = _ref.Ratings,\n          Watched = _ref.Watched,\n          Saved = _ref.Saved;\n      isLoading(false);\n      return {\n        Title: Title,\n        Poster: Poster,\n        Ratings: Ratings,\n        Watched: Watched,\n        Saved: Saved\n      };\n    });\n  }, []);\n  useEffect(function () {\n    isLoading(true);\n\n    var fetchData = function fetchData() {\n      var result;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(generalAPIService.get('/api/movies'));\n\n            case 2:\n              result = _context.sent; //getMovies(reduceData(result));\n\n              dispatch({\n                type: 'UPDATE',\n                payload: reduceData(result)\n              });\n            //isLoading(false);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchData();\n  }, [reduceData]);\n  console.log('gagdg', store);\n  return __jsx(\"main\", null, loading && 'movies are loading', !loading && __jsx(Provider, {\n    value: store\n  }, __jsx(Wrapper, null, __jsx(Filters, null, __jsx(FiltersGroup, null)), __jsx(Movies, null, __jsx(Consumer, null, function (moviesObj) {\n    return moviesObj.map(function (fields, i) {\n      return __jsx(Card, {\n        key: fields.Title,\n        cardId: i\n      });\n    });\n  })))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["Wrapper","styled","Filters","Movies","initialState","movies","Title","Poster","Ratings","key","Saved","Watched","MoviesContext","React","Provider","Consumer","movieReducer","action","console","Home","loading","isLoading","useState","store","dispatch","useReducer","reduceData","useCallback","useEffect","fetchData","result","generalAPIService","type","payload","fields","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from '../app/contentComponents/Card/Card';\nimport generalAPIService from '../app/services/apiService';\nimport FiltersGroup from '../app/contentComponents/FiltersGroup/FiltersGroup';\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst Filters = styled.div`\n  display: flex;\n  width: 20%;\n  background-color: grey;\n`;\nconst Movies = styled.div`\n  display: flex;\n  width: 80%;\n  flex-wrap: wrap;\n`;\n\ninterface ImoviesResponseFields {\n  Title: string;\n  Poster: string;\n  Ratings: {}[];\n  key: string;\n  Saved: string;\n  Watched: string;\n}\nconst initialState: { movies: ImoviesResponseFields[] } = {\n  movies: [\n    {\n      Title: 'string',\n      Poster: 'string',\n      Ratings: [{}],\n      key: 'string',\n      Saved: 'True',\n      Watched: 'False',\n    },\n  ],\n};\nexport const MoviesContext = React.createContext({} as ImoviesResponseFields[]);\nconst { Provider, Consumer } = MoviesContext;\n\nconst movieReducer = (state: ImoviesResponseFields[], action) => {\n  switch (action.type) {\n    case 'UPDATE':\n      console.log(action);\n      console.log(state);\n\n      return [...action.payload];\n    default:\n      return state;\n  }\n};\n\nconst Home = () => {\n  const [loading, isLoading] = useState(true);\n  //const [movies, getMovies] = useState([]);\n  const [store, dispatch] = useReducer(movieReducer, initialState.movies);\n\n  const reduceData = useCallback((response: {}[]) => {\n    return response.map(\n      ({ Title, Poster, Ratings, Watched, Saved }: ImoviesResponseFields) => {\n        isLoading(false);\n        return {\n          Title,\n          Poster,\n          Ratings,\n          Watched,\n          Saved,\n        };\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    isLoading(true);\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      //getMovies(reduceData(result));\n      dispatch({ type: 'UPDATE', payload: reduceData(result) });\n      //isLoading(false);\n    };\n\n    fetchData();\n  }, [reduceData]);\n\n  console.log('gagdg', store);\n\n  return (\n    <main>\n      {loading && 'movies are loading'}\n      {!loading && (\n        <Provider value={store}>\n          <Wrapper>\n            <Filters>\n              <FiltersGroup />\n            </Filters>\n            <Movies>\n              <Consumer>\n                {(moviesObj) =>\n                  moviesObj.map((fields, i) => (\n                    <Card key={fields.Title} cardId={i} />\n                  ))\n                }\n              </Consumer>\n            </Movies>\n          </Wrapper>\n        </Provider>\n      )}\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}