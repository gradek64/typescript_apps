{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarHalfIcon from '@material-ui/icons/StarHalf';\nimport StarBorderOutlinedIcon from '@material-ui/icons/StarBorderOutlined';\nconst RatingContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  padding: 0 10px;\n`;\n\nfunction Rating(props) {\n  const {\n    rating\n  } = props;\n  const allStars = 5;\n  const percentage = String(rating * allStars / 100);\n  const calculateRating = percentage.split('.');\n  const wholeStars = Number(calculateRating[0]);\n  const halfStar = Number(calculateRating[1]) === 0 ? 0 : 1;\n  const emptyStars = allStars - wholeStars - halfStar;\n\n  const displayStars = () => {\n    const startMap = {\n      wholeStar: props => __jsx(StarIcon, props),\n      halfStar: __jsx(StarHalfIcon, null),\n      emptyStar: __jsx(StarBorderOutlinedIcon, null)\n    };\n    const wholeStarts = Array(wholeStars).fill(startMap['wholeStar']);\n    const halfStarts = Array(halfStar).fill(startMap['halfStar']);\n    const emptyStarts = Array(emptyStars).fill(startMap['emptyStar']); //return [...wholeStarts, ...halfStarts, ...emptyStarts];\n\n    return [...wholeStarts];\n  };\n\n  displayStars();\n  return __jsx(RatingContainer, null, displayStars().map((Comp, i) => __jsx(Comp, {\n    key: `star${i}`\n  })), __jsx(\"span\", null, \"(\", String(percentage), \")\"));\n}\n\nexport default Rating;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/RatingStarComp/Rating.tsx"],"names":["RatingContainer","styled","div","rating","allStars","percentage","String","calculateRating","wholeStars","Number","halfStar","emptyStars","displayStars","startMap","wholeStar","props","emptyStar","wholeStarts","Array","halfStarts","emptyStarts","i"],"mappings":";AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,MAAA,MAAA,mBAAA;AACA,OAAA,QAAA,MAAA,yBAAA;AACA,OAAA,YAAA,MAAA,6BAAA;AACA,OAAA,sBAAA,MAAA,uCAAA;AAEA,MAAMA,eAAe,GAAGC,MAAM,CAACC,GAAI;;;;;;CAAnC;;AAYA,SAAA,MAAA,CAAA,KAAA,EAAiC;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAN,KAAA;AAEA,QAAMC,QAAQ,GAAd,CAAA;AACA,QAAMC,UAAU,GAAGC,MAAM,CAAEH,MAAM,GAAP,QAACA,GAA3B,GAAyB,CAAzB;AACA,QAAMI,eAAe,GAAGF,UAAU,CAAVA,KAAAA,CAAxB,GAAwBA,CAAxB;AACA,QAAMG,UAAU,GAAGC,MAAM,CAACF,eAAe,CAAzC,CAAyC,CAAhB,CAAzB;AACA,QAAMG,QAAQ,GAAGD,MAAM,CAACF,eAAe,CAAtBE,CAAsB,CAAhB,CAANA,KAAAA,CAAAA,GAAAA,CAAAA,GAAjB,CAAA;AACA,QAAME,UAAU,GAAGP,QAAQ,GAARA,UAAAA,GAAnB,QAAA;;AAEA,QAAMQ,YAAY,GAAG,MAAM;AACzB,UAAMC,QAAQ,GAAG;AACfC,MAAAA,SAAS,EAAGC,KAAD,IAAe,KAAA,CAAA,QAAA,EADX,KACW,CADX;AAEfL,MAAAA,QAAQ,EAAE,KAAA,CAAA,YAAA,EAFK,IAEL,CAFK;AAGfM,MAAAA,SAAS,EAAE,KAAA,CAAA,sBAAA,EAAA,IAAA;AAHI,KAAjB;AAKA,UAAMC,WAAW,GAAGC,KAAK,CAALA,UAAK,CAALA,CAAAA,IAAAA,CAAuBL,QAAQ,CAAnD,WAAmD,CAA/BK,CAApB;AACA,UAAMC,UAAU,GAAGD,KAAK,CAALA,QAAK,CAALA,CAAAA,IAAAA,CAAqBL,QAAQ,CAAhD,UAAgD,CAA7BK,CAAnB;AACA,UAAME,WAAW,GAAGF,KAAK,CAALA,UAAK,CAALA,CAAAA,IAAAA,CAAuBL,QAAQ,CAR1B,WAQ0B,CAA/BK,CAApB,CARyB,CAUzB;;AACA,WAAO,CAAC,GAAR,WAAO,CAAP;AAXF,GAAA;;AAaAN,EAAAA,YAAY;AACZ,SACE,KAAA,CAAA,eAAA,EAAA,IAAA,EACG,YAAY,GAAZ,GAAA,CAAmB,CAAA,IAAA,EAAA,CAAA,KAClB,KAAA,CAAA,IAAA,EAAA;AAAM,IAAA,GAAG,EAAG,OAAMS,CAAE;AAApB,GAAA,CADD,CADH,EAIE,KAAA,CAAA,MAAA,EAAA,IAAA,EAAA,GAAA,EAAQf,MAAM,CAAd,UAAc,CAAd,EALJ,GAKI,CAJF,CADF;AAQD;;AAED,eAAA,MAAA","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarHalfIcon from '@material-ui/icons/StarHalf';\nimport StarBorderOutlinedIcon from '@material-ui/icons/StarBorderOutlined';\n\nconst RatingContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  padding: 0 10px;\n`;\n\ninterface PropsInt {\n  rating: number;\n}\n\nfunction Rating(props: PropsInt) {\n  const { rating } = props;\n\n  const allStars = 5;\n  const percentage = String((rating * allStars) / 100);\n  const calculateRating = percentage.split('.');\n  const wholeStars = Number(calculateRating[0]);\n  const halfStar = Number(calculateRating[1]) === 0 ? 0 : 1;\n  const emptyStars = allStars - wholeStars - halfStar;\n\n  const displayStars = () => {\n    const startMap = {\n      wholeStar: (props: {}) => <StarIcon {...props} />,\n      halfStar: <StarHalfIcon />,\n      emptyStar: <StarBorderOutlinedIcon />,\n    };\n    const wholeStarts = Array(wholeStars).fill(startMap['wholeStar']);\n    const halfStarts = Array(halfStar).fill(startMap['halfStar']);\n    const emptyStarts = Array(emptyStars).fill(startMap['emptyStar']);\n\n    //return [...wholeStarts, ...halfStarts, ...emptyStarts];\n    return [...wholeStarts];\n  };\n  displayStars();\n  return (\n    <RatingContainer>\n      {displayStars().map((Comp, i) => (\n        <Comp key={`star${i}`} />\n      ))}\n      <span>({String(percentage)})</span>\n    </RatingContainer>\n  );\n}\n\nexport default Rating;\n"]},"metadata":{},"sourceType":"module"}