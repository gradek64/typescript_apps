{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-wrap: wrap;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\nvar Movies = styled.div(_templateObject());\nexport var MoviesContext = React.createContext([{}]);\nvar Provider = MoviesContext.Provider;\n\nvar Home = function Home() {\n  var _useState = useState(true),\n      loading = _useState[0],\n      isLoading = _useState[1];\n\n  var _useState2 = useState([]),\n      movies = _useState2[0],\n      getMovies = _useState2[1];\n\n  var calculateAvarageRatings = function calculateAvarageRatings(Ratings) {\n    var percentageValue = [];\n    var overAllPerc = Ratings.map(function (_ref) {\n      var Value = _ref.Value;\n      return Value;\n    }).reduce(function (avaragePerc, rating, index) {\n      if (rating.includes('/')) {\n        var _rating$split$map = rating.split('/').map(function (value) {\n          return Number(value);\n        }),\n            _rating$split$map2 = _slicedToArray(_rating$split$map, 2),\n            all = _rating$split$map2[0],\n            ratio = _rating$split$map2[1];\n\n        var calcPercentage = all / ratio * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        var value = rating.match(/\\d+/)[0];\n        var percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        var sumPercentage = percentageValue.reduce(function (acc, value) {\n          return acc + value;\n        });\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n    return overAllPerc;\n  };\n\n  var reduceData = useCallback(function (response) {\n    var averageRatingsAll = [];\n    var averageRatings;\n    return response.map(function (_ref2, i) {\n      var Title = _ref2.Title,\n          Poster = _ref2.Poster,\n          Ratings = _ref2.Ratings;\n      averageRatingsAll.push({\n        avrRat: calculateAvarageRatings(Ratings)\n      });\n      averageRatings = averageRatingsAll[i];\n      isLoading(false);\n      return {\n        Title: Title,\n        Poster: Poster,\n        averageRatings: averageRatings\n      };\n    });\n  }, []);\n  useEffect(function () {\n    isLoading(true);\n\n    var fetchData = function fetchData() {\n      var result;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(generalAPIService.get('/api/movies'));\n\n            case 2:\n              result = _context.sent;\n              getMovies(reduceData(result));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchData();\n  }, [reduceData]);\n  return __jsx(\"main\", null, loading && 'movies are loading', __jsx(Movies, null, movies.map(function (fields, i) {\n    return __jsx(Provider, {\n      value: fields\n    }, __jsx(Card, _extends({}, fields, {\n      key: fields.Title\n    })));\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["Movies","styled","MoviesContext","React","Provider","Home","loading","isLoading","useState","movies","getMovies","calculateAvarageRatings","percentageValue","overAllPerc","Value","rating","all","ratio","Number","calcPercentage","value","percentage","index","Ratings","sumPercentage","acc","avaragePerc","reduceData","useCallback","averageRatingsAll","Title","Poster","avrRat","averageRatings","useEffect","fetchData","result","generalAPIService","fields"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\n\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\nexport const MoviesContext = React.createContext([{}]);\nconst { Provider } = MoviesContext;\n\nconst Home = () => {\n  const [loading, isLoading] = useState(true);\n  const [movies, getMovies] = useState([]);\n\n  interface ImoviesResponseFields {\n    Title: string;\n    Poster: string;\n    Ratings: {}[];\n    key: string;\n  }\n  const calculateAvarageRatings = (Ratings: {}[]) => {\n    const percentageValue: number[] = [];\n\n    const overAllPerc = Ratings.map(\n      ({ Value }: { Value: string }) => Value\n    ).reduce((avaragePerc, rating, index) => {\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map((value) => Number(value));\n        const calcPercentage = (all / ratio) * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce(\n          (acc, value) => acc + value\n        );\n\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n\n    return overAllPerc;\n  };\n  const reduceData = useCallback((response: {}[]) => {\n    const averageRatingsAll: { avrRat: number }[] = [];\n    let averageRatings: { avrRat: number };\n    return response.map(\n      ({ Title, Poster, Ratings }: ImoviesResponseFields, i) => {\n        averageRatingsAll.push({ avrRat: calculateAvarageRatings(Ratings) });\n        averageRatings = averageRatingsAll[i];\n        isLoading(false);\n        return { Title, Poster, averageRatings };\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    isLoading(true);\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, [reduceData]);\n\n  return (\n    <main>\n      {loading && 'movies are loading'}\n      <Movies>\n        {movies.map((fields, i) => (\n          <Provider value={fields}>\n            <Card {...fields} key={fields.Title} />\n          </Provider>\n        ))}\n      </Movies>\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}