{"ast":null,"code":"let stringDataArg = '';\nlet trackIndex = 1;\n\nconst generateFilters = (stringData, numberOfIteration) => {\n  stringDataArg += stringData + ',';\n\n  function findDuplicate(arr) {\n    const object = {};\n    arr.forEach(function (item) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  if (trackIndex === numberOfIteration) {\n    const trimLastComa = stringDataArg.trim().replace(/,$/, '');\n    const concatenatedString = [...trimLastComa.split(',')];\n    trackIndex = 1;\n    stringDataArg = '';\n    return findDuplicate(concatenatedString);\n  } else {\n    trackIndex++;\n  }\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["stringDataArg","trackIndex","generateFilters","stringData","object","arr","trimStirng","item","trimLastComa","concatenatedString","findDuplicate"],"mappings":"AAAA,IAAIA,aAAa,GAAjB,EAAA;AACA,IAAIC,UAAU,GAAd,CAAA;;AACA,MAAMC,eAAe,GAAG,CAAA,UAAA,EAAA,iBAAA,KAAmD;AACzEF,EAAAA,aAAa,IAAIG,UAAU,GAA3BH,GAAAA;;AAEA,WAAA,aAAA,CAAA,GAAA,EAAsC;AACpC,UAAMI,MAAM,GAAZ,EAAA;AACAC,IAAAA,GAAG,CAAHA,OAAAA,CAAY,UAAA,IAAA,EAAwB;AAClC,YAAMC,UAAU,GAAGC,IAAI,CAAvB,IAAmBA,EAAnB;AACA,UAAI,CAACH,MAAM,CAAX,UAAW,CAAX,EAAyBA,MAAM,CAANA,UAAM,CAANA,GAAAA,CAAAA;AACzBA,MAAAA,MAAM,CAANA,UAAM,CAANA,IAAAA,CAAAA;AAHFC,KAAAA;AAKA,WAAA,MAAA;AACD;;AAED,MAAIJ,UAAU,KAAd,iBAAA,EAAsC;AACpC,UAAMO,YAAY,GAAGR,aAAa,CAAbA,IAAAA,GAAAA,OAAAA,CAAAA,IAAAA,EAArB,EAAqBA,CAArB;AACA,UAAMS,kBAAkB,GAAG,CAAC,GAAGD,YAAY,CAAZA,KAAAA,CAA/B,GAA+BA,CAAJ,CAA3B;AACAP,IAAAA,UAAU,GAAVA,CAAAA;AACAD,IAAAA,aAAa,GAAbA,EAAAA;AACA,WAAOU,aAAa,CAApB,kBAAoB,CAApB;AALF,GAAA,MAMO;AACLT,IAAAA,UAAU;AACX;AArBH,CAAA;;AAwBA,SAAA,eAAA","sourcesContent":["let stringDataArg = '';\nlet trackIndex = 1;\nconst generateFilters = (stringData: string, numberOfIteration: number) => {\n  stringDataArg += stringData + ',';\n\n  function findDuplicate(arr: string[]) {\n    const object = {};\n    arr.forEach(function (item: string) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  if (trackIndex === numberOfIteration) {\n    const trimLastComa = stringDataArg.trim().replace(/,$/, '');\n    const concatenatedString = [...trimLastComa.split(',')];\n    trackIndex = 1;\n    stringDataArg = '';\n    return findDuplicate(concatenatedString);\n  } else {\n    trackIndex++;\n  }\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}