{"ast":null,"code":"const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed'; //first combine actors results\n\n  const allActors = [...actors.split(','), ...actors2.split(',')];\n  const filteredActors = []; //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  const ss = allActors.map(actor => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n    } else {\n      const pp = filteredActors.push(actor);\n      console.log('filtered actors', pp);\n    }\n  });\n  console.log('ss', ss);\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["generateFilters","actors","actors2","allActors","split","filteredActors","ss","map","actor","includes","console","log","pp","push"],"mappings":"AAAA,MAAMA,eAAe,GAAG,MAAM;AAC5B,QAAMC,MAAM,GAAG,6DAAf;AACA,QAAMC,OAAO,GACX,4EADF,CAF4B,CAK5B;;AAEA,QAAMC,SAAS,GAAG,CAAC,GAAGF,MAAM,CAACG,KAAP,CAAa,GAAb,CAAJ,EAAuB,GAAGF,OAAO,CAACE,KAAR,CAAc,GAAd,CAA1B,CAAlB;AACA,QAAMC,cAAc,GAAG,EAAvB,CAR4B,CAS5B;AACA;;AAEA,QAAMC,EAAE,GAAGH,SAAS,CAACI,GAAV,CAAeC,KAAD,IAAW;AAClC;AACA,QAAIH,cAAc,CAACI,QAAf,CAAwBD,KAAxB,CAAJ,EAAoC;AAClCE,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,KAA/B;AACD,KAFD,MAEO;AACL,YAAMI,EAAE,GAAGP,cAAc,CAACQ,IAAf,CAAoBL,KAApB,CAAX;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,EAA/B;AACD;AACF,GARU,CAAX;AAUAF,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBL,EAAlB;AACD,CAvBD;;AAyBA,SAASN,eAAT","sourcesContent":["const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n\n  //first combine actors results\n\n  const allActors = [...actors.split(','), ...actors2.split(',')];\n  const filteredActors = [];\n  //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  const ss = allActors.map((actor) => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n    } else {\n      const pp = filteredActors.push(actor);\n      console.log('filtered actors', pp);\n    }\n  });\n\n  console.log('ss', ss);\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}