{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar generateFilters = function generateFilters() {\n  var actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  var actors2 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  var actors3 = 'Harrison Ford'; //first combine actors results\n\n  var allActors = [].concat(_toConsumableArray(actors.split(',')), _toConsumableArray(actors2.split(',')), _toConsumableArray(actors3.split(',')));\n  var filteredActors = [];\n  var duplicatesdActors = []; //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  /* const ss = allActors.map((actor) => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n      duplicatesdActors.push(actor);\n    }\n     if (duplicatesdActors.length > 0) {\n      filteredActors.push(duplicatesdActors);\n      //do it again for the first actor on first interation\n      if (allActors.includes(duplicatesdActors[0])) {\n        console.log('duplicate actor', actor);\n        duplicatesdActors.push(actor);\n      }\n      duplicatesdActors = [];\n    } else {\n      filteredActors.push(actor);\n       console.log('filteredActors', filteredActors);\n    }\n  }); */\n\n  function findDuplicate(arra1) {\n    var object = {};\n    var result = [];\n    arra1.forEach(function (item) {\n      if (!object[item]) object[item] = 0;\n      object[item] += 1;\n    });\n    console.log('duplicagte object', object);\n    /*  for (const prop in object) {\n      if (object[prop] >= 2) {\n        result.push(prop);\n      }\n    } */\n\n    return object;\n  }\n\n  console.log('duplicate', findDuplicate(allActors));\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["generateFilters","actors","actors2","actors3","allActors","filteredActors","duplicatesdActors","object","result","arra1","console","findDuplicate"],"mappings":";;AAAA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,MAAMC,MAAM,GAAZ,6DAAA;AACA,MAAMC,OAAO,GAAb,4EAAA;AAEA,MAAMC,OAAO,GAJe,eAI5B,CAJ4B,CAM5B;;AAEA,MAAMC,SAAS,GAAA,GAAA,MAAA,CAAA,kBAAA,CACVH,MAAM,CAANA,KAAAA,CADU,GACVA,CADU,CAAA,EAAA,kBAAA,CAEVC,OAAO,CAAPA,KAAAA,CAFU,GAEVA,CAFU,CAAA,EAAA,kBAAA,CAGVC,OAAO,CAAPA,KAAAA,CAHL,GAGKA,CAHU,CAAA,CAAf;AAKA,MAAME,cAAc,GAApB,EAAA;AACA,MAAIC,iBAAiB,GAdO,EAc5B,CAd4B,CAe5B;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AAsBA,WAAA,aAAA,CAAA,KAAA,EAA8B;AAC5B,QAAMC,MAAM,GAAZ,EAAA;AACA,QAAMC,MAAM,GAAZ,EAAA;AAEAC,IAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,IAAA,EAAgB;AAC5B,UAAI,CAACF,MAAM,CAAX,IAAW,CAAX,EAAmBA,MAAM,CAANA,IAAM,CAANA,GAAAA,CAAAA;AACnBA,MAAAA,MAAM,CAANA,IAAM,CAANA,IAAAA,CAAAA;AAFFE,KAAAA;AAKAC,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,mBAAAA,EAAAA,MAAAA;AAEA;;;;;;AAMA,WAAA,MAAA;AACD;;AAEDA,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,WAAAA,EAAyBC,aAAa,CAAtCD,SAAsC,CAAtCA;AA5DF,CAAA;;AA+DA,SAAA,eAAA","sourcesContent":["const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  const actors3 = 'Harrison Ford';\n\n  //first combine actors results\n\n  const allActors = [\n    ...actors.split(','),\n    ...actors2.split(','),\n    ...actors3.split(','),\n  ];\n  const filteredActors = [];\n  let duplicatesdActors = [];\n  //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  /* const ss = allActors.map((actor) => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n      duplicatesdActors.push(actor);\n    }\n\n    if (duplicatesdActors.length > 0) {\n      filteredActors.push(duplicatesdActors);\n      //do it again for the first actor on first interation\n      if (allActors.includes(duplicatesdActors[0])) {\n        console.log('duplicate actor', actor);\n        duplicatesdActors.push(actor);\n      }\n      duplicatesdActors = [];\n    } else {\n      filteredActors.push(actor);\n\n      console.log('filteredActors', filteredActors);\n    }\n  }); */\n\n  function findDuplicate(arra1) {\n    const object = {};\n    const result = [];\n\n    arra1.forEach(function (item) {\n      if (!object[item]) object[item] = 0;\n      object[item] += 1;\n    });\n\n    console.log('duplicagte object', object);\n\n    /*  for (const prop in object) {\n      if (object[prop] >= 2) {\n        result.push(prop);\n      }\n    } */\n\n    return object;\n  }\n\n  console.log('duplicate', findDuplicate(allActors));\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}