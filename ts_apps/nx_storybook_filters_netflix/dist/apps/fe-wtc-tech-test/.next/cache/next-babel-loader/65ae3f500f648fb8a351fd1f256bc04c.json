{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarHalfIcon from '@material-ui/icons/StarHalf';\nimport StarBorderOutlinedIcon from '@material-ui/icons/StarBorderOutlined';\nexport var showStarRating = function showStarRating(rating, allStars) {\n  var percentage = String(rating * allStars / 100);\n  var calculateRating = percentage.split('.');\n  var wholeStars = Number(calculateRating[0]);\n  var decimalNumber = Number(calculateRating[1]);\n  var halfStar = isNaN(decimalNumber) || decimalNumber === 0 ? 0 : 1;\n  var emptyStars = allStars - wholeStars - halfStar;\n  console.log('wholeStars', Number(calculateRating[0]));\n  console.log('halfStar', Number(calculateRating[1]));\n  console.log('halfStar', !!calculateRating[1]);\n  console.log('halfStar', halfStar);\n  var startMap = {\n    wholeStar: function wholeStar(props) {\n      return __jsx(StarIcon, props);\n    },\n    halfStar: function halfStar(props) {\n      return __jsx(StarHalfIcon, props);\n    },\n    emptyStar: function emptyStar(props) {\n      return __jsx(StarBorderOutlinedIcon, props);\n    }\n  };\n  var wholeStarts = Array(wholeStars).fill(startMap['wholeStar']);\n  var halfStarts = Array(halfStar).fill(startMap['halfStar']);\n  var emptyStarts = Array(emptyStars).fill(startMap['emptyStar']);\n  var ss = [].concat(_toConsumableArray(wholeStarts), _toConsumableArray(halfStarts), _toConsumableArray(emptyStarts));\n  console.log('[...wholeStarts, ...halfStarts, ...emptyStarts]', ss);\n  return ss;\n};","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/RatingStarComp/ratingCalculation.tsx"],"names":["showStarRating","percentage","String","rating","calculateRating","wholeStars","Number","decimalNumber","halfStar","isNaN","emptyStars","allStars","console","startMap","wholeStar","emptyStar","wholeStarts","Array","halfStarts","emptyStarts","ss"],"mappings":";;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,QAAA,MAAA,yBAAA;AACA,OAAA,YAAA,MAAA,6BAAA;AACA,OAAA,sBAAA,MAAA,uCAAA;AAEA,OAAO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAA,MAAA,EAAA,QAAA,EAAsC;AAClE,MAAMC,UAAU,GAAGC,MAAM,CAAEC,MAAM,GAAP,QAACA,GAA3B,GAAyB,CAAzB;AACA,MAAMC,eAAe,GAAGH,UAAU,CAAVA,KAAAA,CAAxB,GAAwBA,CAAxB;AACA,MAAMI,UAAU,GAAGC,MAAM,CAACF,eAAe,CAAzC,CAAyC,CAAhB,CAAzB;AAEA,MAAMG,aAAa,GAAGD,MAAM,CAACF,eAAe,CAA5C,CAA4C,CAAhB,CAA5B;AACA,MAAMI,QAAQ,GAAGC,KAAK,CAALA,aAAK,CAALA,IAAwBF,aAAa,KAArCE,CAAAA,GAAAA,CAAAA,GAAjB,CAAA;AACA,MAAMC,UAAU,GAAGC,QAAQ,GAARA,UAAAA,GAAnB,QAAA;AAEAC,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,YAAAA,EAA0BN,MAAM,CAACF,eAAe,CAAhDQ,CAAgD,CAAhB,CAAhCA;AACAA,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,UAAAA,EAAwBN,MAAM,CAACF,eAAe,CAA9CQ,CAA8C,CAAhB,CAA9BA;AACAA,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,UAAAA,EAAwB,CAAC,CAACR,eAAe,CAAzCQ,CAAyC,CAAzCA;AACAA,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,UAAAA,EAAAA,QAAAA;AAEA,MAAMC,QAAQ,GAAG;AACfC,IAAAA,SAAS,EAAE,SAAA,SAAA,CAAA,KAAA,EAAA;AAAA,aAA4B,KAAA,CAAA,QAAA,EAA5B,KAA4B,CAA5B;AADI,KAAA;AAEfN,IAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,KAAA,EAAA;AAAA,aAA4B,KAAA,CAAA,YAAA,EAA5B,KAA4B,CAA5B;AAFK,KAAA;AAGfO,IAAAA,SAAS,EAAE,SAAA,SAAA,CAAA,KAAA,EAAA;AAAA,aACT,KAAA,CAAA,sBAAA,EADS,KACT,CADS;AAAA;AAHI,GAAjB;AAOA,MAAMC,WAAW,GAAGC,KAAK,CAALA,UAAK,CAALA,CAAAA,IAAAA,CAAuBJ,QAAQ,CAAnD,WAAmD,CAA/BI,CAApB;AACA,MAAMC,UAAU,GAAGD,KAAK,CAALA,QAAK,CAALA,CAAAA,IAAAA,CAAqBJ,QAAQ,CAAhD,UAAgD,CAA7BI,CAAnB;AACA,MAAME,WAAW,GAAGF,KAAK,CAALA,UAAK,CAALA,CAAAA,IAAAA,CAAuBJ,QAAQ,CAAnD,WAAmD,CAA/BI,CAApB;AACA,MAAMG,EAAE,GAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,WAAA,CAAA,EAAA,kBAAA,CAAA,UAAA,CAAA,EAAA,kBAAA,CAAR,WAAQ,CAAA,CAAR;AACAR,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,iDAAAA,EAAAA,EAAAA;AACA,SAAA,EAAA;AA1BK,CAAA","sourcesContent":["import React from 'react';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarHalfIcon from '@material-ui/icons/StarHalf';\nimport StarBorderOutlinedIcon from '@material-ui/icons/StarBorderOutlined';\n\nexport const showStarRating = (rating: number, allStars: number) => {\n  const percentage = String((rating * allStars) / 100);\n  const calculateRating = percentage.split('.');\n  const wholeStars = Number(calculateRating[0]);\n\n  const decimalNumber = Number(calculateRating[1]);\n  const halfStar = isNaN(decimalNumber) || decimalNumber === 0 ? 0 : 1;\n  const emptyStars = allStars - wholeStars - halfStar;\n\n  console.log('wholeStars', Number(calculateRating[0]));\n  console.log('halfStar', Number(calculateRating[1]));\n  console.log('halfStar', !!calculateRating[1]);\n  console.log('halfStar', halfStar);\n\n  const startMap = {\n    wholeStar: (props: { key: string }) => <StarIcon {...props} />,\n    halfStar: (props: { key: string }) => <StarHalfIcon {...props} />,\n    emptyStar: (props: { key: string }) => (\n      <StarBorderOutlinedIcon {...props} />\n    ),\n  };\n  const wholeStarts = Array(wholeStars).fill(startMap['wholeStar']);\n  const halfStarts = Array(halfStar).fill(startMap['halfStar']);\n  const emptyStarts = Array(emptyStars).fill(startMap['emptyStar']);\n  const ss = [...wholeStarts, ...halfStarts, ...emptyStarts];\n  console.log('[...wholeStarts, ...halfStarts, ...emptyStarts]', ss);\n  return ss;\n};\n"]},"metadata":{},"sourceType":"module"}