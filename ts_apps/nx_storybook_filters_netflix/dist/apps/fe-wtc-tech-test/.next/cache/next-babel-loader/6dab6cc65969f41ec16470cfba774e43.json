{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useState, useCallback, useContext } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport IconsStateManagement from '../IconsManagement/IconsStateManagement';\nimport { MoviesContext } from '../index';\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907'\n};\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${props => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  min-width: 200px;\n  min-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\nconst PosterImage = styled.div`\n  width: 150px;\n  height: 221px;\n  border-radius: 10px;\n  background-image: url(${props => props.imgURL});\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n`;\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px 10px 0px 10px;\n`;\nconst CardFooter = styled.div`\n  width: 100%;\n  padding-top: 7px;\n`;\n\nfunction Card({\n  cardId\n}) {\n  const {\n    0: backgroundColor,\n    1: setBgColor\n  } = useState(cardColorMapping.default); //register setColor once and dont re-render\n\n  const setColor = useCallback(({\n    watch,\n    favorite\n  }) => {\n    console.log('{ watch, favorite })', {\n      watch,\n      favorite\n    });\n\n    switch (true) {\n      case !watch && !favorite:\n        setBgColor(cardColorMapping.default);\n        break;\n\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        break;\n\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        break;\n\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n\n  const calculateAvarageRatings = Ratings => {\n    const percentageValue = [];\n    const overAllPerc = Ratings.map(({\n      Value\n    }) => Value).reduce((avaragePerc, rating, index) => {\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map(value => Number(value));\n        const calcPercentage = all / ratio * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce((acc, value) => acc + value);\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n    return overAllPerc;\n  };\n\n  const data = useContext(MoviesContext);\n  const {\n    Watched,\n    Saved,\n    Title,\n    Poster: PosterURL,\n    Ratings\n  } = data[cardId];\n  const movieStatus = {\n    watch: Boolean(Watched),\n    favorite: Boolean(Saved)\n  };\n  return __jsx(CardContainer, {\n    color: backgroundColor,\n    key: Title\n  }, __jsx(CardHeader, null, __jsx(IconsStateManagement, _extends({\n    callToActionCardColor: setColor\n  }, movieStatus))), __jsx(Poster, null, __jsx(PosterImage, {\n    imgURL: PosterURL\n  })), __jsx(CardFooter, null, __jsx(RatingStarComp, {\n    rating: calculateAvarageRatings(Ratings)\n  })));\n}\n\nexport default Card;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/Card/Card.tsx"],"names":["cardColorMapping","default","savedNotWatched","watchedAndSaved","watchedNotSaved","CardContainer","styled","div","props","Poster","PosterImage","imgURL","CardHeader","CardFooter","cardId","setBgColor","useState","setColor","useCallback","favorite","console","watch","calculateAvarageRatings","Ratings","percentageValue","overAllPerc","Value","rating","value","Number","calcPercentage","all","percentage","index","sumPercentage","acc","avaragePerc","data","useContext","movieStatus","Boolean","Title","PosterURL"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useContext } from 'react';\nimport styled from 'styled-components';\n//custom\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport IconsStateManagement from '../IconsManagement/IconsStateManagement';\nimport { MoviesContext } from '../index';\n\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907',\n};\n\nconst CardContainer = styled.div<{\n  color: string;\n}>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${(props) => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  min-width: 200px;\n  min-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\nconst PosterImage = styled.div<{\n  imgURL: string;\n}>`\n  width: 150px;\n  height: 221px;\n  border-radius: 10px;\n  background-image: url(${(props) => props.imgURL});\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n`;\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px 10px 0px 10px;\n`;\nconst CardFooter = styled.div`\n  width: 100%;\n  padding-top: 7px;\n`;\n\ninterface ContextProps {\n  Title: string;\n  Poster: string;\n  Ratings: { avrRat: number };\n}\ninterface Props {\n  cardId: number;\n}\nfunction Card({ cardId }: Props) {\n  const [backgroundColor, setBgColor] = useState(cardColorMapping.default);\n\n  //register setColor once and dont re-render\n  const setColor = useCallback(({ watch, favorite }) => {\n    console.log('{ watch, favorite })', { watch, favorite });\n    switch (true) {\n      case !watch && !favorite:\n        setBgColor(cardColorMapping.default);\n        break;\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        break;\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        break;\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  const calculateAvarageRatings = (Ratings: {}[]) => {\n    const percentageValue: number[] = [];\n\n    const overAllPerc = Ratings.map(\n      ({ Value }: { Value: string }) => Value\n    ).reduce((avaragePerc, rating, index) => {\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map((value) => Number(value));\n        const calcPercentage = (all / ratio) * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce(\n          (acc, value) => acc + value\n        );\n\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n\n    return overAllPerc;\n  };\n\n  const data = useContext(MoviesContext);\n  const { Watched, Saved, Title, Poster: PosterURL, Ratings } = data[cardId];\n  const movieStatus = { watch: Boolean(Watched), favorite: Boolean(Saved) };\n\n  return (\n    <CardContainer color={backgroundColor} key={Title}>\n      <CardHeader>\n        <IconsStateManagement\n          callToActionCardColor={setColor}\n          {...movieStatus}\n        />\n      </CardHeader>\n      <Poster>\n        <PosterImage imgURL={PosterURL} />\n      </Poster>\n      <CardFooter>\n        <RatingStarComp rating={calculateAvarageRatings(Ratings)} />\n      </CardFooter>\n    </CardContainer>\n  );\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}