{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined'; //custom\n\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport wrapperIconHOC from '../../contentComponents/IconCTA/IconAction';\nimport { MoviesContext } from '../../../pages/index';\n/* const all = Object.entries(generateFilters());\nconst displayed1 = all.slice(0, 5);\nconst hidden1 = all.slice(5, all.length); */\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\nconst CheckBox = wrapperIconHOC(CheckBoxOutlineBlankOutlinedIcon, CheckBoxOutlinedIcon);\n\nfunction FiltersGroup() {\n  const {\n    movies,\n    updateState\n  } = useContext(MoviesContext);\n  /* const { Watched, Saved, Title, Poster: PosterURL, Ratings } = [...movies];\n  const movieStatus = {\n    watch: JSON.parse(Watched.toLowerCase()),\n    favorite: JSON.parse(Saved.toLowerCase()),\n  }; */\n\n  const callToAction = state => {\n    const {\n      yes,\n      no\n    } = state;\n    updateState(yes ? 'True' : 'False');\n  };\n\n  console.log('movies', movies);\n\n  const displayFilters = (ArrOfFilters, length) => ({\n    displayed: ArrOfFilters.slice(0, 5),\n    hidden: ArrOfFilters.slice(5, length)\n  });\n\n  let metaScoreStrings = '';\n\n  const calculateMetaScore = score => {\n    if (score < 60) {\n      metaScoreStrings = 'below60';\n    }\n\n    if (score > 60 && score < 80) {\n      metaScoreStrings = 'between6080';\n    }\n\n    if (score > 80 && score < 90) {\n      metaScoreStrings = 'between8090';\n    }\n\n    if (score > 90) {\n      metaScoreStrings = 'abbove90';\n    }\n\n    return metaScoreStrings;\n  };\n\n  const watched = Object.entries({\n    YES: movies.filter(({\n      Watched\n    }) => Watched === 'True').length,\n    NO: movies.filter(({\n      Watched\n    }) => Watched === 'False').length\n  });\n  const type = Object.entries({\n    MOVIE: movies.filter(({\n      Type\n    }) => Type === 'movie').length,\n    SERIES: movies.filter(({\n      Type\n    }) => Type === 'series').length\n  });\n  /*  const actorsFilters = movies.reduce((obj, { Actors }) => {\n    obj = generateFilters(Actors, movies.length);\n    return obj;\n  }, {});\n   const entries = Object.entries(actorsFilters);\n  const dd = displayFilters(entries, entries.length);\n  console.log('displayed', dd); */\n\n  const generate = value => (obj, element) => {\n    const ss = calculateMetaScore(Number(element[value]));\n    obj = generateFilters(ss, movies.length);\n    return obj;\n  };\n\n  const actorsFilters = movies.reduce(generate('Metascore'), {});\n  const Year = movies.reduce((obj, {\n    Year\n  }) => {\n    obj = generateFilters(Year, movies.length);\n    return obj;\n  }, {});\n  console.log('actorsFilters', actorsFilters);\n  console.log('Year', Year); //const entries = Object.entries(actorsFilters);\n\n  /*  const displayed = watched.slice(0, 5);\n  const hidden = watched.slice(5, all.length); */\n\n  /* const FilterLabel = {\n    watched,\n    type,\n    actors:generateFilters()\n  }; */\n\n  const ss = true;\n  return __jsx(React.Fragment, null, ss && '...loadin', __jsx(FilterContainer, null, ['watched'].map(title => __jsx(\"div\", {\n    className: \"accordion\"\n  }, __jsx(Accordion, {\n    open: true,\n    shevron: false,\n    clickDisable: true,\n    title: title\n  }, __jsx(\"div\", null, [].map(([key, value]) => __jsx(\"div\", {\n    key: key\n  }, __jsx(CheckBox, {\n    callToAction: callToAction,\n    icon: \"yes\"\n  }), `${key}(${value})`)))), [].length > 0 && __jsx(Accordion, {\n    title: '...more',\n    directional: true,\n    shevron: false\n  }, [].map(([key, value]) => __jsx(\"div\", {\n    key: key\n  }, __jsx(CheckBox, {\n    callToAction: callToAction,\n    icon: \"no\"\n  }), `${key}(${value})`)))))));\n} //make sure it render only the amount of movies.lenght\n\n\nexport default React.memo(FiltersGroup);","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/FiltersGroup.tsx"],"names":["FilterContainer","styled","div","CheckBox","wrapperIconHOC","updateState","useContext","callToAction","state","no","yes","console","displayFilters","displayed","ArrOfFilters","hidden","metaScoreStrings","calculateMetaScore","score","watched","YES","movies","Watched","NO","length","type","MOVIE","Type","SERIES","generate","value","ss","Number","element","obj","generateFilters","actorsFilters","Year","title","key","React"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined';\n\n//custom\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport wrapperIconHOC from '../../contentComponents/IconCTA/IconAction';\nimport { MoviesContext } from '../../../pages/index';\nimport { SSL_OP_EPHEMERAL_RSA } from 'constants';\n\n/* const all = Object.entries(generateFilters());\nconst displayed1 = all.slice(0, 5);\nconst hidden1 = all.slice(5, all.length); */\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\n\nconst CheckBox = wrapperIconHOC(\n  CheckBoxOutlineBlankOutlinedIcon,\n  CheckBoxOutlinedIcon\n);\n\nfunction FiltersGroup() {\n  const { movies, updateState } = useContext(MoviesContext);\n  /* const { Watched, Saved, Title, Poster: PosterURL, Ratings } = [...movies];\n  const movieStatus = {\n    watch: JSON.parse(Watched.toLowerCase()),\n    favorite: JSON.parse(Saved.toLowerCase()),\n  }; */\n\n  const callToAction = (state) => {\n    const { yes, no } = state;\n    updateState(yes ? 'True' : 'False');\n  };\n  console.log('movies', movies);\n\n  const displayFilters = (\n    ArrOfFilters: [string, unknown][],\n    length: number\n  ) => ({\n    displayed: ArrOfFilters.slice(0, 5),\n    hidden: ArrOfFilters.slice(5, length),\n  });\n\n  let metaScoreStrings = '';\n  const calculateMetaScore = (score: number) => {\n    if (score < 60) {\n      metaScoreStrings = 'below60';\n    }\n    if (score > 60 && score < 80) {\n      metaScoreStrings = 'between6080';\n    }\n    if (score > 80 && score < 90) {\n      metaScoreStrings = 'between8090';\n    }\n    if (score > 90) {\n      metaScoreStrings = 'abbove90';\n    }\n    return metaScoreStrings;\n  };\n\n  const watched = Object.entries({\n    YES: movies.filter(({ Watched }) => Watched === 'True').length,\n    NO: movies.filter(({ Watched }) => Watched === 'False').length,\n  });\n\n  const type = Object.entries({\n    MOVIE: movies.filter(({ Type }) => Type === 'movie').length,\n    SERIES: movies.filter(({ Type }) => Type === 'series').length,\n  });\n\n  /*  const actorsFilters = movies.reduce((obj, { Actors }) => {\n    obj = generateFilters(Actors, movies.length);\n    return obj;\n  }, {});\n\n  const entries = Object.entries(actorsFilters);\n  const dd = displayFilters(entries, entries.length);\n  console.log('displayed', dd); */\n  const generate = (value: string) => (obj, element) => {\n    const ss = calculateMetaScore(Number(element[value]));\n    obj = generateFilters(ss, movies.length);\n    return obj;\n  };\n  const actorsFilters = movies.reduce(generate('Metascore'), {});\n\n  const Year = movies.reduce((obj, { Year }) => {\n    obj = generateFilters(Year, movies.length);\n    return obj;\n  }, {});\n\n  console.log('actorsFilters', actorsFilters);\n  console.log('Year', Year);\n\n  //const entries = Object.entries(actorsFilters);\n\n  /*  const displayed = watched.slice(0, 5);\n  const hidden = watched.slice(5, all.length); */\n\n  /* const FilterLabel = {\n    watched,\n    type,\n    actors:generateFilters()\n  }; */\n\n  const ss = true;\n  return (\n    <>\n      {ss && '...loadin'}\n      <FilterContainer>\n        {['watched'].map((title) => (\n          <div className=\"accordion\">\n            <Accordion open shevron={false} clickDisable={true} title={title}>\n              <div>\n                {[].map(([key, value]) => (\n                  <div key={key}>\n                    <CheckBox callToAction={callToAction} icon=\"yes\" />\n                    {`${key}(${value})`}\n                  </div>\n                ))}\n              </div>\n            </Accordion>\n            {[].length > 0 && (\n              <Accordion title={'...more'} directional={true} shevron={false}>\n                {[].map(([key, value]) => (\n                  <div key={key}>\n                    <CheckBox callToAction={callToAction} icon=\"no\" />\n                    {`${key}(${value})`}\n                  </div>\n                ))}\n              </Accordion>\n            )}\n          </div>\n        ))}\n      </FilterContainer>\n    </>\n  );\n}\n\n//make sure it render only the amount of movies.lenght\nexport default React.memo(FiltersGroup);\n"]},"metadata":{},"sourceType":"module"}