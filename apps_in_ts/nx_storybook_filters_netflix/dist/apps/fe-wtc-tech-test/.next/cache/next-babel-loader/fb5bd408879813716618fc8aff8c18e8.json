{"ast":null,"code":"let actorsStringData = '';\nlet trackIndex = 1;\n\nconst generateFilters = (stringData, allMovies) => {\n  actorsStringData += stringData + ',';\n\n  function findDuplicate(arr) {\n    const object = {};\n    arr.forEach(function (item) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('trackIndex', trackIndex);\n\n  if (trackIndex === allMovies) {\n    const trimLastComa = actorsStringData.trim().replace(/,$/, '');\n    const allActors = [...trimLastComa.split(',')];\n    trackIndex = 1;\n    actorsStringData = '';\n    return findDuplicate(allActors);\n  } else {\n    trackIndex++;\n  }\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["actorsStringData","trackIndex","generateFilters","stringData","object","arr","trimStirng","item","console","trimLastComa","allActors","findDuplicate"],"mappings":"AAAA,IAAIA,gBAAgB,GAApB,EAAA;AACA,IAAIC,UAAU,GAAd,CAAA;;AACA,MAAMC,eAAe,GAAG,CAAA,UAAA,EAAA,SAAA,KAA2C;AACjEF,EAAAA,gBAAgB,IAAIG,UAAU,GAA9BH,GAAAA;;AAEA,WAAA,aAAA,CAAA,GAAA,EAAsC;AACpC,UAAMI,MAAM,GAAZ,EAAA;AACAC,IAAAA,GAAG,CAAHA,OAAAA,CAAY,UAAA,IAAA,EAAwB;AAClC,YAAMC,UAAU,GAAGC,IAAI,CAAvB,IAAmBA,EAAnB;AACA,UAAI,CAACH,MAAM,CAAX,UAAW,CAAX,EAAyBA,MAAM,CAANA,UAAM,CAANA,GAAAA,CAAAA;AACzBA,MAAAA,MAAM,CAANA,UAAM,CAANA,IAAAA,CAAAA;AAHFC,KAAAA;AAKA,WAAA,MAAA;AACD;;AAEDG,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,YAAAA,EAAAA,UAAAA;;AACA,MAAIP,UAAU,KAAd,SAAA,EAA8B;AAC5B,UAAMQ,YAAY,GAAGT,gBAAgB,CAAhBA,IAAAA,GAAAA,OAAAA,CAAAA,IAAAA,EAArB,EAAqBA,CAArB;AACA,UAAMU,SAAS,GAAG,CAAC,GAAGD,YAAY,CAAZA,KAAAA,CAAtB,GAAsBA,CAAJ,CAAlB;AACAR,IAAAA,UAAU,GAAVA,CAAAA;AACAD,IAAAA,gBAAgB,GAAhBA,EAAAA;AACA,WAAOW,aAAa,CAApB,SAAoB,CAApB;AALF,GAAA,MAMO;AACLV,IAAAA,UAAU;AACX;AAtBH,CAAA;;AAyBA,SAAA,eAAA","sourcesContent":["let actorsStringData = '';\nlet trackIndex = 1;\nconst generateFilters = (stringData: string, allMovies: number) => {\n  actorsStringData += stringData + ',';\n\n  function findDuplicate(arr: string[]) {\n    const object = {};\n    arr.forEach(function (item: string) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('trackIndex', trackIndex);\n  if (trackIndex === allMovies) {\n    const trimLastComa = actorsStringData.trim().replace(/,$/, '');\n    const allActors = [...trimLastComa.split(',')];\n    trackIndex = 1;\n    actorsStringData = '';\n    return findDuplicate(allActors);\n  } else {\n    trackIndex++;\n  }\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}