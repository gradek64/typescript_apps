{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from '../app/contentComponents/Card/Card';\nimport generalAPIService from '../app/services/apiService';\nimport FiltersGroup from '../app/contentComponents/FiltersGroup/FiltersGroup';\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n`;\nconst Filters = styled.div`\n  display: flex;\n  width: 20%;\n  background-color: grey;\n`;\nconst Movies = styled.div`\n  display: flex;\n  width: 80%;\n  flex-wrap: wrap;\n`;\nconst initialState = {\n  movies: [{\n    Title: 'string',\n    Poster: 'string',\n    Ratings: [{}],\n    key: 'string',\n    Saved: 'True',\n    Watched: 'False',\n    Type: 'movie'\n  }],\n  updateState: state => state\n};\nexport let MoviesContext;\nconst {\n  Provider,\n  Consumer\n} = MoviesContext;\n\nconst movieReducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_FROM_FETCH':\n      /* [\n        ...action.payload.filter(({ Watched }) =>\n          JSON.parse(Watched.toLowerCase())\n        ),\n      ]; */\n      return _objectSpread({}, state, {\n        movies: [state.movies, ...action.payload]\n      });\n\n    case 'FILTER_WATCHED':\n      //return movies.filter(({ Watched }) => Watched === action.payload);\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nconst Home = () => {\n  const {\n    0: loading,\n    1: isLoading\n  } = useState(true); //const [movies, getMovies] = useState([]);\n\n  const {\n    0: store,\n    1: dispatch\n  } = useReducer(movieReducer, initialState);\n  const reduceData = useCallback(response => {\n    return response.map(({\n      Title,\n      Poster,\n      Ratings,\n      Watched,\n      Saved\n    }) => {\n      return {\n        Title,\n        Poster,\n        Ratings,\n        Watched,\n        Saved\n      };\n    });\n  }, []);\n  useEffect(() => {\n    isLoading(true);\n\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      console.log('reduceData(result)', reduceData(result));\n      const res = reduceData(result);\n      MoviesContext = React.createContext(_objectSpread({}, initialState, {\n        movies: [initialState.movies, ...res]\n      }));\n      dispatch({\n        type: 'UPDATE_FROM_FETCH',\n        payload: reduceData(result)\n      }); //isLoading(false);\n    };\n\n    fetchData();\n  }, [reduceData]);\n  console.log('gagdg', store);\n  return __jsx(\"main\", null, loading && 'movies are loading', !loading && __jsx(Provider, {\n    value: store\n  }, __jsx(Wrapper, null, __jsx(Filters, null, __jsx(FiltersGroup, null)), __jsx(Movies, null, __jsx(Consumer, null, ({\n    movies\n  }) => movies.map((fields, i) => __jsx(Card, {\n    key: fields.Title,\n    cardId: i\n  })))))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["React","useEffect","useState","useCallback","useReducer","styled","Card","generalAPIService","FiltersGroup","Wrapper","div","Filters","Movies","initialState","movies","Title","Poster","Ratings","key","Saved","Watched","Type","updateState","state","MoviesContext","Provider","Consumer","movieReducer","action","type","payload","Home","loading","isLoading","store","dispatch","reduceData","response","map","fetchData","result","get","console","log","res","createContext","fields","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from '../app/contentComponents/Card/Card';\nimport generalAPIService from '../app/services/apiService';\nimport FiltersGroup from '../app/contentComponents/FiltersGroup/FiltersGroup';\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst Filters = styled.div`\n  display: flex;\n  width: 20%;\n  background-color: grey;\n`;\nconst Movies = styled.div`\n  display: flex;\n  width: 80%;\n  flex-wrap: wrap;\n`;\n\ninterface ImoviesResponseFields {\n  Title: string;\n  Poster: string;\n  Ratings: {}[];\n  key: string;\n  Saved: string;\n  Watched: string;\n  Type: 'movie' | 'series';\n}\nconst initialState = {\n  movies: [\n    {\n      Title: 'string',\n      Poster: 'string',\n      Ratings: [{}],\n      key: 'string',\n      Saved: 'True',\n      Watched: 'False',\n      Type: 'movie',\n    },\n  ],\n  updateState: (state) => state,\n};\nexport let MoviesContext;\nconst { Provider, Consumer } = MoviesContext;\n\nconst movieReducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_FROM_FETCH':\n      /* [\n        ...action.payload.filter(({ Watched }) =>\n          JSON.parse(Watched.toLowerCase())\n        ),\n      ]; */\n      return { ...state, movies: [state.movies, ...action.payload] };\n    case 'FILTER_WATCHED':\n      //return movies.filter(({ Watched }) => Watched === action.payload);\n      return state;\n    default:\n      return state;\n  }\n};\n\nconst Home = () => {\n  const [loading, isLoading] = useState(true);\n  //const [movies, getMovies] = useState([]);\n  const [store, dispatch] = useReducer(movieReducer, initialState);\n\n  const reduceData = useCallback((response: {}[]) => {\n    return response.map(\n      ({ Title, Poster, Ratings, Watched, Saved }: ImoviesResponseFields) => {\n        return {\n          Title,\n          Poster,\n          Ratings,\n          Watched,\n          Saved,\n        };\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    isLoading(true);\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      console.log('reduceData(result)', reduceData(result));\n      const res = reduceData(result);\n      MoviesContext = React.createContext({\n        ...initialState,\n        movies: [initialState.movies, ...res],\n      });\n\n      dispatch({ type: 'UPDATE_FROM_FETCH', payload: reduceData(result) });\n      //isLoading(false);\n    };\n\n    fetchData();\n  }, [reduceData]);\n\n  console.log('gagdg', store);\n\n  return (\n    <main>\n      {loading && 'movies are loading'}\n      {!loading && (\n        <Provider value={store}>\n          <Wrapper>\n            <Filters>\n              <FiltersGroup />\n            </Filters>\n            <Movies>\n              <Consumer>\n                {({ movies }) =>\n                  movies.map((fields, i) => (\n                    <Card key={fields.Title} cardId={i} />\n                  ))\n                }\n              </Consumer>\n            </Movies>\n          </Wrapper>\n        </Provider>\n      )}\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}