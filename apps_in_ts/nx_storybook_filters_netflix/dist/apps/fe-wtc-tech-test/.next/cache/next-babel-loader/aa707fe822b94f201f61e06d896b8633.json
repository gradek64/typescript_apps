{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport IconsStateManagement from './IconsStateManagement/IconsStateManagement';\nimport { MoviesContext } from '../../../pages/index';\nimport { calculateAvarageRatings } from './CardUtills/calculateAvarageRating';\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907'\n};\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${props => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  max-width: 200px;\n  max-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\nconst PosterImage = styled.div`\n  width: 150px;\n  height: 221px;\n  border-radius: 10px;\n  background-image: url(${props => props.imgURL});\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n`;\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px 10px 0px 10px;\n`;\nconst CardFooter = styled.div`\n  width: 100%;\n  padding-top: 7px;\n`;\n\nfunction Card({\n  cardId\n}) {\n  const {\n    0: backgroundColor,\n    1: setBgColor\n  } = useState(cardColorMapping.default); //register setColor once and dont re-render\n  //const setColor = useCallback(({ watch, favorite }) => {\n\n  const setColor = ({\n    watch,\n    favorite\n  }) => {\n    switch (true) {\n      case !watch && !favorite:\n        setBgColor(cardColorMapping.default);\n        break;\n\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        break;\n\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        break;\n\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        break;\n\n      default:\n        break;\n    }\n  }; //}, []);\n  //set initial color \n\n\n  const {\n    movies\n  } = useContext(MoviesContext);\n  const {\n    Watched,\n    Saved,\n    Title,\n    Poster: PosterURL,\n    Ratings\n  } = movies[cardId];\n  const movieStatus = {\n    watch: JSON.parse(Watched.toLowerCase()),\n    favorite: JSON.parse(Saved.toLowerCase())\n  };\n  useEffect(() => {\n    setColor(_objectSpread({}, movieStatus)); // api.data.count from api after update store\n  }, []);\n  return __jsx(CardContainer, {\n    color: backgroundColor,\n    key: Title\n  }, __jsx(CardHeader, null, __jsx(IconsStateManagement, _extends({\n    callToActionCardColor: setColor\n  }, movieStatus))), __jsx(Poster, null, __jsx(PosterImage, {\n    imgURL: PosterURL\n  })), __jsx(CardFooter, null, __jsx(RatingStarComp, {\n    rating: calculateAvarageRatings(Ratings)\n  })));\n}\n\nexport default Card;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/Card/Card.tsx"],"names":["React","useState","useEffect","useContext","styled","RatingStarComp","IconsStateManagement","MoviesContext","calculateAvarageRatings","cardColorMapping","default","savedNotWatched","watchedAndSaved","watchedNotSaved","CardContainer","div","props","color","Poster","PosterImage","imgURL","CardHeader","CardFooter","Card","cardId","backgroundColor","setBgColor","setColor","watch","favorite","movies","Watched","Saved","Title","PosterURL","Ratings","movieStatus","JSON","parse","toLowerCase"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAuCC,SAAvC,EAAkDC,UAAlD,QAAoE,OAApE;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CACA;;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,oBAAP,MAAiC,6CAAjC;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,uBAAT,QAAwC,qCAAxC;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,OAAO,EAAE,MADc;AAEvBC,EAAAA,eAAe,EAAE,SAFM;AAGvBC,EAAAA,eAAe,EAAE,SAHM;AAIvBC,EAAAA,eAAe,EAAE;AAJM,CAAzB;AAOA,MAAMC,aAAa,GAAGV,MAAM,CAACW,GAE1B;;;sBAGoBC,KAAD,IAAWA,KAAK,CAACC,KAAN,IAAeR,gBAAgB,CAACC,OAAQ;;;;;;;;;;CALzE;AAgBA,MAAMQ,MAAM,GAAGd,MAAM,CAACW,GAAI;;;;CAA1B;AAKA,MAAMI,WAAW,GAAGf,MAAM,CAACW,GAExB;;;;0BAIwBC,KAAD,IAAWA,KAAK,CAACI,MAAO;;;CANlD;AAUA,MAAMC,UAAU,GAAGjB,MAAM,CAACW,GAAI;;;;;CAA9B;AAMA,MAAMO,UAAU,GAAGlB,MAAM,CAACW,GAAI;;;CAA9B;;AAOA,SAASQ,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAAiC;AAC/B,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAgCzB,QAAQ,CAACQ,gBAAgB,CAACC,OAAlB,CAA9C,CAD+B,CAG/B;AACA;;AACA,QAAMiB,QAAQ,GAAG,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,KAAyB;AACxC,YAAQ,IAAR;AACE,WAAK,CAACD,KAAD,IAAU,CAACC,QAAhB;AACEH,QAAAA,UAAU,CAACjB,gBAAgB,CAACC,OAAlB,CAAV;AACA;;AACF,WAAKkB,KAAK,IAAI,CAACC,QAAf;AACEH,QAAAA,UAAU,CAACjB,gBAAgB,CAACI,eAAlB,CAAV;AACA;;AACF,WAAK,CAACe,KAAD,IAAUC,QAAf;AACEH,QAAAA,UAAU,CAACjB,gBAAgB,CAACE,eAAlB,CAAV;AACA;;AACF,WAAKiB,KAAK,IAAIC,QAAd;AACEH,QAAAA,UAAU,CAACjB,gBAAgB,CAACG,eAAlB,CAAV;AACA;;AACF;AACE;AAdJ;AAgBD,GAjBD,CAL+B,CAuB/B;AACA;;;AAKA,QAAM;AAAEkB,IAAAA;AAAF,MAAa3B,UAAU,CAACI,aAAD,CAA7B;AACA,QAAM;AAAEwB,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,KAAlB;AAAyBf,IAAAA,MAAM,EAAEgB,SAAjC;AAA4CC,IAAAA;AAA5C,MAAwDL,MAAM,CAACN,MAAD,CAApE;AACA,QAAMY,WAAW,GAAG;AAClBR,IAAAA,KAAK,EAAES,IAAI,CAACC,KAAL,CAAWP,OAAO,CAACQ,WAAR,EAAX,CADW;AAElBV,IAAAA,QAAQ,EAAEQ,IAAI,CAACC,KAAL,CAAWN,KAAK,CAACO,WAAN,EAAX;AAFQ,GAApB;AAKArC,EAAAA,SAAS,CAAC,MAAM;AACdyB,IAAAA,QAAQ,mBAAMS,WAAN,EAAR,CADc,CACe;AAC9B,GAFQ,EAEN,EAFM,CAAT;AAKA,SACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEX,eAAtB;AAAuC,IAAA,GAAG,EAAEQ;AAA5C,KACE,MAAC,UAAD,QACE,MAAC,oBAAD;AACE,IAAA,qBAAqB,EAAEN;AADzB,KAEMS,WAFN,EADF,CADF,EAOE,MAAC,MAAD,QACE,MAAC,WAAD;AAAa,IAAA,MAAM,EAAEF;AAArB,IADF,CAPF,EAUE,MAAC,UAAD,QACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAE1B,uBAAuB,CAAC2B,OAAD;AAA/C,IADF,CAVF,CADF;AAgBD;;AAED,eAAeZ,IAAf","sourcesContent":["import React, { useState, useCallback, useEffect, useContext } from 'react';\nimport styled from 'styled-components';\n//custom\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport IconsStateManagement from './IconsStateManagement/IconsStateManagement';\nimport { MoviesContext } from '../../../pages/index';\nimport { calculateAvarageRatings } from './CardUtills/calculateAvarageRating';\n\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907',\n};\n\nconst CardContainer = styled.div<{\n  color: string;\n}>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${(props) => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  max-width: 200px;\n  max-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\nconst PosterImage = styled.div<{\n  imgURL: string;\n}>`\n  width: 150px;\n  height: 221px;\n  border-radius: 10px;\n  background-image: url(${(props) => props.imgURL});\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n`;\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px 10px 0px 10px;\n`;\nconst CardFooter = styled.div`\n  width: 100%;\n  padding-top: 7px;\n`;\ninterface Props {\n  cardId: number;\n}\nfunction Card({ cardId }: Props) {\n  const [backgroundColor, setBgColor] = useState(cardColorMapping.default);\n\n  //register setColor once and dont re-render\n  //const setColor = useCallback(({ watch, favorite }) => {\n  const setColor = ({ watch, favorite }) => {\n    switch (true) {\n      case !watch && !favorite:\n        setBgColor(cardColorMapping.default);\n        break;\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        break;\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        break;\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        break;\n      default:\n        break;\n    }\n  };\n  //}, []);\n  //set initial color \n\n\n\n\n  const { movies } = useContext(MoviesContext);\n  const { Watched, Saved, Title, Poster: PosterURL, Ratings } = movies[cardId];\n  const movieStatus = {\n    watch: JSON.parse(Watched.toLowerCase()),\n    favorite: JSON.parse(Saved.toLowerCase()),\n  };\n\n  useEffect(() => {\n    setColor({ ...movieStatus }) // api.data.count from api after update store\n  }, [])\n\n\n  return (\n    <CardContainer color={backgroundColor} key={Title}>\n      <CardHeader>\n        <IconsStateManagement\n          callToActionCardColor={setColor}\n          {...movieStatus}\n        />\n      </CardHeader>\n      <Poster>\n        <PosterImage imgURL={PosterURL} />\n      </Poster>\n      <CardFooter>\n        <RatingStarComp rating={calculateAvarageRatings(Ratings)} />\n      </CardFooter>\n    </CardContainer>\n  );\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}