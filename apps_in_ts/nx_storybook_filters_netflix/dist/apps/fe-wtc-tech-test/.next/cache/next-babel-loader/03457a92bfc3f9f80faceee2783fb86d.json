{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarHalfIcon from '@material-ui/icons/StarHalf';\nimport StarBorderOutlinedIcon from '@material-ui/icons/StarBorderOutlined';\nconst RatingContainer = styled.div`\n  position: relative;\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n  background-color: orange;\n`;\nconst RatingSymbol = styled.div`\n  background-color: white;\n  margin: 0 auto;\n  position: absolute;\n  mix-blend-mode: screen;\n`;\nconst symbolMap = {\n  star: '&#9733;'\n};\n\nfunction Rating(props) {\n  const {\n    rating\n  } = props;\n  const allStars = 5;\n  const calculateRating = String(rating).split('.');\n  const wholeStars = Number(calculateRating[0]);\n  const halfStar = Number(calculateRating[1]);\n\n  const hasHalfStar = halfStar => halfStar === 0 ? 0 : 1;\n\n  const emptyStars = allStars - wholeStars - hasHalfStar(halfStar);\n\n  const displayStars = () => {\n    const startMap = {\n      wholeStar: __jsx(StarIcon, null),\n      halfStar: __jsx(StarHalfIcon, null),\n      emptyStar: __jsx(StarBorderOutlinedIcon, null)\n    };\n    const wholeStartsss = Array(allStars).fill(0, 3);\n    console.log('wholeStartsss', wholeStartsss);\n    return;\n  };\n\n  displayStars();\n  return __jsx(RatingContainer, null, __jsx(RatingSymbol, null, [1, 2, 3, 4, 5].map(symbol => __jsx(StarIcon, null))));\n}\n\nexport default Rating;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/RatingStarComp/rating.tsx"],"names":["RatingContainer","styled","div","RatingSymbol","symbolMap","star","rating","allStars","calculateRating","String","wholeStars","Number","halfStar","hasHalfStar","emptyStars","displayStars","startMap","wholeStar","emptyStar","wholeStartsss","Array","console","symbol"],"mappings":";AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,MAAA,MAAA,mBAAA;AACA,OAAA,QAAA,MAAA,yBAAA;AACA,OAAA,YAAA,MAAA,6BAAA;AACA,OAAA,sBAAA,MAAA,uCAAA;AAEA,MAAMA,eAAe,GAAGC,MAAM,CAACC,GAAI;;;;;;CAAnC;AAOA,MAAMC,YAAY,GAAGF,MAAM,CAACC,GAAI;;;;;CAAhC;AAMA,MAAME,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE;AADU,CAAlB;;AAOA,SAAA,MAAA,CAAA,KAAA,EAAiC;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAN,KAAA;AAEA,QAAMC,QAAQ,GAAd,CAAA;AACA,QAAMC,eAAe,GAAGC,MAAM,CAANA,MAAM,CAANA,CAAAA,KAAAA,CAAxB,GAAwBA,CAAxB;AACA,QAAMC,UAAU,GAAGC,MAAM,CAACH,eAAe,CAAzC,CAAyC,CAAhB,CAAzB;AACA,QAAMI,QAAQ,GAAGD,MAAM,CAACH,eAAe,CAAvC,CAAuC,CAAhB,CAAvB;;AACA,QAAMK,WAAW,GAAID,QAAD,IAAuBA,QAAQ,KAARA,CAAAA,GAAAA,CAAAA,GAA3C,CAAA;;AACA,QAAME,UAAU,GAAGP,QAAQ,GAARA,UAAAA,GAAwBM,WAAW,CAAtD,QAAsD,CAAtD;;AAEA,QAAME,YAAY,GAAG,MAAM;AACzB,UAAMC,QAAQ,GAAG;AACfC,MAAAA,SAAS,EAAE,KAAA,CAAA,QAAA,EADI,IACJ,CADI;AAEfL,MAAAA,QAAQ,EAAE,KAAA,CAAA,YAAA,EAFK,IAEL,CAFK;AAGfM,MAAAA,SAAS,EAAE,KAAA,CAAA,sBAAA,EAAA,IAAA;AAHI,KAAjB;AAKA,UAAMC,aAAa,GAAGC,KAAK,CAALA,QAAK,CAALA,CAAAA,IAAAA,CAAAA,CAAAA,EAAtB,CAAsBA,CAAtB;AACAC,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,eAAAA,EAAAA,aAAAA;AACA;AARF,GAAA;;AAUAN,EAAAA,YAAY;AACZ,SACE,KAAA,CAAA,eAAA,EAAA,IAAA,EACE,KAAA,CAAA,YAAA,EAAA,IAAA,EACG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAqBO,MAAD,IACnB,KAAA,CAAA,QAAA,EAJR,IAIQ,CADD,CADH,CADF,CADF;AASD;;AAED,eAAA,MAAA","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarHalfIcon from '@material-ui/icons/StarHalf';\nimport StarBorderOutlinedIcon from '@material-ui/icons/StarBorderOutlined';\n\nconst RatingContainer = styled.div`\n  position: relative;\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n  background-color: orange;\n`;\nconst RatingSymbol = styled.div`\n  background-color: white;\n  margin: 0 auto;\n  position: absolute;\n  mix-blend-mode: screen;\n`;\nconst symbolMap = {\n  star: '&#9733;',\n};\ninterface PropsInt {\n  rating: number;\n}\n\nfunction Rating(props: PropsInt) {\n  const { rating } = props;\n\n  const allStars = 5;\n  const calculateRating = String(rating).split('.');\n  const wholeStars = Number(calculateRating[0]);\n  const halfStar = Number(calculateRating[1]);\n  const hasHalfStar = (halfStar: number) => (halfStar === 0 ? 0 : 1);\n  const emptyStars = allStars - wholeStars - hasHalfStar(halfStar);\n\n  const displayStars = () => {\n    const startMap = {\n      wholeStar: <StarIcon />,\n      halfStar: <StarHalfIcon />,\n      emptyStar: <StarBorderOutlinedIcon />,\n    };\n    const wholeStartsss = Array(allStars).fill(0, 3);\n    console.log('wholeStartsss', wholeStartsss);\n    return;\n  };\n  displayStars();\n  return (\n    <RatingContainer>\n      <RatingSymbol>\n        {[1, 2, 3, 4, 5].map((symbol) => (\n          <StarIcon />\n        ))}\n      </RatingSymbol>\n    </RatingContainer>\n  );\n}\n\nexport default Rating;\n"]},"metadata":{},"sourceType":"module"}