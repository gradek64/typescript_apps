{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'; //custom\n\nimport wrapperIconHOC from '../../IconCTA/IconAction';\nvar VisibilityWatchedIcon = wrapperIconHOC(VisibilityOffOutlinedIcon, VisibilityIcon);\nvar VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon);\n/*---------*/\n\nvar IconsStateManagement = function IconsStateManagement(_ref) {\n  var callToActionCardColor = _ref.callToActionCardColor,\n      watch = _ref.watch,\n      favorite = _ref.favorite;\n  //initial state here at let declaration;\n  var prevState = {\n    watch: watch,\n    favorite: favorite\n  };\n\n  var callToAction = function callToAction(iconState) {\n    callToActionCardColor(_objectSpread({}, prevState, {}, iconState));\n    prevState = _objectSpread({}, prevState, {}, iconState);\n  };\n\n  callToActionCardColor({\n    watch: watch,\n    favorite: favorite\n  }); //initial state\n  //optional to set prevState here after setting initial card colors\n  //prevState = { watch, favorite }\n\n  return __jsx(React.Fragment, null, __jsx(VisibilityWatchedIcon, {\n    callToAction: callToAction,\n    icon: \"watch\",\n    isActive: watch\n  }), __jsx(VisibilitySavedIcon, {\n    callToAction: callToAction,\n    icon: \"favorite\",\n    isActive: favorite\n  }));\n}; //this will make sure the component will remember its props \n//and only re-render the entire component if any of props has\n//changed \n//without React.memo it will re-render anyway even without a prop change\n\n\nexport default React.memo(IconsStateManagement);\n/*\n    from documentation:\n\n    React.memo only checks for prop changes.\n    By default it will only shallowly compare complex objects in the props object.\n    If you want control over the comparison, you can also provide a custom comparison function as the second argument\n\n*/","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/Card/IconsStateManagement/IconsStateManagement.tsx"],"names":["React","VisibilityIcon","VisibilityOffOutlinedIcon","FavoriteIcon","FavoriteBorderIcon","wrapperIconHOC","VisibilityWatchedIcon","VisibilitySavedIcon","IconsStateManagement","callToActionCardColor","watch","favorite","prevState","callToAction","iconState","memo"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,OAAOC,yBAAP,MAAsC,0CAAtC;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,kBAAP,MAA+B,mCAA/B,C,CAEA;;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,IAAMC,qBAAqB,GAAGD,cAAc,CAC1CH,yBAD0C,EAE1CD,cAF0C,CAA5C;AAIA,IAAMM,mBAAmB,GAAGF,cAAc,CAACD,kBAAD,EAAqBD,YAArB,CAA1C;AAEA;;AAYA,IAAMK,oBAAoB,GAAG,SAAvBA,oBAAuB,OAIf;AAAA,MAHZC,qBAGY,QAHZA,qBAGY;AAAA,MAFZC,KAEY,QAFZA,KAEY;AAAA,MADZC,QACY,QADZA,QACY;AACZ;AACA,MAAIC,SAAS,GAAG;AAAEF,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,QAAQ,EAARA;AAAT,GAAhB;;AACA,MAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAuB;AAC1CL,IAAAA,qBAAqB,mBAAMG,SAAN,MAAoBE,SAApB,EAArB;AACAF,IAAAA,SAAS,qBAAQA,SAAR,MAAsBE,SAAtB,CAAT;AACD,GAHD;;AAIAL,EAAAA,qBAAqB,CAAC;AAAEC,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,QAAQ,EAARA;AAAT,GAAD,CAArB,CAPY,CAQZ;AACA;AACA;;AAEA,SACE,4BACE,MAAC,qBAAD;AACE,IAAA,YAAY,EAAEE,YADhB;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,QAAQ,EAAEH;AAHZ,IADF,EAME,MAAC,mBAAD;AACE,IAAA,YAAY,EAAEG,YADhB;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,QAAQ,EAAEF;AAHZ,IANF,CADF;AAcD,CA9BD,C,CAgCA;AACA;AACA;AACA;;;AAEA,eAAeX,KAAK,CAACe,IAAN,CAAWP,oBAAX,CAAf;AAEA","sourcesContent":["import React from 'react';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\n//custom\nimport wrapperIconHOC from '../../IconCTA/IconAction';\nconst VisibilityWatchedIcon = wrapperIconHOC(\n  VisibilityOffOutlinedIcon,\n  VisibilityIcon\n);\nconst VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon);\n\n/*---------*/\ninterface IconStateInt {\n  watch: boolean;\n  favorite: boolean;\n}\n\ninterface PropsI {\n  callToActionCardColor: (state: object) => void;\n  watch: boolean;\n  favorite: boolean;\n}\n\nconst IconsStateManagement = ({\n  callToActionCardColor,\n  watch,\n  favorite,\n}: PropsI) => {\n  //initial state here at let declaration;\n  let prevState = { watch, favorite };\n  const callToAction = (iconState: object) => {\n    callToActionCardColor({ ...prevState, ...iconState });\n    prevState = { ...prevState, ...iconState };\n  };\n  callToActionCardColor({ watch, favorite });\n  //initial state\n  //optional to set prevState here after setting initial card colors\n  //prevState = { watch, favorite }\n\n  return (\n    <>\n      <VisibilityWatchedIcon\n        callToAction={callToAction}\n        icon=\"watch\"\n        isActive={watch}\n      />\n      <VisibilitySavedIcon\n        callToAction={callToAction}\n        icon=\"favorite\"\n        isActive={favorite}\n      />\n    </>\n  );\n};\n\n//this will make sure the component will remember its props \n//and only re-render the entire component if any of props has\n//changed \n//without React.memo it will re-render anyway even without a prop change\n\nexport default React.memo(IconsStateManagement);\n\n/*\n    from documentation:\n\n    React.memo only checks for prop changes.\n    By default it will only shallowly compare complex objects in the props object.\n    If you want control over the comparison, you can also provide a custom comparison function as the second argument\n\n*/\n"]},"metadata":{},"sourceType":"module"}