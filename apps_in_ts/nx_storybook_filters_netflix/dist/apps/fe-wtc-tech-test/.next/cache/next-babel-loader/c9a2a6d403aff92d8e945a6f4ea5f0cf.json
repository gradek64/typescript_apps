{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  width: 80%;\\n  flex-wrap: wrap;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  width: 20%;\\n  background-color: grey;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  width: 100%;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from '../app/contentComponents/Card/Card';\nimport generalAPIService from '../app/services/apiService';\nvar Wrapper = styled.div(_templateObject());\nvar Filters = styled.div(_templateObject2());\nvar Movies = styled.div(_templateObject3());\nexport var MoviesContext = React.createContext({});\nvar Provider = MoviesContext.Provider;\n\nvar Home = function Home() {\n  var _useState = useState(true),\n      loading = _useState[0],\n      isLoading = _useState[1];\n\n  var _useState2 = useState([]),\n      movies = _useState2[0],\n      getMovies = _useState2[1];\n\n  var reduceData = useCallback(function (response) {\n    return response.map(function (_ref) {\n      var Title = _ref.Title,\n          Poster = _ref.Poster,\n          Ratings = _ref.Ratings,\n          Watched = _ref.Watched,\n          Saved = _ref.Saved;\n      isLoading(false);\n      return {\n        Title: Title,\n        Poster: Poster,\n        Ratings: Ratings,\n        Watched: Watched,\n        Saved: Saved\n      };\n    });\n  }, []);\n  useEffect(function () {\n    isLoading(true);\n\n    var fetchData = function fetchData() {\n      var result;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(generalAPIService.get('/api/movies'));\n\n            case 2:\n              result = _context.sent;\n              getMovies(reduceData(result));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchData();\n  }, [reduceData]);\n  return __jsx(\"main\", null, loading && 'movies are loading', __jsx(Provider, {\n    value: movies\n  }, __jsx(Wrapper, null, __jsx(Filters, null), __jsx(Movies, null, movies.map(function (fields, i) {\n    return __jsx(Card, {\n      key: fields.Title,\n      cardId: i\n    });\n  })))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["React","useEffect","useState","useCallback","styled","Card","generalAPIService","Wrapper","div","Filters","Movies","MoviesContext","createContext","Provider","Home","loading","isLoading","movies","getMovies","reduceData","response","map","Title","Poster","Ratings","Watched","Saved","fetchData","get","result","fields","i"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,oCAAjB;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AAEA,IAAMC,OAAO,GAAGH,MAAM,CAACI,GAAV,mBAAb;AAKA,IAAMC,OAAO,GAAGL,MAAM,CAACI,GAAV,oBAAb;AAKA,IAAME,MAAM,GAAGN,MAAM,CAACI,GAAV,oBAAZ;AAcA,OAAO,IAAMG,aAAa,GAAGX,KAAK,CAACY,aAAN,CAAoB,EAApB,CAAtB;IACCC,Q,GAAaF,a,CAAbE,Q;;AAER,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,kBACYZ,QAAQ,CAAC,IAAD,CADpB;AAAA,MACVa,OADU;AAAA,MACDC,SADC;;AAAA,mBAEWd,QAAQ,CAAC,EAAD,CAFnB;AAAA,MAEVe,MAFU;AAAA,MAEFC,SAFE;;AAIjB,MAAMC,UAAU,GAAGhB,WAAW,CAAC,UAACiB,QAAD,EAAoB;AACjD,WAAOA,QAAQ,CAACC,GAAT,CACL,gBAAuE;AAAA,UAApEC,KAAoE,QAApEA,KAAoE;AAAA,UAA7DC,MAA6D,QAA7DA,MAA6D;AAAA,UAArDC,OAAqD,QAArDA,OAAqD;AAAA,UAA5CC,OAA4C,QAA5CA,OAA4C;AAAA,UAAnCC,KAAmC,QAAnCA,KAAmC;AACrEV,MAAAA,SAAS,CAAC,KAAD,CAAT;AACA,aAAO;AACLM,QAAAA,KAAK,EAALA,KADK;AAELC,QAAAA,MAAM,EAANA,MAFK;AAGLC,QAAAA,OAAO,EAAPA,OAHK;AAILC,QAAAA,OAAO,EAAPA,OAJK;AAKLC,QAAAA,KAAK,EAALA;AALK,OAAP;AAOD,KAVI,CAAP;AAYD,GAb6B,EAa3B,EAb2B,CAA9B;AAeAzB,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,SAAS,CAAC,IAAD,CAAT;;AACA,QAAMW,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACKrB,iBAAiB,CAACsB,GAAlB,CAAsB,aAAtB,CADL;;AAAA;AACVC,cAAAA,MADU;AAEhBX,cAAAA,SAAS,CAACC,UAAU,CAACU,MAAD,CAAX,CAAT;;AAFgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAKAF,IAAAA,SAAS;AACV,GARQ,EAQN,CAACR,UAAD,CARM,CAAT;AAUA,SACE,oBACGJ,OAAO,IAAI,oBADd,EAEE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEE;AAAjB,KACE,MAAC,OAAD,QACE,MAAC,OAAD,OADF,EAEE,MAAC,MAAD,QACGA,MAAM,CAACI,GAAP,CAAW,UAACS,MAAD,EAASC,CAAT;AAAA,WACV,MAAC,IAAD;AAAM,MAAA,GAAG,EAAED,MAAM,CAACR,KAAlB;AAAyB,MAAA,MAAM,EAAES;AAAjC,MADU;AAAA,GAAX,CADH,CAFF,CADF,CAFF,CADF;AAeD,CA5CD;;AA8CA,eAAejB,IAAf","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from '../app/contentComponents/Card/Card';\nimport generalAPIService from '../app/services/apiService';\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst Filters = styled.div`\n  display: flex;\n  width: 20%;\n  background-color: grey;\n`;\nconst Movies = styled.div`\n  display: flex;\n  width: 80%;\n  flex-wrap: wrap;\n`;\n\ninterface ImoviesResponseFields {\n  Title: string;\n  Poster: string;\n  Ratings: {}[];\n  key: string;\n  Saved: string;\n  Watched: string;\n}\nexport const MoviesContext = React.createContext({} as ImoviesResponseFields[]);\nconst { Provider } = MoviesContext;\n\nconst Home = () => {\n  const [loading, isLoading] = useState(true);\n  const [movies, getMovies] = useState([]);\n\n  const reduceData = useCallback((response: {}[]) => {\n    return response.map(\n      ({ Title, Poster, Ratings, Watched, Saved }: ImoviesResponseFields) => {\n        isLoading(false);\n        return {\n          Title,\n          Poster,\n          Ratings,\n          Watched,\n          Saved,\n        };\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    isLoading(true);\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, [reduceData]);\n\n  return (\n    <main>\n      {loading && 'movies are loading'}\n      <Provider value={movies}>\n        <Wrapper>\n          <Filters />\n          <Movies>\n            {movies.map((fields, i) => (\n              <Card key={fields.Title} cardId={i} />\n            ))}\n          </Movies>\n        </Wrapper>\n      </Provider>\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}