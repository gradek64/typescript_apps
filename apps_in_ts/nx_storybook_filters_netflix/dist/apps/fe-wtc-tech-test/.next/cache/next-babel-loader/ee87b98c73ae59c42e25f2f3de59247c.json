{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined'; //custom\n\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport wrapperIconHOC from '../../contentComponents/IconCTA/IconAction';\nimport { MoviesContext } from '../../../pages/index';\n\n/* const all = Object.entries(generateFilters());\nconst displayed1 = all.slice(0, 5);\nconst hidden1 = all.slice(5, all.length); */\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\nconst CheckBox = wrapperIconHOC(CheckBoxOutlineBlankOutlinedIcon, CheckBoxOutlinedIcon);\n\nfunction FiltersGroup() {\n  const {\n    movies,\n    updateState\n  } = useContext(MoviesContext);\n  /* const { Watched, Saved, Title, Poster: PosterURL, Ratings } = [...movies];\n  const movieStatus = {\n    watch: JSON.parse(Watched.toLowerCase()),\n    favorite: JSON.parse(Saved.toLowerCase()),\n  }; */\n\n  const callToAction = state => {\n    const {\n      yes,\n      no\n    } = state;\n    updateState(yes ? 'True' : 'False');\n  };\n\n  console.log('movies', movies);\n\n  const displayFilters = (ArrOfFilters, length) => ({\n    displayed: ArrOfFilters.slice(0, 5),\n    hidden: ArrOfFilters.slice(5, length)\n  });\n\n  let metaScoreStrings = '';\n\n  const calculateMetaScore = score => {\n    if (score < 60) {\n      metaScoreStrings = 'below60';\n    }\n\n    if (score > 60 && score < 80) {\n      metaScoreStrings = 'between6080';\n    }\n\n    if (score > 80 && score < 90) {\n      metaScoreStrings = 'between8090';\n    }\n\n    if (score > 90) {\n      metaScoreStrings = 'abbove90';\n    }\n\n    return metaScoreStrings;\n  };\n\n  const generate = value => (obj, element) => {\n    if (value === 'Metascore') obj = generateFilters(calculateMetaScore(Number(element[value])), movies.length);else {\n      obj = generateFilters(element[value], movies.length);\n    }\n    return obj;\n  };\n\n  const metasArr = Object.entries(movies.reduce(generate('Metascore'), {}));\n  const YearArr = Object.entries(movies.reduce(generate('Year'), {}));\n  const metasArrFormat = displayFilters(metasArr, metasArr.length);\n  const yearArrFormat = displayFilters(YearArr, YearArr.length);\n  console.log('metascores', metasArrFormat);\n  console.log('Year', yearArrFormat);\n  const watched = Object.entries({\n    YES: movies.filter(({\n      Watched\n    }) => Watched === 'True').length,\n    NO: movies.filter(({\n      Watched\n    }) => Watched === 'False').length\n  });\n  const type = Object.entries({\n    MOVIE: movies.filter(({\n      Type\n    }) => Type === 'movie').length,\n    SERIES: movies.filter(({\n      Type\n    }) => Type === 'series').length\n  });\n  const filtersLabels = {\n    WATCHED: displayFilters(watched, watched.length),\n    TYPE: displayFilters(type, type.length),\n    METASCORE: metasArrFormat,\n    YEAR: yearArrFormat\n  };\n  const sss = Object.entries(filtersLabels);\n  console.log('ssss', sss);\n  console.log('watched', watched);\n  const ss = false;\n  return __jsx(React.Fragment, null, ss && '...loadin', __jsx(FilterContainer, null, sss.map(([title, filters]) => __jsx(\"div\", {\n    className: \"accordion\"\n  }, __jsx(Accordion, {\n    open: true,\n    shevron: false,\n    clickDisable: true,\n    title: title\n  }, __jsx(\"div\", null, filters['displayed'].map(([key, value]) => __jsx(\"div\", {\n    key: key\n  }, __jsx(CheckBox, {\n    callToAction: callToAction,\n    icon: \"yes\"\n  }), `${key}(${value})`)))), filters['hidden'].length > 0 && __jsx(Accordion, {\n    title: '...more',\n    directional: true,\n    shevron: false\n  }, filters['hidden'].map(([key, value]) => __jsx(\"div\", {\n    key: key\n  }, __jsx(CheckBox, {\n    callToAction: callToAction,\n    icon: \"no\"\n  }), `${key}(${value})`)))))));\n} //make sure it render only the amount of movies.lenght\n\n\nexport default React.memo(FiltersGroup);","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/FiltersGroup.tsx"],"names":["React","useContext","CheckBoxOutlineBlankOutlinedIcon","CheckBoxOutlinedIcon","Accordion","generateFilters","styled","wrapperIconHOC","MoviesContext","FilterContainer","div","CheckBox","FiltersGroup","movies","updateState","callToAction","state","yes","no","console","log","displayFilters","ArrOfFilters","length","displayed","slice","hidden","metaScoreStrings","calculateMetaScore","score","generate","value","obj","element","Number","metasArr","Object","entries","reduce","YearArr","metasArrFormat","yearArrFormat","watched","YES","filter","Watched","NO","type","MOVIE","Type","SERIES","filtersLabels","WATCHED","TYPE","METASCORE","YEAR","sss","ss","map","title","filters","key","memo"],"mappings":";AAAA,OAAOA,KAAP,IAA0BC,UAA1B,QAA4C,OAA5C;AACA,OAAOC,gCAAP,MAA6C,iDAA7C;AACA,OAAOC,oBAAP,MAAiC,qCAAjC,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,SAASC,aAAT,QAA8B,sBAA9B;;AAGA;;;AAIA,MAAMC,eAAe,GAAGH,MAAM,CAACI,GAAI;;;;CAAnC;AAMA,MAAMC,QAAQ,GAAGJ,cAAc,CAC7BL,gCAD6B,EAE7BC,oBAF6B,CAA/B;;AAKA,SAASS,YAAT,GAAwB;AACtB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA0Bb,UAAU,CAACO,aAAD,CAA1C;AACA;;;;;;AAMA,QAAMO,YAAY,GAAIC,KAAD,IAAW;AAC9B,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAcF,KAApB;AACAF,IAAAA,WAAW,CAACG,GAAG,GAAG,MAAH,GAAY,OAAhB,CAAX;AACD,GAHD;;AAIAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBP,MAAtB;;AAEA,QAAMQ,cAAc,GAAG,CACrBC,YADqB,EAErBC,MAFqB,MAGjB;AACJC,IAAAA,SAAS,EAAEF,YAAY,CAACG,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,CADP;AAEJC,IAAAA,MAAM,EAAEJ,YAAY,CAACG,KAAb,CAAmB,CAAnB,EAAsBF,MAAtB;AAFJ,GAHiB,CAAvB;;AAQA,MAAII,gBAAgB,GAAG,EAAvB;;AACA,QAAMC,kBAAkB,GAAIC,KAAD,IAAmB;AAC5C,QAAIA,KAAK,GAAG,EAAZ,EAAgB;AACdF,MAAAA,gBAAgB,GAAG,SAAnB;AACD;;AACD,QAAIE,KAAK,GAAG,EAAR,IAAcA,KAAK,GAAG,EAA1B,EAA8B;AAC5BF,MAAAA,gBAAgB,GAAG,aAAnB;AACD;;AACD,QAAIE,KAAK,GAAG,EAAR,IAAcA,KAAK,GAAG,EAA1B,EAA8B;AAC5BF,MAAAA,gBAAgB,GAAG,aAAnB;AACD;;AACD,QAAIE,KAAK,GAAG,EAAZ,EAAgB;AACdF,MAAAA,gBAAgB,GAAG,UAAnB;AACD;;AACD,WAAOA,gBAAP;AACD,GAdD;;AAgBA,QAAMG,QAAQ,GAAIC,KAAD,IAAmB,CAACC,GAAD,EAAUC,OAAV,KAA0B;AAC5D,QAAIF,KAAK,KAAK,WAAd,EACEC,GAAG,GAAG3B,eAAe,CACnBuB,kBAAkB,CAACM,MAAM,CAACD,OAAO,CAACF,KAAD,CAAR,CAAP,CADC,EAEnBlB,MAAM,CAACU,MAFY,CAArB,CADF,KAKK;AACHS,MAAAA,GAAG,GAAG3B,eAAe,CAAC4B,OAAO,CAACF,KAAD,CAAR,EAAiBlB,MAAM,CAACU,MAAxB,CAArB;AACD;AACD,WAAOS,GAAP;AACD,GAVD;;AAWA,QAAMG,QAAQ,GAAGC,MAAM,CAACC,OAAP,CAAexB,MAAM,CAACyB,MAAP,CAAcR,QAAQ,CAAC,WAAD,CAAtB,EAAqC,EAArC,CAAf,CAAjB;AACA,QAAMS,OAAO,GAAGH,MAAM,CAACC,OAAP,CAAexB,MAAM,CAACyB,MAAP,CAAcR,QAAQ,CAAC,MAAD,CAAtB,EAAgC,EAAhC,CAAf,CAAhB;AAEA,QAAMU,cAAc,GAAGnB,cAAc,CAACc,QAAD,EAAWA,QAAQ,CAACZ,MAApB,CAArC;AACA,QAAMkB,aAAa,GAAGpB,cAAc,CAACkB,OAAD,EAAUA,OAAO,CAAChB,MAAlB,CAApC;AAEAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BoB,cAA1B;AACArB,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBqB,aAApB;AAEA,QAAMC,OAAO,GAAGN,MAAM,CAACC,OAAP,CAAe;AAC7BM,IAAAA,GAAG,EAAE9B,MAAM,CAAC+B,MAAP,CAAc,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAiBA,OAAO,KAAK,MAA3C,EAAmDtB,MAD3B;AAE7BuB,IAAAA,EAAE,EAAEjC,MAAM,CAAC+B,MAAP,CAAc,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAiBA,OAAO,KAAK,OAA3C,EAAoDtB;AAF3B,GAAf,CAAhB;AAKA,QAAMwB,IAAI,GAAGX,MAAM,CAACC,OAAP,CAAe;AAC1BW,IAAAA,KAAK,EAAEnC,MAAM,CAAC+B,MAAP,CAAc,CAAC;AAAEK,MAAAA;AAAF,KAAD,KAAcA,IAAI,KAAK,OAArC,EAA8C1B,MAD3B;AAE1B2B,IAAAA,MAAM,EAAErC,MAAM,CAAC+B,MAAP,CAAc,CAAC;AAAEK,MAAAA;AAAF,KAAD,KAAcA,IAAI,KAAK,QAArC,EAA+C1B;AAF7B,GAAf,CAAb;AAKA,QAAM4B,aAAa,GAAG;AACpBC,IAAAA,OAAO,EAAE/B,cAAc,CAACqB,OAAD,EAAUA,OAAO,CAACnB,MAAlB,CADH;AAEpB8B,IAAAA,IAAI,EAAEhC,cAAc,CAAC0B,IAAD,EAAOA,IAAI,CAACxB,MAAZ,CAFA;AAGpB+B,IAAAA,SAAS,EAAEd,cAHS;AAIpBe,IAAAA,IAAI,EAAEd;AAJc,GAAtB;AAOA,QAAMe,GAAG,GAAGpB,MAAM,CAACC,OAAP,CAAec,aAAf,CAAZ;AAEAhC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBoC,GAApB;AACArC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBsB,OAAvB;AAEA,QAAMe,EAAE,GAAG,KAAX;AACA,SACE,4BACGA,EAAE,IAAI,WADT,EAEE,MAAC,eAAD,QACGD,GAAG,CAACE,GAAJ,CAAQ,CAAC,CAACC,KAAD,EAAQC,OAAR,CAAD,KACP;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,MAAC,SAAD;AAAW,IAAA,IAAI,MAAf;AAAgB,IAAA,OAAO,EAAE,KAAzB;AAAgC,IAAA,YAAY,EAAE,IAA9C;AAAoD,IAAA,KAAK,EAAED;AAA3D,KACE,mBACGC,OAAO,CAAC,WAAD,CAAP,CAAqBF,GAArB,CAAyB,CAAC,CAACG,GAAD,EAAM9B,KAAN,CAAD,KACxB;AAAK,IAAA,GAAG,EAAE8B;AAAV,KACE,MAAC,QAAD;AAAU,IAAA,YAAY,EAAE9C,YAAxB;AAAsC,IAAA,IAAI,EAAC;AAA3C,IADF,EAEI,GAAE8C,GAAI,IAAG9B,KAAM,GAFnB,CADD,CADH,CADF,CADF,EAWG6B,OAAO,CAAC,QAAD,CAAP,CAAkBrC,MAAlB,GAA2B,CAA3B,IACC,MAAC,SAAD;AAAW,IAAA,KAAK,EAAE,SAAlB;AAA6B,IAAA,WAAW,EAAE,IAA1C;AAAgD,IAAA,OAAO,EAAE;AAAzD,KACGqC,OAAO,CAAC,QAAD,CAAP,CAAkBF,GAAlB,CAAsB,CAAC,CAACG,GAAD,EAAM9B,KAAN,CAAD,KACrB;AAAK,IAAA,GAAG,EAAE8B;AAAV,KACE,MAAC,QAAD;AAAU,IAAA,YAAY,EAAE9C,YAAxB;AAAsC,IAAA,IAAI,EAAC;AAA3C,IADF,EAEI,GAAE8C,GAAI,IAAG9B,KAAM,GAFnB,CADD,CADH,CAZJ,CADD,CADH,CAFF,CADF;AA+BD,C,CAED;;;AACA,eAAe/B,KAAK,CAAC8D,IAAN,CAAWlD,YAAX,CAAf","sourcesContent":["import React, { useState, useContext } from 'react';\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined';\n\n//custom\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport wrapperIconHOC from '../../contentComponents/IconCTA/IconAction';\nimport { MoviesContext } from '../../../pages/index';\nimport { SSL_OP_EPHEMERAL_RSA } from 'constants';\n\n/* const all = Object.entries(generateFilters());\nconst displayed1 = all.slice(0, 5);\nconst hidden1 = all.slice(5, all.length); */\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\n\nconst CheckBox = wrapperIconHOC(\n  CheckBoxOutlineBlankOutlinedIcon,\n  CheckBoxOutlinedIcon\n);\n\nfunction FiltersGroup() {\n  const { movies, updateState } = useContext(MoviesContext);\n  /* const { Watched, Saved, Title, Poster: PosterURL, Ratings } = [...movies];\n  const movieStatus = {\n    watch: JSON.parse(Watched.toLowerCase()),\n    favorite: JSON.parse(Saved.toLowerCase()),\n  }; */\n\n  const callToAction = (state) => {\n    const { yes, no } = state;\n    updateState(yes ? 'True' : 'False');\n  };\n  console.log('movies', movies);\n\n  const displayFilters = (\n    ArrOfFilters: [string, unknown][],\n    length: number\n  ) => ({\n    displayed: ArrOfFilters.slice(0, 5),\n    hidden: ArrOfFilters.slice(5, length),\n  });\n\n  let metaScoreStrings = '';\n  const calculateMetaScore = (score: number) => {\n    if (score < 60) {\n      metaScoreStrings = 'below60';\n    }\n    if (score > 60 && score < 80) {\n      metaScoreStrings = 'between6080';\n    }\n    if (score > 80 && score < 90) {\n      metaScoreStrings = 'between8090';\n    }\n    if (score > 90) {\n      metaScoreStrings = 'abbove90';\n    }\n    return metaScoreStrings;\n  };\n\n  const generate = (value: string) => (obj: {}, element: {}) => {\n    if (value === 'Metascore')\n      obj = generateFilters(\n        calculateMetaScore(Number(element[value])),\n        movies.length\n      );\n    else {\n      obj = generateFilters(element[value], movies.length);\n    }\n    return obj;\n  };\n  const metasArr = Object.entries(movies.reduce(generate('Metascore'), {}));\n  const YearArr = Object.entries(movies.reduce(generate('Year'), {}));\n\n  const metasArrFormat = displayFilters(metasArr, metasArr.length);\n  const yearArrFormat = displayFilters(YearArr, YearArr.length);\n\n  console.log('metascores', metasArrFormat);\n  console.log('Year', yearArrFormat);\n\n  const watched = Object.entries({\n    YES: movies.filter(({ Watched }) => Watched === 'True').length,\n    NO: movies.filter(({ Watched }) => Watched === 'False').length,\n  });\n\n  const type = Object.entries({\n    MOVIE: movies.filter(({ Type }) => Type === 'movie').length,\n    SERIES: movies.filter(({ Type }) => Type === 'series').length,\n  });\n\n  const filtersLabels = {\n    WATCHED: displayFilters(watched, watched.length),\n    TYPE: displayFilters(type, type.length),\n    METASCORE: metasArrFormat,\n    YEAR: yearArrFormat,\n  };\n\n  const sss = Object.entries(filtersLabels);\n\n  console.log('ssss', sss);\n  console.log('watched', watched);\n\n  const ss = false;\n  return (\n    <>\n      {ss && '...loadin'}\n      <FilterContainer>\n        {sss.map(([title, filters]) => (\n          <div className=\"accordion\">\n            <Accordion open shevron={false} clickDisable={true} title={title}>\n              <div>\n                {filters['displayed'].map(([key, value]) => (\n                  <div key={key}>\n                    <CheckBox callToAction={callToAction} icon=\"yes\" />\n                    {`${key}(${value})`}\n                  </div>\n                ))}\n              </div>\n            </Accordion>\n            {filters['hidden'].length > 0 && (\n              <Accordion title={'...more'} directional={true} shevron={false}>\n                {filters['hidden'].map(([key, value]) => (\n                  <div key={key}>\n                    <CheckBox callToAction={callToAction} icon=\"no\" />\n                    {`${key}(${value})`}\n                  </div>\n                ))}\n              </Accordion>\n            )}\n          </div>\n        ))}\n      </FilterContainer>\n    </>\n  );\n}\n\n//make sure it render only the amount of movies.lenght\nexport default React.memo(FiltersGroup);\n"]},"metadata":{},"sourceType":"module"}