{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar actorsStringData = '';\nvar trackIndex = 1;\n\nvar generateFilters = function generateFilters(stringData, allMovies) {\n  //first combine actors results\n  var isComaSeperated = stringData.trim().includes(',') ? '' : ',';\n  actorsStringData += stringData + isComaSeperated;\n  console.log('actorsStringData', actorsStringData);\n\n  var allActors = _toConsumableArray(actorsStringData.split(','));\n\n  console.log('allActors', ss); //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the cod\n\n  function findDuplicate(arr) {\n    var object = {};\n    arr.forEach(function (item) {\n      var trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('trackIndex', trackIndex);\n\n  if (trackIndex === allMovies) {\n    var _ss = findDuplicate(allActors);\n\n    return _ss;\n  } else {\n    trackIndex++; //return;\n  }\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["actorsStringData","trackIndex","generateFilters","stringData","allMovies","isComaSeperated","trim","includes","console","log","allActors","split","ss","findDuplicate","arr","object","forEach","item","trimStirng"],"mappings":";AAAA,IAAIA,gBAAgB,GAAG,EAAvB;AACA,IAAIC,UAAU,GAAG,CAAjB;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,UAAD,EAAqBC,SAArB,EAA2C;AACjE;AACA,MAAMC,eAAe,GAAGF,UAAU,CAACG,IAAX,GAAkBC,QAAlB,CAA2B,GAA3B,IAAkC,EAAlC,GAAuC,GAA/D;AACAP,EAAAA,gBAAgB,IAAIG,UAAU,GAAGE,eAAjC;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCT,gBAAhC;;AAEA,MAAMU,SAAS,sBAAOV,gBAAgB,CAACW,KAAjB,CAAuB,GAAvB,CAAP,CAAf;;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBG,EAAzB,EARiE,CASjE;AACA;;AAEA,WAASC,aAAT,CAAuBC,GAAvB,EAAsC;AACpC,QAAMC,MAAM,GAAG,EAAf;AACAD,IAAAA,GAAG,CAACE,OAAJ,CAAY,UAAUC,IAAV,EAAwB;AAClC,UAAMC,UAAU,GAAGD,IAAI,CAACX,IAAL,EAAnB;AACA,UAAI,CAACS,MAAM,CAACG,UAAD,CAAX,EAAyBH,MAAM,CAACG,UAAD,CAAN,GAAqB,CAArB;AACzBH,MAAAA,MAAM,CAACG,UAAD,CAAN,IAAsB,CAAtB;AACD,KAJD;AAKA,WAAOH,MAAP;AACD;;AAEDP,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BR,UAA1B;;AACA,MAAIA,UAAU,KAAKG,SAAnB,EAA8B;AAC5B,QAAMQ,GAAE,GAAGC,aAAa,CAACH,SAAD,CAAxB;;AAEA,WAAOE,GAAP;AACD,GAJD,MAIO;AACLX,IAAAA,UAAU,GADL,CAEL;AACD;AACF,CA/BD;;AAiCA,SAASC,eAAT","sourcesContent":["let actorsStringData = '';\nlet trackIndex = 1;\nconst generateFilters = (stringData: string, allMovies: number) => {\n  //first combine actors results\n  const isComaSeperated = stringData.trim().includes(',') ? '' : ',';\n  actorsStringData += stringData + isComaSeperated;\n\n  console.log('actorsStringData', actorsStringData);\n\n  const allActors = [...actorsStringData.split(',')];\n  console.log('allActors', ss);\n  //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the cod\n\n  function findDuplicate(arr: string[]) {\n    const object = {};\n    arr.forEach(function (item: string) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('trackIndex', trackIndex);\n  if (trackIndex === allMovies) {\n    const ss = findDuplicate(allActors);\n\n    return ss;\n  } else {\n    trackIndex++;\n    //return;\n  }\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}