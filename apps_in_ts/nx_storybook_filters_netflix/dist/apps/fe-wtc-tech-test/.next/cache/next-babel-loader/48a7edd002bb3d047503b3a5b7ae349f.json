{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 100%;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: space-between;\\n  width: 100%;\\n  padding: 10px;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  max-width: 100%;\\n  height: auto;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  border-radius: 10px;\\n  width: 150px;\\n  margin: 0 auto;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  background-color: \", \";\\n  /* align-items: center; */\\n  min-width: 200px;\\n  min-height: 300px;\\n  border-radius: 20px;\\n  /* justify-content: center; */\\n  margin: 10px;\\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useReducer } from 'react';\nimport styled from 'styled-components';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'; //custom\n\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport wrapperIconHOC from '../Card/IconCTA/IconAction';\nvar cardColorMapping = {\n  \"default\": '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907'\n};\nvar CardContainer = styled.div(_templateObject(), function (props) {\n  return props.color || cardColorMapping[\"default\"];\n});\nvar Poster = styled.div(_templateObject2());\nvar PosterImage = styled.img(_templateObject3());\nvar CardHeader = styled.div(_templateObject4());\nvar CardFooter = styled.div(_templateObject5());\n/* ... inside the render or return of your component ... */\n\nvar VisibilityWatchedIcon = wrapperIconHOC(VisibilityIcon, VisibilityOffOutlinedIcon);\nvar VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon); //build card color object for each card\n\n/* const reducer = (people, action) => {\n\n  switch (action) {\n    case action.type == 'chomp':\n    case !watch && !favorite:\n  if(action.type == 'chomp') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = false;\n      }\n      return person;\n    })\n  }\n  if(action.type == 'revive') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = true;\n      }\n      return person;\n    })\n  }\n}\n */\n\nvar cardState = {\n  watch: false,\n  favorite: false\n};\nvar previousState;\n\nfunction Card(props) {\n  var Title = props.Title,\n      posterURL = props.Poster;\n\n  var _useState = useState(cardColorMapping[\"default\"]),\n      backgroundColor = _useState[0],\n      setBgColor = _useState[1];\n\n  var _useState2 = useState({\n    watch: false,\n    favorite: false\n  }),\n      colorState = _useState2[0],\n      setColorState = _useState2[1];\n\n  var _useReducer = useReducer(reducer, {\n    watch: false,\n    favorite: false\n  }),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var setColor = function setColor(_ref) {\n    var watch = _ref.watch,\n        favorite = _ref.favorite;\n\n    switch (true) {\n      case !watch && !favorite:\n        setBgColor(cardColorMapping[\"default\"]);\n        console.log('notWatchednotSaved');\n        break;\n\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        console.log('watchedNotSaved');\n        break;\n\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        console.log('savedNotWatched');\n        break;\n\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        console.log('watchedAndSaved');\n        break;\n    }\n  };\n\n  var callToAction = function callToAction(state) {\n    /* setColorState((prevState) => {\n      return { ...prevState, ...state };\n    }); */\n    //dispatch({ type: 'chomp', payload: state });\n    //console.log('state ', cardStateChange);\n  };\n\n  console.log('backgroundColor', backgroundColor);\n  return __jsx(CardContainer, {\n    color: backgroundColor\n  }, __jsx(CardHeader, null, __jsx(VisibilityWatchedIcon, {\n    callToAction: callToAction,\n    icon: \"watch\",\n    obj: {\n      watch: false,\n      favorite: false\n    }\n  }), __jsx(VisibilitySavedIcon, {\n    callToAction: callToAction,\n    icon: \"favorite\",\n    obj: {\n      watch: false,\n      favorite: false\n    }\n  })), __jsx(Poster, null, __jsx(PosterImage, {\n    src: posterURL,\n    alt: Title\n  })), __jsx(CardFooter, null, __jsx(RatingStarComp, {\n    rating: 20\n  })));\n}\n\nexport default Card;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/Card/Card.tsx"],"names":["React","useState","useReducer","styled","VisibilityIcon","VisibilityOffOutlinedIcon","FavoriteIcon","FavoriteBorderIcon","RatingStarComp","wrapperIconHOC","cardColorMapping","savedNotWatched","watchedAndSaved","watchedNotSaved","CardContainer","div","props","color","Poster","PosterImage","img","CardHeader","CardFooter","VisibilityWatchedIcon","VisibilitySavedIcon","cardState","watch","favorite","previousState","Card","Title","posterURL","backgroundColor","setBgColor","colorState","setColorState","reducer","state","dispatch","setColor","console","log","callToAction"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from 'react';\nimport styled from 'styled-components';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\n//custom\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport wrapperIconHOC from '../Card/IconCTA/IconAction';\n\ninterface CardColorChange {\n  color: string;\n}\n\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907',\n};\n\nconst CardContainer = styled.div<CardColorChange>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${(props) => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  min-width: 200px;\n  min-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\n\nconst PosterImage = styled.img`\n  max-width: 100%;\n  height: auto;\n`;\n\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px;\n`;\n\nconst CardFooter = styled.div`\n  width: 100%;\n`;\n\n/* ... inside the render or return of your component ... */\n\ninterface Props {\n  Title: string;\n  Poster: string;\n}\n\nconst VisibilityWatchedIcon = wrapperIconHOC(\n  VisibilityIcon,\n  VisibilityOffOutlinedIcon\n);\nconst VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon);\n\n//build card color object for each card\n\n/* const reducer = (people, action) => {\n\n  switch (action) {\n    case action.type == 'chomp':\n    case !watch && !favorite:\n  if(action.type == 'chomp') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = false;\n      }\n      return person;\n    })\n  }\n  if(action.type == 'revive') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = true;\n      }\n      return person;\n    })\n  }\n}\n */\nconst cardState = { watch: false, favorite: false };\nlet previousState: { watch: boolean; favorite: boolean };\nfunction Card(props: Props) {\n  const { Title, Poster: posterURL } = props;\n\n  const [backgroundColor, setBgColor] = useState(cardColorMapping.default);\n  const [colorState, setColorState] = useState({\n    watch: false,\n    favorite: false,\n  });\n\n  const [state, dispatch] = useReducer(reducer, {\n    watch: false,\n    favorite: false,\n  });\n\n  const setColor = ({ watch, favorite }) => {\n    switch (true) {\n      case !watch && !favorite:\n        setBgColor(cardColorMapping.default);\n        console.log('notWatchednotSaved');\n        break;\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        console.log('watchedNotSaved');\n        break;\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        console.log('savedNotWatched');\n        break;\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        console.log('watchedAndSaved');\n        break;\n    }\n  };\n\n  const callToAction = (state: object) => {\n    /* setColorState((prevState) => {\n      return { ...prevState, ...state };\n    }); */\n    //dispatch({ type: 'chomp', payload: state });\n    //console.log('state ', cardStateChange);\n  };\n  console.log('backgroundColor', backgroundColor);\n  return (\n    <CardContainer color={backgroundColor}>\n      <CardHeader>\n        <VisibilityWatchedIcon\n          callToAction={callToAction}\n          icon=\"watch\"\n          obj={{\n            watch: false,\n            favorite: false,\n          }}\n        />\n        <VisibilitySavedIcon\n          callToAction={callToAction}\n          icon=\"favorite\"\n          obj={{\n            watch: false,\n            favorite: false,\n          }}\n        />\n      </CardHeader>\n      <Poster>\n        <PosterImage src={posterURL} alt={Title} />\n      </Poster>\n      <CardFooter>\n        <RatingStarComp rating={20} />\n      </CardFooter>\n    </CardContainer>\n  );\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}