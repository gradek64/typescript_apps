{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined'; //custom\n\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport wrapperIconHOC from '../../contentComponents/IconCTA/IconAction';\nimport { MoviesContext } from '../../../pages/index';\n\n/* const all = Object.entries(generateFilters());\nconst displayed1 = all.slice(0, 5);\nconst hidden1 = all.slice(5, all.length); */\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\nconst CheckBox = wrapperIconHOC(CheckBoxOutlineBlankOutlinedIcon, CheckBoxOutlinedIcon);\n\nfunction FiltersGroup() {\n  const {\n    movies,\n    updateState\n  } = useContext(MoviesContext);\n  /* const { Watched, Saved, Title, Poster: PosterURL, Ratings } = [...movies];\n  const movieStatus = {\n    watch: JSON.parse(Watched.toLowerCase()),\n    favorite: JSON.parse(Saved.toLowerCase()),\n  }; */\n\n  const callToAction = state => {\n    const {\n      yes,\n      no\n    } = state;\n    updateState(yes ? 'True' : 'False');\n  };\n\n  console.log('movies', movies);\n\n  const displayFilters = (ArrOfFilters, length) => ({\n    displayed: ArrOfFilters.slice(0, 5),\n    hidden: ArrOfFilters.slice(5, length)\n  });\n\n  let metaScoreStrings = '';\n\n  const calculateMetaScore = score => {\n    if (score < 60) {\n      metaScoreStrings += 'below60';\n    }\n\n    if (score > 60 && score < 80) {\n      metaScoreStrings += 'between6080';\n    }\n\n    if (score > 80 && score < 90) {\n      metaScoreStrings += 'between8090';\n    }\n\n    if (score > 90) {\n      metaScoreStrings += 'abbove90';\n    }\n\n    return metaScoreStrings;\n  };\n\n  const watched = Object.entries({\n    YES: movies.filter(({\n      Watched\n    }) => Watched === 'True').length,\n    NO: movies.filter(({\n      Watched\n    }) => Watched === 'False').length\n  });\n  const type = Object.entries({\n    MOVIE: movies.filter(({\n      Type\n    }) => Type === 'movie').length,\n    SERIES: movies.filter(({\n      Type\n    }) => Type === 'series').length\n  });\n  /*  const actorsFilters = movies.reduce((obj, { Actors }) => {\n    obj = generateFilters(Actors, movies.length);\n    return obj;\n  }, {});\n   const entries = Object.entries(actorsFilters);\n  const dd = displayFilters(entries, entries.length);\n  console.log('displayed', dd); */\n\n  const actorsFilters = movies.reduce((obj, {\n    Year,\n    Metascore\n  }) => {\n    const ss = calculateMetaScore(Number(Metascore));\n    obj = generateFilters(ss, movies.length);\n    return obj;\n  }, {});\n  console.log('actorsFilters', actorsFilters); //const entries = Object.entries(actorsFilters);\n\n  /*  const displayed = watched.slice(0, 5);\n  const hidden = watched.slice(5, all.length); */\n\n  /* const FilterLabel = {\n    watched,\n    type,\n    actors:generateFilters()\n  }; */\n\n  const ss = true;\n  return __jsx(React.Fragment, null, ss && '...loadin', __jsx(FilterContainer, null, ['watched'].map(title => __jsx(\"div\", {\n    className: \"accordion\"\n  }, __jsx(Accordion, {\n    open: true,\n    shevron: false,\n    clickDisable: true,\n    title: title\n  }, __jsx(\"div\", null, [].map(([key, value]) => __jsx(\"div\", {\n    key: key\n  }, __jsx(CheckBox, {\n    callToAction: callToAction,\n    icon: \"yes\"\n  }), `${key}(${value})`)))), [].length > 0 && __jsx(Accordion, {\n    title: '...more',\n    directional: true,\n    shevron: false\n  }, [].map(([key, value]) => __jsx(\"div\", {\n    key: key\n  }, __jsx(CheckBox, {\n    callToAction: callToAction,\n    icon: \"no\"\n  }), `${key}(${value})`)))))));\n} //make sure it render only the amount of movies.lenght\n\n\nexport default React.memo(FiltersGroup);","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/FiltersGroup.tsx"],"names":["React","useContext","CheckBoxOutlineBlankOutlinedIcon","CheckBoxOutlinedIcon","Accordion","generateFilters","styled","wrapperIconHOC","MoviesContext","FilterContainer","div","CheckBox","FiltersGroup","movies","updateState","callToAction","state","yes","no","console","log","displayFilters","ArrOfFilters","length","displayed","slice","hidden","metaScoreStrings","calculateMetaScore","score","watched","Object","entries","YES","filter","Watched","NO","type","MOVIE","Type","SERIES","actorsFilters","reduce","obj","Year","Metascore","ss","Number","map","title","key","value","memo"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined';\n\n//custom\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport wrapperIconHOC from '../../contentComponents/IconCTA/IconAction';\nimport { MoviesContext } from '../../../pages/index';\nimport { SSL_OP_EPHEMERAL_RSA } from 'constants';\n\n/* const all = Object.entries(generateFilters());\nconst displayed1 = all.slice(0, 5);\nconst hidden1 = all.slice(5, all.length); */\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\n\nconst CheckBox = wrapperIconHOC(\n  CheckBoxOutlineBlankOutlinedIcon,\n  CheckBoxOutlinedIcon\n);\n\nfunction FiltersGroup() {\n  const { movies, updateState } = useContext(MoviesContext);\n  /* const { Watched, Saved, Title, Poster: PosterURL, Ratings } = [...movies];\n  const movieStatus = {\n    watch: JSON.parse(Watched.toLowerCase()),\n    favorite: JSON.parse(Saved.toLowerCase()),\n  }; */\n\n  const callToAction = (state) => {\n    const { yes, no } = state;\n    updateState(yes ? 'True' : 'False');\n  };\n  console.log('movies', movies);\n\n  const displayFilters = (\n    ArrOfFilters: [string, unknown][],\n    length: number\n  ) => ({\n    displayed: ArrOfFilters.slice(0, 5),\n    hidden: ArrOfFilters.slice(5, length),\n  });\n\n  let metaScoreStrings = '';\n  const calculateMetaScore = (score: number) => {\n    if (score < 60) {\n      metaScoreStrings += 'below60';\n    }\n    if (score > 60 && score < 80) {\n      metaScoreStrings += 'between6080';\n    }\n    if (score > 80 && score < 90) {\n      metaScoreStrings += 'between8090';\n    }\n    if (score > 90) {\n      metaScoreStrings += 'abbove90';\n    }\n    return metaScoreStrings;\n  };\n\n  const watched = Object.entries({\n    YES: movies.filter(({ Watched }) => Watched === 'True').length,\n    NO: movies.filter(({ Watched }) => Watched === 'False').length,\n  });\n\n  const type = Object.entries({\n    MOVIE: movies.filter(({ Type }) => Type === 'movie').length,\n    SERIES: movies.filter(({ Type }) => Type === 'series').length,\n  });\n\n  /*  const actorsFilters = movies.reduce((obj, { Actors }) => {\n    obj = generateFilters(Actors, movies.length);\n    return obj;\n  }, {});\n\n  const entries = Object.entries(actorsFilters);\n  const dd = displayFilters(entries, entries.length);\n  console.log('displayed', dd); */\n\n  const actorsFilters = movies.reduce((obj, { Year, Metascore }) => {\n    const ss = calculateMetaScore(Number(Metascore));\n\n    obj = generateFilters(ss, movies.length);\n    return obj;\n  }, {});\n\n  console.log('actorsFilters', actorsFilters);\n\n  //const entries = Object.entries(actorsFilters);\n\n  /*  const displayed = watched.slice(0, 5);\n  const hidden = watched.slice(5, all.length); */\n\n  /* const FilterLabel = {\n    watched,\n    type,\n    actors:generateFilters()\n  }; */\n\n  const ss = true;\n  return (\n    <>\n      {ss && '...loadin'}\n      <FilterContainer>\n        {['watched'].map((title) => (\n          <div className=\"accordion\">\n            <Accordion open shevron={false} clickDisable={true} title={title}>\n              <div>\n                {[].map(([key, value]) => (\n                  <div key={key}>\n                    <CheckBox callToAction={callToAction} icon=\"yes\" />\n                    {`${key}(${value})`}\n                  </div>\n                ))}\n              </div>\n            </Accordion>\n            {[].length > 0 && (\n              <Accordion title={'...more'} directional={true} shevron={false}>\n                {[].map(([key, value]) => (\n                  <div key={key}>\n                    <CheckBox callToAction={callToAction} icon=\"no\" />\n                    {`${key}(${value})`}\n                  </div>\n                ))}\n              </Accordion>\n            )}\n          </div>\n        ))}\n      </FilterContainer>\n    </>\n  );\n}\n\n//make sure it render only the amount of movies.lenght\nexport default React.memo(FiltersGroup);\n"]},"metadata":{},"sourceType":"module"}