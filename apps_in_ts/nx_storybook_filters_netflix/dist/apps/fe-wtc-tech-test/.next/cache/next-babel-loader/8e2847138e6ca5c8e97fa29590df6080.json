{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'; //custom\n\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport wrapperIconHOC from '../Card/IconCTA/IconAction';\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907'\n};\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${props => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  min-width: 200px;\n  min-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\nconst PosterImage = styled.img`\n  max-width: 100%;\n  height: auto;\n`;\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px;\n`;\nconst CardFooter = styled.div`\n  width: 100%;\n`;\n/* ... inside the render or return of your component ... */\n\nconst VisibilityWatchedIcon = wrapperIconHOC(VisibilityIcon, VisibilityOffOutlinedIcon);\nconst VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon); //build card color object for each card\n\n/* const reducer = (people, action) => {\n\n  switch (action) {\n    case action.type == 'chomp':\n    case !watch && !favorite:\n  if(action.type == 'chomp') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = false;\n      }\n      return person;\n    })\n  }\n  if(action.type == 'revive') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = true;\n      }\n      return person;\n    })\n  }\n}\n */\n\n/* const cardState = { watch: false, favorite: false };*/\n\nlet previousState;\n\nfunction Card(props) {\n  const {\n    Title,\n    Poster: posterURL\n  } = props;\n  const {\n    0: backgroundColor,\n    1: setBgColor\n  } = useState(cardColorMapping.default);\n  /*  const [colorState, setColorState] = useState({\n    watch: false,\n    favorite: false,\n  }); */\n\n  /* const [state, dispatch] = useReducer(reducer, {\n    watch: false,\n    favorite: false,\n  }); */\n\n  const setColor = ({\n    watch,\n    favorite\n  }) => {\n    switch (true) {\n      case !watch && !favorite:\n        //setBgColor(cardColorMapping.default);\n        console.log('notWatchednotSaved');\n        return 'white';\n\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        console.log('watchedNotSaved');\n        return 'white';\n\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        console.log('savedNotWatched');\n        return 'white';\n\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        console.log('watchedAndSaved');\n        return 'white';\n    }\n  };\n\n  const callToAction = state => {\n    setColorState(prevState => {\n      return _objectSpread({}, prevState, {}, state);\n    }); //dispatch({ type: 'chomp', payload: state });\n    //console.log('state ', cardStateChange);\n\n    console.log('state', state);\n    previousState;\n  };\n\n  return __jsx(CardContainer, {\n    color: setColor()\n  }, __jsx(CardHeader, null, __jsx(VisibilityWatchedIcon, {\n    callToAction: callToAction,\n    icon: \"watch\",\n    obj: {\n      watch: false,\n      favorite: false\n    }\n  }), __jsx(VisibilitySavedIcon, {\n    callToAction: callToAction,\n    icon: \"favorite\",\n    obj: {\n      watch: false,\n      favorite: false\n    }\n  })), __jsx(Poster, null, __jsx(PosterImage, {\n    src: posterURL,\n    alt: Title\n  })), __jsx(CardFooter, null, __jsx(RatingStarComp, {\n    rating: 20\n  })));\n}\n\nexport default Card;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/Card/Card.tsx"],"names":["React","useState","styled","VisibilityIcon","VisibilityOffOutlinedIcon","FavoriteIcon","FavoriteBorderIcon","RatingStarComp","wrapperIconHOC","cardColorMapping","default","savedNotWatched","watchedAndSaved","watchedNotSaved","CardContainer","div","props","color","Poster","PosterImage","img","CardHeader","CardFooter","VisibilityWatchedIcon","VisibilitySavedIcon","previousState","Card","Title","posterURL","backgroundColor","setBgColor","setColor","watch","favorite","console","log","callToAction","state","setColorState","prevState"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from 'react';\nimport styled from 'styled-components';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\n//custom\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport wrapperIconHOC from '../Card/IconCTA/IconAction';\n\ninterface CardColorChange {\n  color: string;\n}\n\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907',\n};\n\nconst CardContainer = styled.div<CardColorChange>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${(props) => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  min-width: 200px;\n  min-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\n\nconst PosterImage = styled.img`\n  max-width: 100%;\n  height: auto;\n`;\n\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px;\n`;\n\nconst CardFooter = styled.div`\n  width: 100%;\n`;\n\n/* ... inside the render or return of your component ... */\n\ninterface Props {\n  Title: string;\n  Poster: string;\n}\n\nconst VisibilityWatchedIcon = wrapperIconHOC(\n  VisibilityIcon,\n  VisibilityOffOutlinedIcon\n);\nconst VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon);\n\n//build card color object for each card\n\n/* const reducer = (people, action) => {\n\n  switch (action) {\n    case action.type == 'chomp':\n    case !watch && !favorite:\n  if(action.type == 'chomp') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = false;\n      }\n      return person;\n    })\n  }\n  if(action.type == 'revive') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = true;\n      }\n      return person;\n    })\n  }\n}\n */\n/* const cardState = { watch: false, favorite: false };*/\nlet previousState: { watch: boolean; favorite: boolean };\nfunction Card(props: Props) {\n  const { Title, Poster: posterURL } = props;\n\n  const [backgroundColor, setBgColor] = useState(cardColorMapping.default);\n  /*  const [colorState, setColorState] = useState({\n    watch: false,\n    favorite: false,\n  }); */\n\n  /* const [state, dispatch] = useReducer(reducer, {\n    watch: false,\n    favorite: false,\n  }); */\n\n  const setColor = ({ watch, favorite }) => {\n    switch (true) {\n      case !watch && !favorite:\n        //setBgColor(cardColorMapping.default);\n        console.log('notWatchednotSaved');\n        return 'white';\n      case watch && !favorite:\n        setBgColor(cardColorMapping.watchedNotSaved);\n        console.log('watchedNotSaved');\n        return 'white';\n      case !watch && favorite:\n        setBgColor(cardColorMapping.savedNotWatched);\n        console.log('savedNotWatched');\n        return 'white';\n      case watch && favorite:\n        setBgColor(cardColorMapping.watchedAndSaved);\n        console.log('watchedAndSaved');\n        return 'white';\n    }\n  };\n\n  const callToAction = (state: object) => {\n    setColorState((prevState) => {\n      return { ...prevState, ...state };\n    });\n    //dispatch({ type: 'chomp', payload: state });\n    //console.log('state ', cardStateChange);\n    console.log('state', state);\n    previousState;\n  };\n\n  return (\n    <CardContainer color={setColor()}>\n      <CardHeader>\n        <VisibilityWatchedIcon\n          callToAction={callToAction}\n          icon=\"watch\"\n          obj={{\n            watch: false,\n            favorite: false,\n          }}\n        />\n        <VisibilitySavedIcon\n          callToAction={callToAction}\n          icon=\"favorite\"\n          obj={{\n            watch: false,\n            favorite: false,\n          }}\n        />\n      </CardHeader>\n      <Poster>\n        <PosterImage src={posterURL} alt={Title} />\n      </Poster>\n      <CardFooter>\n        <RatingStarComp rating={20} />\n      </CardFooter>\n    </CardContainer>\n  );\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}