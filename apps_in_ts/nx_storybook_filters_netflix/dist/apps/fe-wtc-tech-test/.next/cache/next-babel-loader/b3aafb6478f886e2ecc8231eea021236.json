{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar generateFilters = function generateFilters() {\n  var actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  var actors2 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  var actors3 = 'Harrison Ford';\n  var actors4 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed'; //first combine actors results\n\n  var allActors = [].concat(_toConsumableArray(actors.split(',')), _toConsumableArray(actors2.split(',')), _toConsumableArray(actors3.split(',')), _toConsumableArray(actors4.split(',')));\n  var filteredActors = [];\n  var duplicatesdActors = []; //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  /* const ss = allActors.map((actor) => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n      duplicatesdActors.push(actor);\n    }\n     if (duplicatesdActors.length > 0) {\n      filteredActors.push(duplicatesdActors);\n      //do it again for the first actor on first interation\n      if (allActors.includes(duplicatesdActors[0])) {\n        console.log('duplicate actor', actor);\n        duplicatesdActors.push(actor);\n      }\n      duplicatesdActors = [];\n    } else {\n      filteredActors.push(actor);\n       console.log('filteredActors', filteredActors);\n    }\n  }); */\n\n  function findDuplicate(arra1) {\n    var object = {};\n    arra1.forEach(function (item) {\n      var trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('duplicate', findDuplicate(allActors));\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["generateFilters","actors","actors2","actors3","actors4","allActors","filteredActors","duplicatesdActors","object","arra1","trimStirng","item","console","findDuplicate"],"mappings":";;AAAA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,MAAMC,MAAM,GAAZ,6DAAA;AACA,MAAMC,OAAO,GAAb,4EAAA;AAEA,MAAMC,OAAO,GAAb,eAAA;AACA,MAAMC,OAAO,GALe,4EAK5B,CAL4B,CAQ5B;;AAEA,MAAMC,SAAS,GAAA,GAAA,MAAA,CAAA,kBAAA,CACVJ,MAAM,CAANA,KAAAA,CADU,GACVA,CADU,CAAA,EAAA,kBAAA,CAEVC,OAAO,CAAPA,KAAAA,CAFU,GAEVA,CAFU,CAAA,EAAA,kBAAA,CAGVC,OAAO,CAAPA,KAAAA,CAHU,GAGVA,CAHU,CAAA,EAAA,kBAAA,CAIVC,OAAO,CAAPA,KAAAA,CAJL,GAIKA,CAJU,CAAA,CAAf;AAMA,MAAME,cAAc,GAApB,EAAA;AACA,MAAIC,iBAAiB,GAjBO,EAiB5B,CAjB4B,CAkB5B;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AAsBA,WAAA,aAAA,CAAA,KAAA,EAAwC;AACtC,QAAMC,MAAM,GAAZ,EAAA;AACAC,IAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,IAAA,EAAwB;AACpC,UAAMC,UAAU,GAAGC,IAAI,CAAvB,IAAmBA,EAAnB;AACA,UAAI,CAACH,MAAM,CAAX,UAAW,CAAX,EAAyBA,MAAM,CAANA,UAAM,CAANA,GAAAA,CAAAA;AACzBA,MAAAA,MAAM,CAANA,UAAM,CAANA,IAAAA,CAAAA;AAHFC,KAAAA;AAKA,WAAA,MAAA;AACD;;AAEDG,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,WAAAA,EAAyBC,aAAa,CAAtCD,SAAsC,CAAtCA;AArDF,CAAA;;AAwDA,SAAA,eAAA","sourcesContent":["const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  const actors3 = 'Harrison Ford';\n  const actors4 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n\n  //first combine actors results\n\n  const allActors = [\n    ...actors.split(','),\n    ...actors2.split(','),\n    ...actors3.split(','),\n    ...actors4.split(','),\n  ];\n  const filteredActors = [];\n  let duplicatesdActors = [];\n  //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  /* const ss = allActors.map((actor) => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n      duplicatesdActors.push(actor);\n    }\n\n    if (duplicatesdActors.length > 0) {\n      filteredActors.push(duplicatesdActors);\n      //do it again for the first actor on first interation\n      if (allActors.includes(duplicatesdActors[0])) {\n        console.log('duplicate actor', actor);\n        duplicatesdActors.push(actor);\n      }\n      duplicatesdActors = [];\n    } else {\n      filteredActors.push(actor);\n\n      console.log('filteredActors', filteredActors);\n    }\n  }); */\n\n  function findDuplicate(arra1: string[]) {\n    const object = {};\n    arra1.forEach(function (item: string) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('duplicate', findDuplicate(allActors));\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}