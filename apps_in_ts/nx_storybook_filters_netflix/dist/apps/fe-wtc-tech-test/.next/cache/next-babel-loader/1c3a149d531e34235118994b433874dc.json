{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar generateFilters = function generateFilters() {\n  var actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  var actors2 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  var actors3 = 'Harrison Ford'; //first combine actors results\n\n  var allActors = [].concat(_toConsumableArray(actors.split(',')), _toConsumableArray(actors2.split(',')), _toConsumableArray(actors3.split(',')));\n  var filteredActors = [];\n  var duplicatesdActors = []; //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  /* const ss = allActors.map((actor) => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n      duplicatesdActors.push(actor);\n    }\n     if (duplicatesdActors.length > 0) {\n      filteredActors.push(duplicatesdActors);\n      //do it again for the first actor on first interation\n      if (allActors.includes(duplicatesdActors[0])) {\n        console.log('duplicate actor', actor);\n        duplicatesdActors.push(actor);\n      }\n      duplicatesdActors = [];\n    } else {\n      filteredActors.push(actor);\n       console.log('filteredActors', filteredActors);\n    }\n  }); */\n\n  function findDuplicate(arra1) {\n    var object = {};\n    var result = [];\n    arra1.forEach(function (item) {\n      if (!object[item]) object[item] = 0;\n      object[item] += 1;\n    });\n\n    for (var prop in object) {\n      if (object[prop] >= 2) {\n        result.push(prop);\n      }\n    }\n\n    return result;\n  }\n\n  console.log('duplicate', findDuplicate(allActors));\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["generateFilters","actors","actors2","actors3","allActors","split","filteredActors","duplicatesdActors","findDuplicate","arra1","object","result","forEach","item","prop","push","console","log"],"mappings":";;AAAA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,MAAMC,MAAM,GAAG,6DAAf;AACA,MAAMC,OAAO,GACX,4EADF;AAEA,MAAMC,OAAO,GAAG,eAAhB,CAJ4B,CAM5B;;AAEA,MAAMC,SAAS,gCACVH,MAAM,CAACI,KAAP,CAAa,GAAb,CADU,sBAEVH,OAAO,CAACG,KAAR,CAAc,GAAd,CAFU,sBAGVF,OAAO,CAACE,KAAR,CAAc,GAAd,CAHU,EAAf;AAKA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,iBAAiB,GAAG,EAAxB,CAd4B,CAe5B;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AAsBA,WAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AAEAF,IAAAA,KAAK,CAACG,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC5B,UAAI,CAACH,MAAM,CAACG,IAAD,CAAX,EAAmBH,MAAM,CAACG,IAAD,CAAN,GAAe,CAAf;AACnBH,MAAAA,MAAM,CAACG,IAAD,CAAN,IAAgB,CAAhB;AACD,KAHD;;AAKA,SAAK,IAAMC,IAAX,IAAmBJ,MAAnB,EAA2B;AACzB,UAAIA,MAAM,CAACI,IAAD,CAAN,IAAgB,CAApB,EAAuB;AACrBH,QAAAA,MAAM,CAACI,IAAP,CAAYD,IAAZ;AACD;AACF;;AAED,WAAOH,MAAP;AACD;;AAEDK,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBT,aAAa,CAACJ,SAAD,CAAtC;AACD,CA3DD;;AA6DA,SAASJ,eAAT","sourcesContent":["const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  const actors3 = 'Harrison Ford';\n\n  //first combine actors results\n\n  const allActors = [\n    ...actors.split(','),\n    ...actors2.split(','),\n    ...actors3.split(','),\n  ];\n  const filteredActors = [];\n  let duplicatesdActors = [];\n  //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  /* const ss = allActors.map((actor) => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n      duplicatesdActors.push(actor);\n    }\n\n    if (duplicatesdActors.length > 0) {\n      filteredActors.push(duplicatesdActors);\n      //do it again for the first actor on first interation\n      if (allActors.includes(duplicatesdActors[0])) {\n        console.log('duplicate actor', actor);\n        duplicatesdActors.push(actor);\n      }\n      duplicatesdActors = [];\n    } else {\n      filteredActors.push(actor);\n\n      console.log('filteredActors', filteredActors);\n    }\n  }); */\n\n  function findDuplicate(arra1) {\n    const object = {};\n    const result = [];\n\n    arra1.forEach(function (item) {\n      if (!object[item]) object[item] = 0;\n      object[item] += 1;\n    });\n\n    for (const prop in object) {\n      if (object[prop] >= 2) {\n        result.push(prop);\n      }\n    }\n\n    return result;\n  }\n\n  console.log('duplicate', findDuplicate(allActors));\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}