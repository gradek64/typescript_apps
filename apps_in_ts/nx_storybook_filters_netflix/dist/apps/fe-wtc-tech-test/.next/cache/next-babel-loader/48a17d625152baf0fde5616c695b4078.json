{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nexport var calculateAvarageRatings = function calculateAvarageRatings(Ratings) {\n  var percentageValue = [];\n  var overAllPerc = Ratings.map(function (_ref) {\n    var Value = _ref.Value;\n    return Value;\n  }).reduce(function (avaragePerc, rating, index) {\n    if (rating.includes('/')) {\n      var _rating$split$map = rating.split('/').map(function (value) {\n        return Number(value);\n      }),\n          _rating$split$map2 = _slicedToArray(_rating$split$map, 2),\n          all = _rating$split$map2[0],\n          ratio = _rating$split$map2[1];\n\n      var calcPercentage = all / ratio * 100;\n      percentageValue.push(calcPercentage);\n    }\n\n    if (rating.includes('%')) {\n      var value = rating.match(/\\d+/)[0];\n      var percentage = Number(value);\n      percentageValue.push(percentage);\n    }\n\n    if (index === Ratings.length - 1) {\n      var sumPercentage = percentageValue.reduce(function (acc, value) {\n        return acc + value;\n      });\n      avaragePerc = sumPercentage / Ratings.length;\n      return avaragePerc;\n    }\n\n    return 0;\n  }, 0);\n  return overAllPerc;\n};","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/Card/CardUtills/calculateAvarageRating.ts"],"names":["calculateAvarageRatings","Ratings","percentageValue","overAllPerc","map","Value","reduce","avaragePerc","rating","index","includes","split","value","Number","all","ratio","calcPercentage","push","match","percentage","length","sumPercentage","acc"],"mappings":";AAAA,OAAO,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,OAAD,EAAmB;AACxD,MAAMC,eAAyB,GAAG,EAAlC;AAEA,MAAMC,WAAW,GAAGF,OAAO,CAACG,GAAR,CAClB;AAAA,QAAGC,KAAH,QAAGA,KAAH;AAAA,WAAkCA,KAAlC;AAAA,GADkB,EAElBC,MAFkB,CAEX,UAACC,WAAD,EAAcC,MAAd,EAAsBC,KAAtB,EAAgC;AACvC,QAAID,MAAM,CAACE,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AAAA,8BACHF,MAAM,CAACG,KAAP,CAAa,GAAb,EAAkBP,GAAlB,CAAsB,UAACQ,KAAD;AAAA,eAAWC,MAAM,CAACD,KAAD,CAAjB;AAAA,OAAtB,CADG;AAAA;AAAA,UACjBE,GADiB;AAAA,UACZC,KADY;;AAExB,UAAMC,cAAc,GAAIF,GAAG,GAAGC,KAAP,GAAgB,GAAvC;AACAb,MAAAA,eAAe,CAACe,IAAhB,CAAqBD,cAArB;AACD;;AAED,QAAIR,MAAM,CAACE,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AACxB,UAAME,KAAK,GAAGJ,MAAM,CAACU,KAAP,CAAa,KAAb,EAAoB,CAApB,CAAd;AACA,UAAMC,UAAU,GAAGN,MAAM,CAACD,KAAD,CAAzB;AACAV,MAAAA,eAAe,CAACe,IAAhB,CAAqBE,UAArB;AACD;;AAED,QAAIV,KAAK,KAAKR,OAAO,CAACmB,MAAR,GAAiB,CAA/B,EAAkC;AAChC,UAAMC,aAAa,GAAGnB,eAAe,CAACI,MAAhB,CAAuB,UAACgB,GAAD,EAAMV,KAAN;AAAA,eAAgBU,GAAG,GAAGV,KAAtB;AAAA,OAAvB,CAAtB;AAEAL,MAAAA,WAAW,GAAGc,aAAa,GAAGpB,OAAO,CAACmB,MAAtC;AACA,aAAOb,WAAP;AACD;;AACD,WAAO,CAAP;AACD,GAtBmB,EAsBjB,CAtBiB,CAApB;AAwBA,SAAOJ,WAAP;AACD,CA5BM","sourcesContent":["export const calculateAvarageRatings = (Ratings: {}[]) => {\n  const percentageValue: number[] = [];\n\n  const overAllPerc = Ratings.map(\n    ({ Value }: { Value: string }) => Value\n  ).reduce((avaragePerc, rating, index) => {\n    if (rating.includes('/')) {\n      const [all, ratio] = rating.split('/').map((value) => Number(value));\n      const calcPercentage = (all / ratio) * 100;\n      percentageValue.push(calcPercentage);\n    }\n\n    if (rating.includes('%')) {\n      const value = rating.match(/\\d+/)[0];\n      const percentage = Number(value);\n      percentageValue.push(percentage);\n    }\n\n    if (index === Ratings.length - 1) {\n      const sumPercentage = percentageValue.reduce((acc, value) => acc + value);\n\n      avaragePerc = sumPercentage / Ratings.length;\n      return avaragePerc;\n    }\n    return 0;\n  }, 0);\n\n  return overAllPerc;\n};\n"]},"metadata":{},"sourceType":"module"}