{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-wrap: wrap;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\nvar Movies = styled.div(_templateObject());\n\nvar Home = function Home() {\n  var _useState = useState([]),\n      movies = _useState[0],\n      getMovies = _useState[1];\n\n  var calculateAvarageRatings = function calculateAvarageRatings(Ratings) {\n    var overAllPerc = Ratings.map(function (_ref) {\n      var Value = _ref.Value;\n      return Value;\n    }).reduce(function (avaragePerc, rating, index) {\n      var percentageValue = [];\n\n      if (rating.includes('/')) {\n        var _rating$split$map = rating.split('/').map(function (value) {\n          return Number(value);\n        }),\n            _rating$split$map2 = _slicedToArray(_rating$split$map, 2),\n            all = _rating$split$map2[0],\n            ratio = _rating$split$map2[1];\n\n        console.log([all, ratio]);\n        console.log('[all, ratio]', all / ratio);\n        var calcPercentage = all / ratio;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        var value = rating.match(/\\d+/)[0];\n        var percentage = Number(value);\n        console.log('percentage', percentage);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        var sumPercentage = percentageValue.reduce(function (acc, value) {\n          return acc + value;\n        });\n        console.log('percentageValue', percentageValue);\n        console.log('avaragePerc', sumPercentage);\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n    return overAllPerc;\n  };\n\n  var reduceData = function reduceData(response) {\n    return response.map(function (_ref2) {\n      var Title = _ref2.Title,\n          Poster = _ref2.Poster,\n          Ratings = _ref2.Ratings;\n      var averageRatings = calculateAvarageRatings([{\n        Source: 'Internet Movie Database',\n        Value: '8.1/10'\n      }, {\n        Source: 'Rotten Tomatoes',\n        Value: '85%'\n      }, {\n        Source: 'Metacritic',\n        Value: '69/100'\n      }]);\n      console.log('averageRatings', averageRatings);\n      return {\n        Title: Title,\n        Poster: Poster,\n        averageRatings: averageRatings\n      };\n    });\n  };\n\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var result;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(generalAPIService.get('/api/movies'));\n\n            case 2:\n              result = _context.sent;\n              console.log('result', result);\n              getMovies(reduceData(result));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchData();\n  }, []);\n  return __jsx(\"main\", null, __jsx(Movies, null, movies.map(function (fields) {\n    return __jsx(Card, _extends({}, fields, {\n      key: fields.Title\n    }));\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["React","useEffect","useState","styled","Card","generalAPIService","Movies","div","Home","movies","getMovies","calculateAvarageRatings","Ratings","overAllPerc","map","Value","reduce","avaragePerc","rating","index","percentageValue","includes","split","value","Number","all","ratio","console","log","calcPercentage","push","match","percentage","length","sumPercentage","acc","reduceData","response","Title","Poster","averageRatings","Source","fetchData","get","result","fields"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,iBAAP,MAA8B,uBAA9B;AAEA,IAAMC,MAAM,GAAGH,MAAM,CAACI,GAAV,mBAAZ;;AAKA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,kBACWN,QAAQ,CAAC,EAAD,CADnB;AAAA,MACVO,MADU;AAAA,MACFC,SADE;;AASjB,MAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,OAAD,EAAmB;AACjD,QAAMC,WAAW,GAAGD,OAAO,CAACE,GAAR,CAClB;AAAA,UAAGC,KAAH,QAAGA,KAAH;AAAA,aAAkCA,KAAlC;AAAA,KADkB,EAElBC,MAFkB,CAEX,UAACC,WAAD,EAAcC,MAAd,EAAsBC,KAAtB,EAAgC;AACvC,UAAMC,eAAyB,GAAG,EAAlC;;AAEA,UAAIF,MAAM,CAACG,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AAAA,gCACHH,MAAM,CAACI,KAAP,CAAa,GAAb,EAAkBR,GAAlB,CAAsB,UAACS,KAAD;AAAA,iBAAWC,MAAM,CAACD,KAAD,CAAjB;AAAA,SAAtB,CADG;AAAA;AAAA,YACjBE,GADiB;AAAA,YACZC,KADY;;AAExBC,QAAAA,OAAO,CAACC,GAAR,CAAY,CAACH,GAAD,EAAMC,KAAN,CAAZ;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,GAAG,GAAGC,KAAlC;AACA,YAAMG,cAAc,GAAGJ,GAAG,GAAGC,KAA7B;AACAN,QAAAA,eAAe,CAACU,IAAhB,CAAqBD,cAArB;AACD;;AAED,UAAIX,MAAM,CAACG,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AACxB,YAAME,KAAK,GAAGL,MAAM,CAACa,KAAP,CAAa,KAAb,EAAoB,CAApB,CAAd;AACA,YAAMC,UAAU,GAAGR,MAAM,CAACD,KAAD,CAAzB;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BI,UAA1B;AACAZ,QAAAA,eAAe,CAACU,IAAhB,CAAqBE,UAArB;AACD;;AAED,UAAIb,KAAK,KAAKP,OAAO,CAACqB,MAAR,GAAiB,CAA/B,EAAkC;AAChC,YAAMC,aAAa,GAAGd,eAAe,CAACJ,MAAhB,CACpB,UAACmB,GAAD,EAAMZ,KAAN;AAAA,iBAAgBY,GAAG,GAAGZ,KAAtB;AAAA,SADoB,CAAtB;AAGAI,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BR,eAA/B;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BM,aAA3B;AACAjB,QAAAA,WAAW,GAAGiB,aAAa,GAAGtB,OAAO,CAACqB,MAAtC;AACA,eAAOhB,WAAP;AACD;AACF,KA7BmB,EA6BjB,CA7BiB,CAApB;AA+BA,WAAOJ,WAAP;AACD,GAjCD;;AAkCA,MAAMuB,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAoB;AACrC,WAAOA,QAAQ,CAACvB,GAAT,CAAa,iBAAuD;AAAA,UAApDwB,KAAoD,SAApDA,KAAoD;AAAA,UAA7CC,MAA6C,SAA7CA,MAA6C;AAAA,UAArC3B,OAAqC,SAArCA,OAAqC;AACzE,UAAM4B,cAAc,GAAG7B,uBAAuB,CAAC,CAC7C;AAAE8B,QAAAA,MAAM,EAAE,yBAAV;AAAqC1B,QAAAA,KAAK,EAAE;AAA5C,OAD6C,EAE7C;AAAE0B,QAAAA,MAAM,EAAE,iBAAV;AAA6B1B,QAAAA,KAAK,EAAE;AAApC,OAF6C,EAG7C;AAAE0B,QAAAA,MAAM,EAAE,YAAV;AAAwB1B,QAAAA,KAAK,EAAE;AAA/B,OAH6C,CAAD,CAA9C;AAMAY,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BY,cAA9B;AAEA,aAAO;AAAEF,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,MAAM,EAANA,MAAT;AAAiBC,QAAAA,cAAc,EAAdA;AAAjB,OAAP;AACD,KAVM,CAAP;AAWD,GAZD;;AAcAvC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMyC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACKrC,iBAAiB,CAACsC,GAAlB,CAAsB,aAAtB,CADL;;AAAA;AACVC,cAAAA,MADU;AAEhBjB,cAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBgB,MAAtB;AACAlC,cAAAA,SAAS,CAAC0B,UAAU,CAACQ,MAAD,CAAX,CAAT;;AAHgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAMAF,IAAAA,SAAS;AACV,GARQ,EAQN,EARM,CAAT;AAUA,SACE,oBACE,MAAC,MAAD,QACGjC,MAAM,CAACK,GAAP,CAAW,UAAC+B,MAAD;AAAA,WACV,MAAC,IAAD,eAAUA,MAAV;AAAkB,MAAA,GAAG,EAAEA,MAAM,CAACP;AAA9B,OADU;AAAA,GAAX,CADH,CADF,CADF;AASD,CA5ED;;AA8EA,eAAe9B,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\n\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Home = () => {\n  const [movies, getMovies] = useState([]);\n\n  interface ImoviesResponseFields {\n    Title: string;\n    Poster: string;\n    Ratings: {}[];\n    key: string;\n  }\n  const calculateAvarageRatings = (Ratings: {}[]) => {\n    const overAllPerc = Ratings.map(\n      ({ Value }: { Value: string }) => Value\n    ).reduce((avaragePerc, rating, index) => {\n      const percentageValue: number[] = [];\n\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map((value) => Number(value));\n        console.log([all, ratio]);\n        console.log('[all, ratio]', all / ratio);\n        const calcPercentage = all / ratio;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        console.log('percentage', percentage);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce(\n          (acc, value) => acc + value\n        );\n        console.log('percentageValue', percentageValue);\n        console.log('avaragePerc', sumPercentage);\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n\n    return overAllPerc;\n  };\n  const reduceData = (response: {}[]) => {\n    return response.map(({ Title, Poster, Ratings }: ImoviesResponseFields) => {\n      const averageRatings = calculateAvarageRatings([\n        { Source: 'Internet Movie Database', Value: '8.1/10' },\n        { Source: 'Rotten Tomatoes', Value: '85%' },\n        { Source: 'Metacritic', Value: '69/100' },\n      ]);\n\n      console.log('averageRatings', averageRatings);\n\n      return { Title, Poster, averageRatings };\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      console.log('result', result);\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <main>\n      <Movies>\n        {movies.map((fields) => (\n          <Card {...fields} key={fields.Title} />\n        ))}\n      </Movies>\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}