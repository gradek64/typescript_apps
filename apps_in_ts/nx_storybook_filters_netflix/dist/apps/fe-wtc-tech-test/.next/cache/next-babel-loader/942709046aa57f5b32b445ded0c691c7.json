{"ast":null,"code":"const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  const actors3 = 'Harrison Ford'; //first combine actors results\n\n  const allActors = [...actors.split(','), ...actors2.split(','), ...actors3.split(',')];\n  const filteredActors = [];\n  let duplicatesdActors = []; //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  /* const ss = allActors.map((actor) => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n      duplicatesdActors.push(actor);\n    }\n     if (duplicatesdActors.length > 0) {\n      filteredActors.push(duplicatesdActors);\n      //do it again for the first actor on first interation\n      if (allActors.includes(duplicatesdActors[0])) {\n        console.log('duplicate actor', actor);\n        duplicatesdActors.push(actor);\n      }\n      duplicatesdActors = [];\n    } else {\n      filteredActors.push(actor);\n       console.log('filteredActors', filteredActors);\n    }\n  }); */\n\n  const names = ['Mike', 'Matt', 'Nancy', 'Adam', 'Jenny', 'Nancy', 'Carl'];\n  const uniq = names.map(name => {\n    return {\n      count: 1,\n      name: name\n    };\n  }).reduce((a, b) => {\n    a[b.name] = (a[b.name] || 0) + b.count;\n    return a;\n  }, {});\n  const duplicates = Object.keys(uniq).filter(a => uniq[a] > 1);\n  console.log(duplicates); // [ 'Nancy' ]\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["generateFilters","actors","actors2","actors3","allActors","split","filteredActors","duplicatesdActors","names","uniq","map","name","count","reduce","a","b","duplicates","Object","keys","filter","console","log"],"mappings":"AAAA,MAAMA,eAAe,GAAG,MAAM;AAC5B,QAAMC,MAAM,GAAG,6DAAf;AACA,QAAMC,OAAO,GACX,4EADF;AAEA,QAAMC,OAAO,GAAG,eAAhB,CAJ4B,CAM5B;;AAEA,QAAMC,SAAS,GAAG,CAChB,GAAGH,MAAM,CAACI,KAAP,CAAa,GAAb,CADa,EAEhB,GAAGH,OAAO,CAACG,KAAR,CAAc,GAAd,CAFa,EAGhB,GAAGF,OAAO,CAACE,KAAR,CAAc,GAAd,CAHa,CAAlB;AAKA,QAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,iBAAiB,GAAG,EAAxB,CAd4B,CAe5B;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AAsBA,QAAMC,KAAK,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,EAA0B,MAA1B,EAAkC,OAAlC,EAA2C,OAA3C,EAAoD,MAApD,CAAd;AAEA,QAAMC,IAAI,GAAGD,KAAK,CACfE,GADU,CACLC,IAAD,IAAU;AACb,WAAO;AACLC,MAAAA,KAAK,EAAE,CADF;AAELD,MAAAA,IAAI,EAAEA;AAFD,KAAP;AAID,GANU,EAOVE,MAPU,CAOH,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChBD,IAAAA,CAAC,CAACC,CAAC,CAACJ,IAAH,CAAD,GAAY,CAACG,CAAC,CAACC,CAAC,CAACJ,IAAH,CAAD,IAAa,CAAd,IAAmBI,CAAC,CAACH,KAAjC;AACA,WAAOE,CAAP;AACD,GAVU,EAUR,EAVQ,CAAb;AAYA,QAAME,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYT,IAAZ,EAAkBU,MAAlB,CAA0BL,CAAD,IAAOL,IAAI,CAACK,CAAD,CAAJ,GAAU,CAA1C,CAAnB;AAEAM,EAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ,EAxD4B,CAwDH;AAC1B,CAzDD;;AA2DA,SAAShB,eAAT","sourcesContent":["const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  const actors3 = 'Harrison Ford';\n\n  //first combine actors results\n\n  const allActors = [\n    ...actors.split(','),\n    ...actors2.split(','),\n    ...actors3.split(','),\n  ];\n  const filteredActors = [];\n  let duplicatesdActors = [];\n  //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  /* const ss = allActors.map((actor) => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n      duplicatesdActors.push(actor);\n    }\n\n    if (duplicatesdActors.length > 0) {\n      filteredActors.push(duplicatesdActors);\n      //do it again for the first actor on first interation\n      if (allActors.includes(duplicatesdActors[0])) {\n        console.log('duplicate actor', actor);\n        duplicatesdActors.push(actor);\n      }\n      duplicatesdActors = [];\n    } else {\n      filteredActors.push(actor);\n\n      console.log('filteredActors', filteredActors);\n    }\n  }); */\n\n  const names = ['Mike', 'Matt', 'Nancy', 'Adam', 'Jenny', 'Nancy', 'Carl'];\n\n  const uniq = names\n    .map((name) => {\n      return {\n        count: 1,\n        name: name,\n      };\n    })\n    .reduce((a, b) => {\n      a[b.name] = (a[b.name] || 0) + b.count;\n      return a;\n    }, {});\n\n  const duplicates = Object.keys(uniq).filter((a) => uniq[a] > 1);\n\n  console.log(duplicates); // [ 'Nancy' ]\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}