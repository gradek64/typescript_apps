{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\nexport const MoviesContext = React.createContext([{}]);\nconst {\n  Provider\n} = MoviesContext;\n\nconst Home = () => {\n  const {\n    0: loading,\n    1: isLoading\n  } = useState(true);\n  const {\n    0: movies,\n    1: getMovies\n  } = useState([]);\n  const reduceData = useCallback(response => {\n    // const averageRatingsAll: { avrRat: number }[] = [];\n    //let averageRatings: { avrRat: number };\n    return response.map(({\n      Title,\n      Poster,\n      Ratings\n    }, i) => {\n      //averageRatingsAll.push({ avrRat: calculateAvarageRatings(Ratings) });\n      //averageRatings = averageRatingsAll[i];\n      isLoading(false);\n      return {\n        Title,\n        Poster,\n        Ratings\n      };\n    });\n  }, []);\n  useEffect(() => {\n    isLoading(true);\n\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, [reduceData]);\n  return __jsx(\"main\", null, loading && 'movies are loading', __jsx(Provider, {\n    value: movies\n  }, __jsx(Movies, null, __jsx(Card, null))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["Movies","styled","div","MoviesContext","React","Provider","Home","isLoading","useState","getMovies","reduceData","useCallback","response","Ratings","useEffect","fetchData","result","generalAPIService","loading","movies"],"mappings":";AAAA,OAAA,KAAA,IAAA,SAAA,EAAA,QAAA,EAAA,WAAA,QAAA,OAAA;AACA,OAAA,MAAA,MAAA,mBAAA,C,CAEA;;AACA,OAAA,IAAA,MAAA,aAAA;AACA,OAAA,iBAAA,MAAA,uBAAA;AAEA,MAAMA,MAAM,GAAGC,MAAM,CAACC,GAAI;;;CAA1B;AAUA,OAAO,MAAMC,aAAa,GAAGC,KAAK,CAALA,aAAAA,CAAoB,CAA1C,EAA0C,CAApBA,CAAtB;AACP,MAAM;AAAEC,EAAAA;AAAF,IAAN,aAAA;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAA,OAAA,OAAA;AAAA,OAAUC;AAAV,MAAuBC,QAAQ,CAArC,IAAqC,CAArC;AACA,QAAM;AAAA,OAAA,MAAA;AAAA,OAASC;AAAT,MAAsBD,QAAQ,CAApC,EAAoC,CAApC;AAEA,QAAME,UAAU,GAAGC,WAAW,CAAEC,QAAD,IAAoB;AACjD;AACA;AACA,WAAO,QAAQ,CAAR,GAAA,CACL,CAAC;AAAA,MAAA,KAAA;AAAA,MAAA,MAAA;AAAiBC,MAAAA;AAAjB,KAAD,EAAA,CAAA,KAA0D;AACxD;AACA;AACAN,MAAAA,SAAS,CAATA,KAAS,CAATA;AACA,aAAO;AAAA,QAAA,KAAA;AAAA,QAAA,MAAA;AAAiBM,QAAAA;AAAjB,OAAP;AALJ,KAAO,CAAP;AAH4B,GAAA,EAA9B,EAA8B,CAA9B;AAaAC,EAAAA,SAAS,CAAC,MAAM;AACdP,IAAAA,SAAS,CAATA,IAAS,CAATA;;AACA,UAAMQ,SAAS,GAAG,YAAY;AAC5B,YAAMC,MAAM,GAAG,MAAMC,iBAAiB,CAAjBA,GAAAA,CAArB,aAAqBA,CAArB;AACAR,MAAAA,SAAS,CAACC,UAAU,CAApBD,MAAoB,CAAX,CAATA;AAFF,KAAA;;AAKAM,IAAAA,SAAS;AAPF,GAAA,EAQN,CARHD,UAQG,CARM,CAATA;AAUA,SACE,KAAA,CAAA,MAAA,EAAA,IAAA,EACGI,OAAO,IADV,oBAAA,EAEE,KAAA,CAAA,QAAA,EAAA;AAAU,IAAA,KAAK,EAAEC;AAAjB,GAAA,EACE,KAAA,CAAA,MAAA,EAAA,IAAA,EACE,KAAA,CAAA,IAAA,EALR,IAKQ,CADF,CADF,CAFF,CADF;AA3BF,CAAA;;AAuCA,eAAA,IAAA","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\n\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\ninterface ImoviesResponseFields {\n  Title: string;\n  Poster: string;\n  Ratings: {}[];\n  key: string;\n}\nexport const MoviesContext = React.createContext([{} as ImoviesResponseFields]);\nconst { Provider } = MoviesContext;\n\nconst Home = () => {\n  const [loading, isLoading] = useState(true);\n  const [movies, getMovies] = useState([]);\n\n  const reduceData = useCallback((response: {}[]) => {\n    // const averageRatingsAll: { avrRat: number }[] = [];\n    //let averageRatings: { avrRat: number };\n    return response.map(\n      ({ Title, Poster, Ratings }: ImoviesResponseFields, i) => {\n        //averageRatingsAll.push({ avrRat: calculateAvarageRatings(Ratings) });\n        //averageRatings = averageRatingsAll[i];\n        isLoading(false);\n        return { Title, Poster, Ratings };\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    isLoading(true);\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, [reduceData]);\n\n  return (\n    <main>\n      {loading && 'movies are loading'}\n      <Provider value={movies}>\n        <Movies>\n          <Card />\n        </Movies>\n      </Provider>\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}