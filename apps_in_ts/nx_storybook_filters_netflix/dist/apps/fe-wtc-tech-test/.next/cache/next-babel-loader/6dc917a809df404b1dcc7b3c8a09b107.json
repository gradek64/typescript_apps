{"ast":null,"code":"export const calculateAvarageRatings = Ratings => {\n  const percentageValue = [];\n  const overAllPerc = Ratings.map(({\n    Value\n  }) => Value).reduce((avaragePerc, rating, index) => {\n    if (rating.includes('/')) {\n      const [all, ratio] = rating.split('/').map(value => Number(value));\n      const calcPercentage = all / ratio * 100;\n      percentageValue.push(calcPercentage);\n    }\n\n    if (rating.includes('%')) {\n      const value = rating.match(/\\d+/)[0];\n      const percentage = Number(value);\n      percentageValue.push(percentage);\n    }\n\n    if (index === Ratings.length - 1) {\n      const sumPercentage = percentageValue.reduce((acc, value) => acc + value);\n      avaragePerc = sumPercentage / Ratings.length;\n      return avaragePerc;\n    }\n\n    return 0;\n  }, 0);\n  return overAllPerc;\n};","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/Card/CardUtills/calculateAvarageRating.ts"],"names":["calculateAvarageRatings","Ratings","percentageValue","overAllPerc","map","Value","reduce","avaragePerc","rating","index","includes","all","ratio","split","value","Number","calcPercentage","push","match","percentage","length","sumPercentage","acc"],"mappings":"AAAA,OAAO,MAAMA,uBAAuB,GAAIC,OAAD,IAAmB;AACxD,QAAMC,eAAyB,GAAG,EAAlC;AAEA,QAAMC,WAAW,GAAGF,OAAO,CAACG,GAAR,CAClB,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAkCA,KADhB,EAElBC,MAFkB,CAEX,CAACC,WAAD,EAAcC,MAAd,EAAsBC,KAAtB,KAAgC;AACvC,QAAID,MAAM,CAACE,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AACxB,YAAM,CAACC,GAAD,EAAMC,KAAN,IAAeJ,MAAM,CAACK,KAAP,CAAa,GAAb,EAAkBT,GAAlB,CAAuBU,KAAD,IAAWC,MAAM,CAACD,KAAD,CAAvC,CAArB;AACA,YAAME,cAAc,GAAIL,GAAG,GAAGC,KAAP,GAAgB,GAAvC;AACAV,MAAAA,eAAe,CAACe,IAAhB,CAAqBD,cAArB;AACD;;AAED,QAAIR,MAAM,CAACE,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AACxB,YAAMI,KAAK,GAAGN,MAAM,CAACU,KAAP,CAAa,KAAb,EAAoB,CAApB,CAAd;AACA,YAAMC,UAAU,GAAGJ,MAAM,CAACD,KAAD,CAAzB;AACAZ,MAAAA,eAAe,CAACe,IAAhB,CAAqBE,UAArB;AACD;;AAED,QAAIV,KAAK,KAAKR,OAAO,CAACmB,MAAR,GAAiB,CAA/B,EAAkC;AAChC,YAAMC,aAAa,GAAGnB,eAAe,CAACI,MAAhB,CAAuB,CAACgB,GAAD,EAAMR,KAAN,KAAgBQ,GAAG,GAAGR,KAA7C,CAAtB;AAEAP,MAAAA,WAAW,GAAGc,aAAa,GAAGpB,OAAO,CAACmB,MAAtC;AACA,aAAOb,WAAP;AACD;;AACD,WAAO,CAAP;AACD,GAtBmB,EAsBjB,CAtBiB,CAApB;AAwBA,SAAOJ,WAAP;AACD,CA5BM","sourcesContent":["export const calculateAvarageRatings = (Ratings: {}[]) => {\n  const percentageValue: number[] = [];\n\n  const overAllPerc = Ratings.map(\n    ({ Value }: { Value: string }) => Value\n  ).reduce((avaragePerc, rating, index) => {\n    if (rating.includes('/')) {\n      const [all, ratio] = rating.split('/').map((value) => Number(value));\n      const calcPercentage = (all / ratio) * 100;\n      percentageValue.push(calcPercentage);\n    }\n\n    if (rating.includes('%')) {\n      const value = rating.match(/\\d+/)[0];\n      const percentage = Number(value);\n      percentageValue.push(percentage);\n    }\n\n    if (index === Ratings.length - 1) {\n      const sumPercentage = percentageValue.reduce((acc, value) => acc + value);\n\n      avaragePerc = sumPercentage / Ratings.length;\n      return avaragePerc;\n    }\n    return 0;\n  }, 0);\n\n  return overAllPerc;\n};\n"]},"metadata":{},"sourceType":"module"}