{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'; //custom\n\nimport wrapperIconHOC from '../../IconCTA/IconAction';\nvar VisibilityWatchedIcon = wrapperIconHOC(VisibilityOffOutlinedIcon, VisibilityIcon);\nvar VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon);\n/*---------*/\n\nvar IconsStateManagement = function IconsStateManagement(_ref) {\n  var callToActionCardColor = _ref.callToActionCardColor,\n      callToActionCardCount = _ref.callToActionCardCount,\n      watch = _ref.watch,\n      favorite = _ref.favorite;\n  //initial state here at let declaration;\n  console.log('watch', watch, 'favorite', favorite);\n  var prevState = {\n    watch: watch,\n    favorite: favorite\n  };\n\n  var callToAction = function callToAction(iconState) {\n    callToActionCardColor(_objectSpread({}, prevState, {}, iconState));\n    prevState = _objectSpread({}, prevState, {}, iconState);\n  };\n\n  var tt = 0;\n\n  var callToAction1 = function callToAction1() {\n    tt = tt + 2;\n    callToActionCardCount(tt);\n  }; // callToActionCardColor({ watch, favorite });\n  //initial state\n  //optional to set prevState here after setting initial card colors\n  //prevState = { watch, favorite }\n\n\n  return __jsx(React.Fragment, null, __jsx(\"p\", {\n    onClick: function onClick() {\n      callToAction1();\n    }\n  }, 'click me'), __jsx(VisibilityWatchedIcon, {\n    callToAction: callToAction,\n    icon: \"watch\",\n    isActive: watch\n  }), __jsx(VisibilitySavedIcon, {\n    callToAction: callToAction,\n    icon: \"favorite\",\n    isActive: favorite\n  }));\n};\n\nexport default React.memo(IconsStateManagement); //React.memo HOC will make sure the component will remember its props\n//and only re-render the entire component body if any of props has\n//changed \n//without React.memo it will re-render anyway even without a prop change\n//notice this component doesn`t use hooks is simple functional components\n//that check the pros changes \n\n/*\n    from documentation:\n\n    React.memo only checks for prop changes.\n    By default it will only shallowly compare complex objects in the props object.\n    If you want control over the comparison, you can also provide a custom comparison function as the second argument\n\n*/","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/Card/IconsStateManagement/IconsStateManagement.tsx"],"names":["React","VisibilityIcon","VisibilityOffOutlinedIcon","FavoriteIcon","FavoriteBorderIcon","wrapperIconHOC","VisibilityWatchedIcon","VisibilitySavedIcon","IconsStateManagement","callToActionCardColor","callToActionCardCount","watch","favorite","console","log","prevState","callToAction","iconState","tt","callToAction1","memo"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,OAAOC,yBAAP,MAAsC,0CAAtC;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,kBAAP,MAA+B,mCAA/B,C,CAEA;;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,IAAMC,qBAAqB,GAAGD,cAAc,CAC1CH,yBAD0C,EAE1CD,cAF0C,CAA5C;AAIA,IAAMM,mBAAmB,GAAGF,cAAc,CAACD,kBAAD,EAAqBD,YAArB,CAA1C;AAEA;;AAaA,IAAMK,oBAAoB,GAAG,SAAvBA,oBAAuB,OAKf;AAAA,MAJZC,qBAIY,QAJZA,qBAIY;AAAA,MAHZC,qBAGY,QAHZA,qBAGY;AAAA,MAFZC,KAEY,QAFZA,KAEY;AAAA,MADZC,QACY,QADZA,QACY;AACZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAArB,EAA4B,UAA5B,EAAwCC,QAAxC;AACA,MAAIG,SAAS,GAAG;AAAEJ,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,QAAQ,EAARA;AAAT,GAAhB;;AACA,MAAMI,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAuB;AAC1CR,IAAAA,qBAAqB,mBAAMM,SAAN,MAAoBE,SAApB,EAArB;AACAF,IAAAA,SAAS,qBAAQA,SAAR,MAAsBE,SAAtB,CAAT;AACD,GAHD;;AAIA,MAAIC,EAAE,GAAG,CAAT;;AACA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BD,IAAAA,EAAE,GAAGA,EAAE,GAAG,CAAV;AACAR,IAAAA,qBAAqB,CAACQ,EAAD,CAArB;AACD,GAHD,CATY,CAcZ;AACA;AACA;AACA;;;AAEA,SACE,4BACE;AAAG,IAAA,OAAO,EAAE,mBAAM;AAAEC,MAAAA,aAAa;AAAI;AAArC,KAAwC,UAAxC,CADF,EAEE,MAAC,qBAAD;AACE,IAAA,YAAY,EAAEH,YADhB;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,QAAQ,EAAEL;AAHZ,IAFF,EAOE,MAAC,mBAAD;AACE,IAAA,YAAY,EAAEK,YADhB;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,QAAQ,EAAEJ;AAHZ,IAPF,CADF;AAeD,CAvCD;;AA0CA,eAAeZ,KAAK,CAACoB,IAAN,CAAWZ,oBAAX,CAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;;AAGA","sourcesContent":["import React from 'react';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\n//custom\nimport wrapperIconHOC from '../../IconCTA/IconAction';\nconst VisibilityWatchedIcon = wrapperIconHOC(\n  VisibilityOffOutlinedIcon,\n  VisibilityIcon\n);\nconst VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon);\n\n/*---------*/\ninterface IconStateInt {\n  watch: boolean;\n  favorite: boolean;\n}\n\ninterface PropsI {\n  callToActionCardColor: (state: object) => void;\n  callToActionCardCount: (ss: number) => void;\n  watch: boolean;\n  favorite: boolean;\n}\n\nconst IconsStateManagement = ({\n  callToActionCardColor,\n  callToActionCardCount,\n  watch,\n  favorite,\n}: PropsI) => {\n  //initial state here at let declaration;\n  console.log('watch', watch, 'favorite', favorite)\n  let prevState = { watch, favorite };\n  const callToAction = (iconState: object) => {\n    callToActionCardColor({ ...prevState, ...iconState });\n    prevState = { ...prevState, ...iconState };\n  };\n  let tt = 0\n  const callToAction1 = () => {\n    tt = tt + 2\n    callToActionCardCount(tt)\n  };\n\n  // callToActionCardColor({ watch, favorite });\n  //initial state\n  //optional to set prevState here after setting initial card colors\n  //prevState = { watch, favorite }\n\n  return (\n    <>\n      <p onClick={() => { callToAction1() }}>{'click me'}</p>\n      <VisibilityWatchedIcon\n        callToAction={callToAction}\n        icon=\"watch\"\n        isActive={watch}\n      />\n      <VisibilitySavedIcon\n        callToAction={callToAction}\n        icon=\"favorite\"\n        isActive={favorite}\n      />\n    </>\n  );\n};\n\n\nexport default React.memo(IconsStateManagement);\n//React.memo HOC will make sure the component will remember its props\n//and only re-render the entire component body if any of props has\n//changed \n//without React.memo it will re-render anyway even without a prop change\n//notice this component doesn`t use hooks is simple functional components\n//that check the pros changes \n\n\n/*\n    from documentation:\n\n    React.memo only checks for prop changes.\n    By default it will only shallowly compare complex objects in the props object.\n    If you want control over the comparison, you can also provide a custom comparison function as the second argument\n\n*/\n"]},"metadata":{},"sourceType":"module"}