{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'; //custom\n\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport wrapperIconHOC from '../Card/IconCTA/IconAction';\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907'\n};\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${props => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  min-width: 200px;\n  min-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\nconst PosterImage = styled.img`\n  max-width: 100%;\n  height: auto;\n`;\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px;\n`;\nconst CardFooter = styled.div`\n  width: 100%;\n`;\n/* ... inside the render or return of your component ... */\n\nconst VisibilityWatchedIcon = wrapperIconHOC(VisibilityIcon, VisibilityOffOutlinedIcon);\nconst VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon); //build card color object for each card\n\n/* const reducer = (people, action) => {\n\n  switch (action) {\n    case action.type == 'chomp':\n    case !watch && !favorite:\n  if(action.type == 'chomp') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = false;\n      }\n      return person;\n    })\n  }\n  if(action.type == 'revive') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = true;\n      }\n      return person;\n    })\n  }\n}\n */\n\n/* const cardState = { watch: false, favorite: false };*/\n\nlet previousState;\n\nfunction Card(props) {\n  const {\n    Title,\n    Poster: posterURL\n  } = props; //const [backgroundColor, setBgColor] = useState(cardColorMapping.default);\n\n  const {\n    0: colorState,\n    1: setColorState\n  } = useState({\n    watch: false,\n    favorite: false\n  });\n  /* const [state, dispatch] = useReducer(reducer, {\n    watch: false,\n    favorite: false,\n  }); */\n\n  const setColor = ({\n    watch,\n    favorite\n  }) => {\n    switch (true) {\n      case !watch && !favorite:\n        //setBgColor(cardColorMapping.default);\n        console.log('notWatchednotSaved');\n        return 'white';\n\n      case watch && !favorite:\n        //setBgColor(cardColorMapping.watchedNotSaved);\n        console.log('watchedNotSaved');\n        return 'white';\n\n      case !watch && favorite:\n        //setBgColor(cardColorMapping.savedNotWatched);\n        console.log('savedNotWatched');\n        return 'white';\n\n      case watch && favorite:\n        //setBgColor(cardColorMapping.watchedAndSaved);\n        console.log('watchedAndSaved');\n        return 'white';\n    }\n  };\n\n  const callToAction = state => {\n    /*  setColorState((prevState) => {\n      return { ...prevState, ...state };\n    }); */\n    //dispatch({ type: 'chomp', payload: state });\n    //console.log('state ', cardStateChange);\n    console.log('state', state); //previousState;\n  };\n\n  return __jsx(CardContainer, {\n    color: setColor(colorState)\n  }, __jsx(CardHeader, null, __jsx(VisibilityWatchedIcon, {\n    callToAction: callToAction,\n    icon: \"watch\",\n    obj: {\n      watch: false,\n      favorite: false\n    }\n  }), __jsx(VisibilitySavedIcon, {\n    callToAction: callToAction,\n    icon: \"favorite\",\n    obj: {\n      watch: false,\n      favorite: false\n    }\n  })), __jsx(Poster, null, __jsx(PosterImage, {\n    src: posterURL,\n    alt: Title\n  })), __jsx(CardFooter, null, __jsx(RatingStarComp, {\n    rating: 20\n  })));\n}\n\nexport default Card;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/Card/Card.tsx"],"names":["cardColorMapping","default","savedNotWatched","watchedAndSaved","watchedNotSaved","CardContainer","styled","div","props","Poster","PosterImage","img","CardHeader","CardFooter","VisibilityWatchedIcon","wrapperIconHOC","VisibilitySavedIcon","posterURL","setColorState","useState","watch","favorite","setColor","console","callToAction","state","Title"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from 'react';\nimport styled from 'styled-components';\nimport { VisibilityIcon } from '@mono-nx-test-with-nextjs/ui';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\n//custom\nimport RatingStarComp from '../RatingStarComp/Rating';\nimport wrapperIconHOC from '../Card/IconCTA/IconAction';\n\ninterface CardColorChange {\n  color: string;\n}\n\nconst cardColorMapping = {\n  default: '#FFF',\n  savedNotWatched: '#ED6606',\n  watchedAndSaved: '#049452',\n  watchedNotSaved: '#EEC907',\n};\n\nconst CardContainer = styled.div<CardColorChange>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${(props) => props.color || cardColorMapping.default};\n  /* align-items: center; */\n  min-width: 200px;\n  min-height: 300px;\n  border-radius: 20px;\n  /* justify-content: center; */\n  margin: 10px;\n  -webkit-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  -moz-box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n  box-shadow: -1px 0px 21px -5px rgba(0, 0, 0, 0.53);\n`;\nconst Poster = styled.div`\n  border-radius: 10px;\n  width: 150px;\n  margin: 0 auto;\n`;\n\nconst PosterImage = styled.img`\n  max-width: 100%;\n  height: auto;\n`;\n\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 10px;\n`;\n\nconst CardFooter = styled.div`\n  width: 100%;\n`;\n\n/* ... inside the render or return of your component ... */\n\ninterface Props {\n  Title: string;\n  Poster: string;\n}\n\nconst VisibilityWatchedIcon = wrapperIconHOC(\n  VisibilityIcon,\n  VisibilityOffOutlinedIcon\n);\nconst VisibilitySavedIcon = wrapperIconHOC(FavoriteBorderIcon, FavoriteIcon);\n\n//build card color object for each card\n\n/* const reducer = (people, action) => {\n\n  switch (action) {\n    case action.type == 'chomp':\n    case !watch && !favorite:\n  if(action.type == 'chomp') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = false;\n      }\n      return person;\n    })\n  }\n  if(action.type == 'revive') {\n    return people.map(person => {\n      if(person.name == action.payload) {\n        person.alive = true;\n      }\n      return person;\n    })\n  }\n}\n */\n/* const cardState = { watch: false, favorite: false };*/\nlet previousState: { watch: boolean; favorite: boolean };\nfunction Card(props: Props) {\n  const { Title, Poster: posterURL } = props;\n\n  //const [backgroundColor, setBgColor] = useState(cardColorMapping.default);\n  const [colorState, setColorState] = useState({\n    watch: false,\n    favorite: false,\n  });\n\n  /* const [state, dispatch] = useReducer(reducer, {\n    watch: false,\n    favorite: false,\n  }); */\n\n  const setColor = ({ watch, favorite }) => {\n    switch (true) {\n      case !watch && !favorite:\n        //setBgColor(cardColorMapping.default);\n        console.log('notWatchednotSaved');\n        return 'white';\n      case watch && !favorite:\n        //setBgColor(cardColorMapping.watchedNotSaved);\n        console.log('watchedNotSaved');\n        return 'white';\n      case !watch && favorite:\n        //setBgColor(cardColorMapping.savedNotWatched);\n        console.log('savedNotWatched');\n        return 'white';\n      case watch && favorite:\n        //setBgColor(cardColorMapping.watchedAndSaved);\n        console.log('watchedAndSaved');\n        return 'white';\n    }\n  };\n\n  const callToAction = (state: object) => {\n    /*  setColorState((prevState) => {\n      return { ...prevState, ...state };\n    }); */\n    //dispatch({ type: 'chomp', payload: state });\n    //console.log('state ', cardStateChange);\n    console.log('state', state);\n    //previousState;\n  };\n\n  return (\n    <CardContainer color={setColor(colorState)}>\n      <CardHeader>\n        <VisibilityWatchedIcon\n          callToAction={callToAction}\n          icon=\"watch\"\n          obj={{\n            watch: false,\n            favorite: false,\n          }}\n        />\n        <VisibilitySavedIcon\n          callToAction={callToAction}\n          icon=\"favorite\"\n          obj={{\n            watch: false,\n            favorite: false,\n          }}\n        />\n      </CardHeader>\n      <Poster>\n        <PosterImage src={posterURL} alt={Title} />\n      </Poster>\n      <CardFooter>\n        <RatingStarComp rating={20} />\n      </CardFooter>\n    </CardContainer>\n  );\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}