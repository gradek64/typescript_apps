{"ast":null,"code":"let actorsStringData = '';\nlet trackIndex = 0;\n\nconst generateFilters = (stringData, allMovies) => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  const actors3 = 'Harrison Ford';\n  const actors4 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed'; //first combine actors results\n\n  actorsStringData += stringData;\n  const allActors = [...actorsStringData.split(',')];\n  console.log('allActors', allActors); //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the cod\n\n  function findDuplicate(arr) {\n    const object = {};\n    arr.forEach(function (item) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('trackIndex', trackIndex);\n\n  if (trackIndex === allMovies) {\n    findDuplicate(allActors);\n  }\n\n  trackIndex++;\n  return;\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["actorsStringData","trackIndex","generateFilters","stringData","allMovies","actors","actors2","actors3","actors4","allActors","split","console","log","findDuplicate","arr","object","forEach","item","trimStirng","trim"],"mappings":"AAAA,IAAIA,gBAAgB,GAAG,EAAvB;AACA,IAAIC,UAAU,GAAG,CAAjB;;AACA,MAAMC,eAAe,GAAG,CAACC,UAAD,EAAqBC,SAArB,KAA2C;AACjE,QAAMC,MAAM,GAAG,6DAAf;AACA,QAAMC,OAAO,GACX,4EADF;AAEA,QAAMC,OAAO,GAAG,eAAhB;AACA,QAAMC,OAAO,GACX,4EADF,CALiE,CAQjE;;AACAR,EAAAA,gBAAgB,IAAIG,UAApB;AAEA,QAAMM,SAAS,GAAG,CAAC,GAAGT,gBAAgB,CAACU,KAAjB,CAAuB,GAAvB,CAAJ,CAAlB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,SAAzB,EAbiE,CAejE;AACA;;AAEA,WAASI,aAAT,CAAuBC,GAAvB,EAAsC;AACpC,UAAMC,MAAM,GAAG,EAAf;AACAD,IAAAA,GAAG,CAACE,OAAJ,CAAY,UAAUC,IAAV,EAAwB;AAClC,YAAMC,UAAU,GAAGD,IAAI,CAACE,IAAL,EAAnB;AACA,UAAI,CAACJ,MAAM,CAACG,UAAD,CAAX,EAAyBH,MAAM,CAACG,UAAD,CAAN,GAAqB,CAArB;AACzBH,MAAAA,MAAM,CAACG,UAAD,CAAN,IAAsB,CAAtB;AACD,KAJD;AAKA,WAAOH,MAAP;AACD;;AAEDJ,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BX,UAA1B;;AACA,MAAIA,UAAU,KAAKG,SAAnB,EAA8B;AAC5BS,IAAAA,aAAa,CAACJ,SAAD,CAAb;AACD;;AAEDR,EAAAA,UAAU;AACV;AACD,CAnCD;;AAqCA,SAASC,eAAT","sourcesContent":["let actorsStringData = '';\nlet trackIndex = 0;\nconst generateFilters = (stringData: string, allMovies: number) => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  const actors3 = 'Harrison Ford';\n  const actors4 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n\n  //first combine actors results\n  actorsStringData += stringData;\n\n  const allActors = [...actorsStringData.split(',')];\n\n  console.log('allActors', allActors);\n\n  //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the cod\n\n  function findDuplicate(arr: string[]) {\n    const object = {};\n    arr.forEach(function (item: string) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('trackIndex', trackIndex);\n  if (trackIndex === allMovies) {\n    findDuplicate(allActors);\n  }\n\n  trackIndex++;\n  return;\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}