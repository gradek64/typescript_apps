{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useState } from 'react';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport styled from 'styled-components'; //styles\n\nconst AccordionHeader = styled.button`\n  display: flex;\n  width: 100%;\n  height: 30px;\n  align-items: center;\n  padding: 10px;\n  justify-content: space-between;\n  border: none;\n  &.active {\n    background-color: orange;\n  }\n`;\nconst AccordionContent = styled.div`\n  overflow: hidden;\n  height: auto;\n  width: 100%;\n  transition: height 0.6s ease;\n`;\nconst ChevronIcon = styled.span`\n  transition: transform 0.6s ease;\n  &.rotate {\n    transform: rotate(90deg);\n  }\n`;\n\nfunction Accordion(props) {\n  var _refContent$current;\n\n  const {\n    children,\n    open = false,\n    shevron = true\n  } = props;\n  const refContent = useRef(null);\n  const {\n    0: isOpen,\n    1: setOpen\n  } = useState(open ? 'active' : '');\n  return __jsx(\"div\", {\n    className: \"accordion\"\n  }, __jsx(AccordionHeader, {\n    className: `accordionHeader ${isOpen}`,\n    onClick: () => {\n      setOpen(!isOpen ? 'active' : '');\n    }\n  }, __jsx(\"span\", {\n    className: \"accordionTitle\"\n  }, \"AccordionTitle\"), shevron && __jsx(ChevronIcon, {\n    className: !!isOpen && 'rotate'\n  }, __jsx(ChevronRightIcon, null))), __jsx(AccordionContent, {\n    ref: refContent,\n    style: {\n      height: `${isOpen !== '' ? Number((_refContent$current = refContent.current) === null || _refContent$current === void 0 ? void 0 : _refContent$current.scrollHeight) : 0}px`\n    }\n  }, children));\n}\n\nexport default Accordion;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/Accordion/Accordion.tsx"],"names":["React","useRef","useState","ChevronRightIcon","styled","AccordionHeader","button","AccordionContent","div","ChevronIcon","span","Accordion","props","children","open","shevron","refContent","isOpen","setOpen","height","Number","current","scrollHeight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAA8D,OAA9D;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;;AACA,MAAMC,eAAe,GAAGD,MAAM,CAACE,MAAO;;;;;;;;;;;CAAtC;AAaA,MAAMC,gBAAgB,GAAGH,MAAM,CAACI,GAAI;;;;;CAApC;AAOA,MAAMC,WAAW,GAAGL,MAAM,CAACM,IAAK;;;;;CAAhC;;AAYA,SAASC,SAAT,CAAmBC,KAAnB,EAAkC;AAAA;;AAChC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,IAAI,GAAG,KAAnB;AAA0BC,IAAAA,OAAO,GAAG;AAApC,MAA6CH,KAAnD;AAEA,QAAMI,UAAU,GAAGf,MAAM,CAAiB,IAAjB,CAAzB;AACA,QAAM;AAAA,OAACgB,MAAD;AAAA,OAASC;AAAT,MAAoBhB,QAAQ,CAACY,IAAI,GAAG,QAAH,GAAc,EAAnB,CAAlC;AAEA,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,MAAC,eAAD;AACE,IAAA,SAAS,EAAG,mBAAkBG,MAAO,EADvC;AAEE,IAAA,OAAO,EAAE,MAAM;AACbC,MAAAA,OAAO,CAAC,CAACD,MAAD,GAAU,QAAV,GAAqB,EAAtB,CAAP;AACD;AAJH,KAME;AAAM,IAAA,SAAS,EAAC;AAAhB,sBANF,EAOGF,OAAO,IACN,MAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACE,MAAF,IAAY;AAApC,KACE,MAAC,gBAAD,OADF,CARJ,CADF,EAcE,MAAC,gBAAD;AACE,IAAA,GAAG,EAAED,UADP;AAEE,IAAA,KAAK,EAAE;AACLG,MAAAA,MAAM,EAAG,GACPF,MAAM,KAAK,EAAX,GAAgBG,MAAM,wBAACJ,UAAU,CAACK,OAAZ,wDAAC,oBAAoBC,YAArB,CAAtB,GAA2D,CAC5D;AAHI;AAFT,KAQGT,QARH,CAdF,CADF;AA2BD;;AAED,eAAeF,SAAf","sourcesContent":["import React, { useRef, useState, useMemo, useCallback } from 'react';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport styled from 'styled-components';\n\n//styles\nconst AccordionHeader = styled.button`\n  display: flex;\n  width: 100%;\n  height: 30px;\n  align-items: center;\n  padding: 10px;\n  justify-content: space-between;\n  border: none;\n  &.active {\n    background-color: orange;\n  }\n`;\n\nconst AccordionContent = styled.div`\n  overflow: hidden;\n  height: auto;\n  width: 100%;\n  transition: height 0.6s ease;\n`;\n\nconst ChevronIcon = styled.span`\n  transition: transform 0.6s ease;\n  &.rotate {\n    transform: rotate(90deg);\n  }\n`;\n\ninterface PropsI {\n  children: React.ReactNode;\n  open?: boolean;\n  shevron?: boolean;\n}\nfunction Accordion(props: PropsI) {\n  const { children, open = false, shevron = true } = props;\n\n  const refContent = useRef<HTMLDivElement>(null);\n  const [isOpen, setOpen] = useState(open ? 'active' : '');\n\n  return (\n    <div className=\"accordion\">\n      <AccordionHeader\n        className={`accordionHeader ${isOpen}`}\n        onClick={() => {\n          setOpen(!isOpen ? 'active' : '');\n        }}\n      >\n        <span className=\"accordionTitle\">AccordionTitle</span>\n        {shevron && (\n          <ChevronIcon className={!!isOpen && 'rotate'}>\n            <ChevronRightIcon />\n          </ChevronIcon>\n        )}\n      </AccordionHeader>\n      <AccordionContent\n        ref={refContent}\n        style={{\n          height: `${\n            isOpen !== '' ? Number(refContent.current?.scrollHeight) : 0\n          }px`,\n        }}\n      >\n        {children}\n      </AccordionContent>\n    </div>\n  );\n}\n\nexport default Accordion;\n"]},"metadata":{},"sourceType":"module"}