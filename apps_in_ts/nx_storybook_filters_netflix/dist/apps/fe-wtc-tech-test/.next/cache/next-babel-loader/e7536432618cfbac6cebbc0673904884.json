{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// custom\nimport { ENV_MOVIES } from './utils/ENV';\n\nconst apiService = () => {\n  const errorInterceptor = response => {\n    switch (response.status) {\n      case 401:\n      case 405:\n        // events.emit('NOT_AUTHENTICATED');\n        break;\n\n      case 403:\n        // events.emit('NOT_AUTHORISED');\n        // break;\n        // case 405:\n        //   events.emit('METHOD_NOT_ALLOWED');\n        break;\n\n      default:\n    }\n\n    throw response;\n  };\n\n  const responseMiddleware = res => res;\n\n  const requestPath = (path, params) => {\n    const PATH = ENV_MOVIES.BASE_URL;\n\n    if (params && Object.keys(params).length > 1) {\n      let query = '';\n\n      for (const keys in params) {\n        query += keys + '=' + params[keys] + '&';\n      }\n\n      return PATH + path + '?' + query.replace(/&$/, '').trim();\n    }\n\n    return PATH + path;\n  };\n\n  const requestInterceptor = (serviceConfig, customRequestHeaders) => {\n    const requestHeaders = {\n      'Content-Type': 'application/json'\n    };\n    let request = {\n      method: serviceConfig.method,\n      //mode: 'no-cors', // no-cors, *cors, same-origin\n      cache: 'default',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin',\n      // include, *same-origin, omit\n      headers: _objectSpread({}, requestHeaders, {}, customRequestHeaders)\n    }; //request with body object not empty {}\n\n    if (serviceConfig.body && Object.keys(serviceConfig.body).length > 1) {\n      request = Object.assign(request, {\n        //convert to JSON object\n        body: JSON.stringify(serviceConfig.body)\n      });\n    }\n\n    return request;\n  };\n\n  const sendRequest = async (serviceConfig, customRequestHeaders) => {\n    try {\n      const path = requestPath(serviceConfig.path, serviceConfig.params);\n      const params = requestInterceptor(serviceConfig, customRequestHeaders);\n      const response = await fetch(path, params);\n      const res = await response.json();\n      return responseMiddleware(res);\n    } catch (err) {\n      return errorInterceptor(err);\n    }\n  };\n\n  const get = (path, {\n    params = {}\n  } = {}, {\n    customRequestHeaders = {}\n  } = {}) => sendRequest({\n    method: 'GET',\n    path,\n    params\n  }, customRequestHeaders);\n\n  const post = (path, {\n    body\n  }, {\n    customRequestHeaders = {}\n  } = {}) => sendRequest({\n    method: 'POST',\n    path,\n    body\n  }, customRequestHeaders);\n\n  const put = (path, {\n    body\n  }, {\n    customRequestHeaders = {}\n  } = {}) => sendRequest({\n    method: 'PUT',\n    path,\n    body\n  }, customRequestHeaders);\n\n  const patch = (path, {\n    body\n  }, {\n    customRequestHeaders = {}\n  } = {}) => sendRequest({\n    method: 'PATCH',\n    path,\n    body\n  }, customRequestHeaders);\n\n  const del = (path, {\n    params\n  }, {\n    customRequestHeaders = {}\n  } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({\n    method: 'DELETE',\n    path,\n    params\n  }, customRequestHeaders);\n\n  return {\n    get,\n    post,\n    put,\n    patch,\n    delete: del\n  };\n};\n\nexport default apiService();","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/services/apiService.ts"],"names":["ENV_MOVIES","apiService","errorInterceptor","response","status","responseMiddleware","res","requestPath","path","params","PATH","BASE_URL","Object","keys","length","query","replace","trim","requestInterceptor","serviceConfig","customRequestHeaders","requestHeaders","request","method","cache","credentials","headers","body","assign","JSON","stringify","sendRequest","fetch","json","err","get","post","put","patch","del","delete"],"mappings":"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","sourcesContent":["// custom\nimport { ENV_MOVIES } from './utils/ENV';\n\nconst apiService = () => {\n  const errorInterceptor = (response: Response) => {\n    switch (response.status) {\n      case 401:\n      case 405:\n        // events.emit('NOT_AUTHENTICATED');\n        break;\n      case 403:\n        // events.emit('NOT_AUTHORISED');\n        // break;\n        // case 405:\n        //   events.emit('METHOD_NOT_ALLOWED');\n        break;\n      default:\n    }\n    throw response;\n  };\n\n  const responseMiddleware = (res: { [key: string]: any }[]) => res;\n\n  const requestPath = (path: string, params?: Record<string, string>) => {\n    const PATH = ENV_MOVIES.BASE_URL;\n    if (params && Object.keys(params).length > 1) {\n      let query = '';\n      for (const keys in params) {\n        query += keys + '=' + params[keys] + '&';\n      }\n      return PATH + path + '?' + query.replace(/&$/, '').trim();\n    }\n    return PATH + path;\n  };\n\n  const requestInterceptor = (\n    serviceConfig: {\n      path: string;\n      method: string;\n      params?: Record<string, string>;\n      body?: Record<string, string>;\n    },\n    customRequestHeaders: Record<string, string>\n  ) => {\n    const requestHeaders = {\n      'Content-Type': 'application/json',\n    };\n\n    let request = {\n      method: serviceConfig.method,\n      //mode: 'no-cors', // no-cors, *cors, same-origin\n      cache: 'default', // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        ...requestHeaders,\n        ...customRequestHeaders,\n      },\n    };\n\n    //request with body object not empty {}\n    if (serviceConfig.body && Object.keys(serviceConfig.body).length > 1) {\n      request = Object.assign(request, {\n        //convert to JSON object\n        body: JSON.stringify(serviceConfig.body),\n      });\n    }\n    return request as RequestInit;\n  };\n\n  const sendRequest = async (\n    serviceConfig: {\n      path: string;\n      method: string;\n      params?: Record<string, string>;\n      body?: Record<string, string>;\n    },\n    customRequestHeaders: Record<string, string>\n  ): Promise<{ [key: string]: any }[]> => {\n    try {\n      const path = requestPath(serviceConfig.path, serviceConfig.params);\n      const params = requestInterceptor(serviceConfig, customRequestHeaders);\n      const response = await fetch(path, params);\n      const res = await response.json();\n      return responseMiddleware(res);\n    } catch (err) {\n      return errorInterceptor(err);\n    }\n  };\n\n  const get = (\n    path: string,\n    { params = {} } = {},\n    { customRequestHeaders = {} } = {}\n  ) => sendRequest({ method: 'GET', path, params }, customRequestHeaders);\n\n  const post = (\n    path: string,\n    { body }: { body: { [key: string]: any } },\n    { customRequestHeaders = {} } = {}\n  ) => sendRequest({ method: 'POST', path, body }, customRequestHeaders);\n\n  const put = (\n    path: string,\n    { body }: { body: { [key: string]: any } },\n    { customRequestHeaders = {} } = {}\n  ) => sendRequest({ method: 'PUT', path, body }, customRequestHeaders);\n\n  const patch = (\n    path: string,\n    { body }: { body: { [key: string]: any } },\n    { customRequestHeaders = {} } = {}\n  ) => sendRequest({ method: 'PATCH', path, body }, customRequestHeaders);\n\n  const del = (\n    path: string,\n    { params }: { params?: Record<string, string> },\n    { customRequestHeaders = {} } = {} //this syntax means optional with defualt {}\n  ) => sendRequest({ method: 'DELETE', path, params }, customRequestHeaders);\n\n  return {\n    get,\n    post,\n    put,\n    patch,\n    delete: del,\n  };\n};\n\nexport default apiService();\n"]},"metadata":{},"sourceType":"module"}