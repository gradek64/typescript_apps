{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-wrap: wrap;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\nvar Movies = styled.div(_templateObject());\n\nvar Home = function Home() {\n  var _useState = useState([]),\n      movies = _useState[0],\n      getMovies = _useState[1];\n\n  var calculateAvarageRatings = function calculateAvarageRatings(Ratings) {\n    var percentageValue = [];\n    var overAllPerc = Ratings.map(function (_ref) {\n      var Value = _ref.Value;\n      return Value;\n    }).reduce(function (avaragePerc, rating, index) {\n      console.log('rating.....', rating);\n\n      if (rating.includes('/')) {\n        var _rating$split$map = rating.split('/').map(function (value) {\n          return Number(value);\n        }),\n            _rating$split$map2 = _slicedToArray(_rating$split$map, 2),\n            all = _rating$split$map2[0],\n            ratio = _rating$split$map2[1];\n\n        console.log([all, ratio]);\n        console.log('[all, ratio]', all / ratio);\n        var calcPercentage = all / ratio * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        var value = rating.match(/\\d+/)[0];\n        var percentage = Number(value);\n        console.log('percentage', percentage);\n        percentageValue.push(percentage);\n      }\n\n      console.log('percentageValueppppp.....', percentageValue);\n\n      if (index === Ratings.length - 1) {\n        var sumPercentage = percentageValue.reduce(function (acc, value) {\n          return acc + value;\n        });\n        console.log('percentageValue', percentageValue);\n        console.log('avaragePerc', sumPercentage);\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n    return overAllPerc;\n  };\n\n  var reduceData = function reduceData(response) {\n    var averageRatings = [];\n    return response.map(function (_ref2) {\n      var Title = _ref2.Title,\n          Poster = _ref2.Poster,\n          Ratings = _ref2.Ratings;\n      averageRatings.push({\n        avrRat: calculateAvarageRatings(Ratings)\n      });\n      console.log('averageRatings', averageRatings);\n      return {\n        Title: Title,\n        Poster: Poster,\n        averageRatings: averageRatings\n      };\n    });\n  };\n\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var result;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(generalAPIService.get('/api/movies'));\n\n            case 2:\n              result = _context.sent;\n              console.log('result', result);\n              getMovies(reduceData(result));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchData();\n  }, []);\n  return __jsx(\"main\", null, __jsx(Movies, null, movies.map(function (fields) {\n    return __jsx(Card, _extends({}, fields, {\n      key: fields.Title\n    }));\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["Movies","styled","Home","movies","getMovies","useState","calculateAvarageRatings","percentageValue","overAllPerc","Value","console","rating","all","ratio","Number","calcPercentage","value","percentage","index","Ratings","sumPercentage","acc","avaragePerc","reduceData","averageRatings","Title","Poster","avrRat","useEffect","fetchData","result","generalAPIService","fields"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\n\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Home = () => {\n  const [movies, getMovies] = useState([]);\n\n  interface ImoviesResponseFields {\n    Title: string;\n    Poster: string;\n    Ratings: {}[];\n    key: string;\n  }\n  const calculateAvarageRatings = (Ratings: {}[]) => {\n    const percentageValue: number[] = [];\n\n    const overAllPerc = Ratings.map(\n      ({ Value }: { Value: string }) => Value\n    ).reduce((avaragePerc, rating, index) => {\n      console.log('rating.....', rating);\n\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map((value) => Number(value));\n        console.log([all, ratio]);\n        console.log('[all, ratio]', all / ratio);\n        const calcPercentage = (all / ratio) * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        console.log('percentage', percentage);\n        percentageValue.push(percentage);\n      }\n\n      console.log('percentageValueppppp.....', percentageValue);\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce(\n          (acc, value) => acc + value\n        );\n        console.log('percentageValue', percentageValue);\n        console.log('avaragePerc', sumPercentage);\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n\n    return overAllPerc;\n  };\n  const reduceData = (response: {}[]) => {\n    let averageRatings: { avrRat: number }[] = [];\n    return response.map(({ Title, Poster, Ratings }: ImoviesResponseFields) => {\n      averageRatings.push({ avrRat: calculateAvarageRatings(Ratings) });\n\n      console.log('averageRatings', averageRatings);\n\n      return { Title, Poster, averageRatings };\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      console.log('result', result);\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <main>\n      <Movies>\n        {movies.map((fields) => (\n          <Card {...fields} key={fields.Title} />\n        ))}\n      </Movies>\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}