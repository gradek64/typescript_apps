{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Home = () => {\n  const {\n    0: movies,\n    1: getMovies\n  } = useState([]);\n\n  const calculateAvarageRatings = Ratings => {\n    const percentageValue = [];\n    const overAllPerc = Ratings.map(({\n      Value\n    }) => Value).reduce((avaragePerc, rating, index) => {\n      console.log('rating.....', rating);\n\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map(value => Number(value));\n        console.log([all, ratio]);\n        console.log('[all, ratio]', all / ratio);\n        const calcPercentage = all / ratio * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        console.log('percentage', percentage);\n        percentageValue.push(percentage);\n      }\n\n      console.log('percentageValueppppp.....', percentageValue);\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce((acc, value) => acc + value);\n        console.log('percentageValue', percentageValue);\n        console.log('avaragePerc', sumPercentage);\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n    return overAllPerc;\n  };\n\n  const reduceData = response => {\n    const averageRatings = [];\n    return response.map(({\n      Title,\n      Poster,\n      Ratings\n    }) => {\n      averageRatings.push({\n        avrRat: calculateAvarageRatings(Ratings)\n      });\n      console.log('averageRatings', averageRatings);\n      return {\n        Title,\n        Poster,\n        averageRatings\n      };\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      console.log('result', result);\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, []);\n  return __jsx(\"main\", null, __jsx(Movies, null, movies.map((fields, i) => __jsx(Card, _extends({}, fields, {\n    key: fields.Title,\n    cardNumber: `card${i}`\n  })))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["React","useEffect","useState","styled","Card","generalAPIService","Movies","div","Home","movies","getMovies","calculateAvarageRatings","Ratings","percentageValue","overAllPerc","map","Value","reduce","avaragePerc","rating","index","console","log","includes","all","ratio","split","value","Number","calcPercentage","push","match","percentage","length","sumPercentage","acc","reduceData","response","averageRatings","Title","Poster","avrRat","fetchData","result","get","fields","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\n\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Home = () => {\n  const [movies, getMovies] = useState([]);\n\n  interface ImoviesResponseFields {\n    Title: string;\n    Poster: string;\n    Ratings: {}[];\n    key: string;\n  }\n  const calculateAvarageRatings = (Ratings: {}[]) => {\n    const percentageValue: number[] = [];\n\n    const overAllPerc = Ratings.map(\n      ({ Value }: { Value: string }) => Value\n    ).reduce((avaragePerc, rating, index) => {\n      console.log('rating.....', rating);\n\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map((value) => Number(value));\n        console.log([all, ratio]);\n        console.log('[all, ratio]', all / ratio);\n        const calcPercentage = (all / ratio) * 100;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        console.log('percentage', percentage);\n        percentageValue.push(percentage);\n      }\n\n      console.log('percentageValueppppp.....', percentageValue);\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce(\n          (acc, value) => acc + value\n        );\n        console.log('percentageValue', percentageValue);\n        console.log('avaragePerc', sumPercentage);\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n\n    return overAllPerc;\n  };\n  const reduceData = (response: {}[]) => {\n    const averageRatings: { avrRat: number }[] = [];\n    return response.map(({ Title, Poster, Ratings }: ImoviesResponseFields) => {\n      averageRatings.push({ avrRat: calculateAvarageRatings(Ratings) });\n\n      console.log('averageRatings', averageRatings);\n\n      return { Title, Poster, averageRatings };\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      console.log('result', result);\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <main>\n      <Movies>\n        {movies.map((fields, i) => (\n          <Card {...fields} key={fields.Title} cardNumber={`card${i}`} />\n        ))}\n      </Movies>\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}