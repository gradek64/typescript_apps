{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Home = () => {\n  const {\n    0: movies,\n    1: getMovies\n  } = useState([]);\n\n  const calculateAvarageRatings = Ratings => {\n    const overAllPerc = Ratings.map(({\n      Value\n    }) => Value).reduce((avaragePerc, rating, index) => {\n      let percentageValue;\n\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map(value => Number(value));\n        const calcPercentage = all / ratio;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce((acc, value) => acc + value);\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n    return overAllPerc;\n  };\n\n  const reduceData = response => {\n    return response.map(({\n      Title,\n      Poster,\n      Ratings\n    }) => {\n      const averageRatings = calculateAvarageRatings(Ratings);\n      console.log('averageRatings', averageRatings);\n      return {\n        Title,\n        Poster,\n        averageRatings\n      };\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      console.log('result', result);\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, []);\n  return __jsx(\"main\", null, __jsx(Movies, null, movies.map(fields => __jsx(Card, _extends({}, fields, {\n    key: fields.Title\n  })))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["Movies","styled","div","Home","getMovies","useState","calculateAvarageRatings","Ratings","overAllPerc","Value","rating","value","Number","calcPercentage","all","percentageValue","percentage","index","sumPercentage","acc","avaragePerc","reduceData","response","averageRatings","console","useEffect","fetchData","result","generalAPIService","fields","Title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from './Card/Card';\nimport generalAPIService from './services/apiService';\n\nconst Movies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Home = () => {\n  const [movies, getMovies] = useState([]);\n\n  interface ImoviesResponseFields {\n    Title: string;\n    Poster: string;\n    Ratings: {}[];\n    key: string;\n  }\n  const calculateAvarageRatings = (Ratings: {}[]) => {\n    const overAllPerc = Ratings.map(\n      ({ Value }: { Value: string }) => Value\n    ).reduce((avaragePerc, rating, index) => {\n      let percentageValue: number[];\n\n      if (rating.includes('/')) {\n        const [all, ratio] = rating.split('/').map((value) => Number(value));\n        const calcPercentage = all / ratio;\n        percentageValue.push(calcPercentage);\n      }\n\n      if (rating.includes('%')) {\n        const value = rating.match(/\\d+/)[0];\n        const percentage = Number(value);\n        percentageValue.push(percentage);\n      }\n\n      if (index === Ratings.length - 1) {\n        const sumPercentage = percentageValue.reduce(\n          (acc, value) => acc + value\n        );\n        avaragePerc = sumPercentage / Ratings.length;\n        return avaragePerc;\n      }\n    }, 0);\n\n    return overAllPerc;\n  };\n  const reduceData = (response: {}[]) => {\n    return response.map(({ Title, Poster, Ratings }: ImoviesResponseFields) => {\n      const averageRatings = calculateAvarageRatings(Ratings);\n\n      console.log('averageRatings', averageRatings);\n\n      return { Title, Poster, averageRatings };\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      console.log('result', result);\n      getMovies(reduceData(result));\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <main>\n      <Movies>\n        {movies.map((fields) => (\n          <Card {...fields} key={fields.Title} />\n        ))}\n      </Movies>\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}