{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react'; //custom\n\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport { MoviesContext } from '../../../pages/index';\nimport Input from '../../contentComponents/Input/Input';\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\n\nfunction FiltersGroup() {\n  const {\n    movies,\n    updateState\n  } = useContext(MoviesContext);\n\n  const updateViewWithFiltersResponse = (genre, filter, filterSelected) => {\n    console.log(`?${genre}=${filter}`);\n    console.log(`selected=${filterSelected}`);\n  };\n\n  const callToAction = genre => filter => {\n    //console.log('filter', { [genre]: filter });\n    const objectValues = Object.keys(filter).map(key => {\n      const keyLowerCase = key.toLowerCase();\n      const value = filter[key];\n      return [keyLowerCase, value];\n    });\n    const [filterKey] = objectValues;\n    console.log(filterKey); //updateViewWithFiltersResponse(genre.toLowerCase(), filterKey, filterValue)\n    //updateState(yes ? 'True' : 'False');\n  };\n\n  const showFilters = 2;\n\n  const displayFilters = (ArrOfFilters, length) => ({\n    displayed: ArrOfFilters.slice(0, showFilters),\n    hidden: ArrOfFilters.slice(showFilters, length)\n  });\n\n  let metaScoreStrings = '';\n\n  const calculateMetaScore = score => {\n    if (score < 60) {\n      metaScoreStrings = '< 60';\n    }\n\n    if (score > 60 && score < 80) {\n      metaScoreStrings = 'between 60 & 80';\n    }\n\n    if (score > 80 && score < 90) {\n      metaScoreStrings = 'between 80 & 90';\n    }\n\n    if (score > 90) {\n      metaScoreStrings = '> 90';\n    }\n\n    return metaScoreStrings;\n  };\n\n  const generate = value => (obj, element) => {\n    if (value === 'Metascore') {\n      obj = generateFilters(calculateMetaScore(Number(element[value])), movies.length);\n      return obj;\n    }\n\n    obj = generateFilters(element[value], movies.length);\n    return obj;\n  }; //static filters\n\n\n  const watched = Object.entries({\n    YES: movies.filter(({\n      Watched\n    }) => Watched === 'True').length,\n    NO: movies.filter(({\n      Watched\n    }) => Watched === 'False').length\n  });\n  const savedInWatched = Object.entries({\n    YES: movies.filter(({\n      Saved\n    }) => Saved === 'True').length,\n    NO: movies.filter(({\n      Saved\n    }) => Saved === 'False').length\n  });\n  const type = Object.entries({\n    MOVIE: movies.filter(({\n      Type\n    }) => Type === 'movie').length,\n    SERIES: movies.filter(({\n      Type\n    }) => Type === 'series').length\n  }); //generated filters\n\n  const metasArr = Object.entries(movies.reduce(generate('Metascore'), {}));\n  const YearArr = Object.entries(movies.reduce(generate('Year'), {}));\n  const genreArr = Object.entries(movies.reduce(generate('Genre'), {}));\n  const actorsArr = Object.entries(movies.reduce(generate('Actors'), {}));\n  const directorArr = Object.entries(movies.reduce(generate('Director'), {}));\n  const metasArrFormat = displayFilters(metasArr, metasArr.length);\n  const yearArrFormat = displayFilters(YearArr, YearArr.length);\n  const genreArrFormat = displayFilters(genreArr, genreArr.length);\n  const actorsArrFormat = displayFilters(actorsArr, actorsArr.length);\n  const directorArrFormat = displayFilters(directorArr, directorArr.length);\n  const filtersLabels = {\n    TYPE: displayFilters(type, type.length),\n    YEARS: yearArrFormat,\n    METASCORE: metasArrFormat,\n    GENRE: genreArrFormat,\n    WATCHED: displayFilters(watched, watched.length),\n    'SAVED IN WATCHED LIST': displayFilters(savedInWatched, savedInWatched.length),\n    ACTORS: actorsArrFormat,\n    DIRECTORS: directorArrFormat\n  };\n  return __jsx(React.Fragment, null, __jsx(FilterContainer, null, Object.entries(filtersLabels).map(([title, filters]) => __jsx(\"div\", {\n    className: \"accordion\",\n    key: title\n  }, __jsx(Accordion, {\n    open: true,\n    shevron: false,\n    clickDisable: true,\n    title: title\n  }, __jsx(\"div\", null, filters['displayed'].map(([key, value]) => __jsx(\"div\", {\n    key: key\n  }, __jsx(Input, {\n    name: key,\n    value: `${key}(${value})`,\n    callback: callToAction(title)\n  }))))), filters['hidden'].length > 0 && __jsx(Accordion, {\n    title: 'see more',\n    directional: true,\n    shevron: false\n  }, filters['hidden'].map(([key, value]) => __jsx(\"div\", {\n    key: key\n  }, __jsx(Input, {\n    name: key,\n    value: `${key}(${value})`,\n    callback: callToAction\n  }))))))));\n} //make sure it render only the amount of movies.length\n\n\nexport default React.memo(FiltersGroup);","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/FiltersGroup.tsx"],"names":["React","useContext","Accordion","generateFilters","styled","MoviesContext","Input","FilterContainer","div","FiltersGroup","movies","updateState","updateViewWithFiltersResponse","genre","filter","filterSelected","console","log","callToAction","objectValues","Object","keys","map","key","keyLowerCase","toLowerCase","value","filterKey","showFilters","displayFilters","ArrOfFilters","length","displayed","slice","hidden","metaScoreStrings","calculateMetaScore","score","generate","obj","element","Number","watched","entries","YES","Watched","NO","savedInWatched","Saved","type","MOVIE","Type","SERIES","metasArr","reduce","YearArr","genreArr","actorsArr","directorArr","metasArrFormat","yearArrFormat","genreArrFormat","actorsArrFormat","directorArrFormat","filtersLabels","TYPE","YEARS","METASCORE","GENRE","WATCHED","ACTORS","DIRECTORS","title","filters","memo"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\n//custom\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport { MoviesContext } from '../../../pages/index';\nimport Input from '../../contentComponents/Input/Input';\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\n\nfunction FiltersGroup() {\n  const { movies, updateState } = useContext(MoviesContext);\n\n  const updateViewWithFiltersResponse = (genre: string, filter: string, filterSelected: boolean | string) => {\n    console.log(`?${genre}=${filter}`)\n    console.log(`selected=${filterSelected}`)\n  }\n\n  const callToAction = (genre: string) => (filter: any) => {\n    //console.log('filter', { [genre]: filter });\n    const objectValues = Object.keys(filter).map((key) => {\n      const keyLowerCase = key.toLowerCase()\n      const value = filter[key]\n      return [keyLowerCase, value]\n    })\n    const [filterKey] = objectValues\n    console.log(filterKey)\n    //updateViewWithFiltersResponse(genre.toLowerCase(), filterKey, filterValue)\n\n    //updateState(yes ? 'True' : 'False');\n  };\n  const showFilters = 2;\n  const displayFilters = (\n    ArrOfFilters: [string, unknown][],\n    length: number\n  ) => ({\n    displayed: ArrOfFilters.slice(0, showFilters),\n    hidden: ArrOfFilters.slice(showFilters, length),\n  });\n\n  let metaScoreStrings = '';\n  const calculateMetaScore = (score: number) => {\n    if (score < 60) {\n      metaScoreStrings = '< 60';\n    }\n    if (score > 60 && score < 80) {\n      metaScoreStrings = 'between 60 & 80';\n    }\n    if (score > 80 && score < 90) {\n      metaScoreStrings = 'between 80 & 90';\n    }\n    if (score > 90) {\n      metaScoreStrings = '> 90';\n    }\n    return metaScoreStrings;\n  };\n\n  const generate = (value: string) => (obj: {}, element: {}) => {\n    if (value === 'Metascore') {\n      obj = generateFilters(\n        calculateMetaScore(Number(element[value])),\n        movies.length\n      );\n      return obj;\n    }\n    obj = generateFilters(element[value], movies.length);\n    return obj;\n  };\n\n  //static filters\n  const watched = Object.entries({\n    YES: movies.filter(({ Watched }) => Watched === 'True').length,\n    NO: movies.filter(({ Watched }) => Watched === 'False').length,\n  });\n  const savedInWatched = Object.entries({\n    YES: movies.filter(({ Saved }) => Saved === 'True').length,\n    NO: movies.filter(({ Saved }) => Saved === 'False').length,\n  });\n  const type = Object.entries({\n    MOVIE: movies.filter(({ Type }) => Type === 'movie').length,\n    SERIES: movies.filter(({ Type }) => Type === 'series').length,\n  });\n  //generated filters\n  const metasArr = Object.entries(movies.reduce(generate('Metascore'), {}));\n  const YearArr = Object.entries(movies.reduce(generate('Year'), {}));\n  const genreArr = Object.entries(movies.reduce(generate('Genre'), {}));\n  const actorsArr = Object.entries(movies.reduce(generate('Actors'), {}));\n  const directorArr = Object.entries(movies.reduce(generate('Director'), {}));\n\n  const metasArrFormat = displayFilters(metasArr, metasArr.length);\n  const yearArrFormat = displayFilters(YearArr, YearArr.length);\n  const genreArrFormat = displayFilters(genreArr, genreArr.length);\n  const actorsArrFormat = displayFilters(actorsArr, actorsArr.length);\n  const directorArrFormat = displayFilters(directorArr, directorArr.length);\n\n  const filtersLabels = {\n    TYPE: displayFilters(type, type.length),\n    YEARS: yearArrFormat,\n    METASCORE: metasArrFormat,\n    GENRE: genreArrFormat,\n    WATCHED: displayFilters(watched, watched.length),\n    'SAVED IN WATCHED LIST': displayFilters(\n      savedInWatched,\n      savedInWatched.length\n    ),\n    ACTORS: actorsArrFormat,\n    DIRECTORS: directorArrFormat,\n  };\n\n  return (\n    <>\n      <FilterContainer>\n        {Object.entries(filtersLabels).map(([title, filters]) => (\n          <div className=\"accordion\" key={title}>\n            <Accordion open shevron={false} clickDisable={true} title={title}>\n              <div>\n                {filters['displayed'].map(([key, value]) => (\n                  <div key={key}>\n                    <Input\n                      name={key}\n                      value={`${key}(${value})`}\n                      callback={callToAction(title)}\n                    />\n                  </div>\n                ))}\n              </div>\n            </Accordion>\n            {filters['hidden'].length > 0 && (\n              <Accordion title={'see more'} directional={true} shevron={false}>\n                {filters['hidden'].map(([key, value]) => (\n                  <div key={key}>\n                    <Input\n                      name={key}\n                      value={`${key}(${value})`}\n                      callback={callToAction}\n                    />\n                  </div>\n                ))}\n              </Accordion>\n            )}\n          </div>\n        ))}\n      </FilterContainer>\n    </>\n  );\n}\n\n//make sure it render only the amount of movies.length\nexport default React.memo(FiltersGroup);\n"]},"metadata":{},"sourceType":"module"}