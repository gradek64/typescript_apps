{"ast":null,"code":"let actorsStringData = '';\nlet trackIndex = 1;\n\nconst generateFilters = (stringData, allMovies) => {\n  //first combine actors results\n  const isComaSeperated = stringData.trim().includes(',') ? '' : ',';\n  actorsStringData += stringData + isComaSeperated;\n  console.log('actorsStringData', actorsStringData);\n  const allActors = [...actorsStringData.trim().split(',')]; //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the cod\n\n  function findDuplicate(arr) {\n    const object = {};\n    arr.forEach(function (item) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('trackIndex', trackIndex);\n\n  if (trackIndex === allMovies) {\n    console.log('allActors', allActors);\n    const ss = findDuplicate(allActors);\n    return ss;\n  } else {\n    trackIndex++; //return;\n  }\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["actorsStringData","trackIndex","generateFilters","isComaSeperated","stringData","console","allActors","object","arr","trimStirng","item","ss","findDuplicate"],"mappings":"AAAA,IAAIA,gBAAgB,GAApB,EAAA;AACA,IAAIC,UAAU,GAAd,CAAA;;AACA,MAAMC,eAAe,GAAG,CAAA,UAAA,EAAA,SAAA,KAA2C;AACjE;AACA,QAAMC,eAAe,GAAGC,UAAU,CAAVA,IAAAA,GAAAA,QAAAA,CAAAA,GAAAA,IAAAA,EAAAA,GAAxB,GAAA;AACAJ,EAAAA,gBAAgB,IAAII,UAAU,GAA9BJ,eAAAA;AAEAK,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,kBAAAA,EAAAA,gBAAAA;AAEA,QAAMC,SAAS,GAAG,CAAC,GAAGN,gBAAgB,CAAhBA,IAAAA,GAAAA,KAAAA,CAP2C,GAO3CA,CAAJ,CAAlB,CAPiE,CASjE;AACA;;AAEA,WAAA,aAAA,CAAA,GAAA,EAAsC;AACpC,UAAMO,MAAM,GAAZ,EAAA;AACAC,IAAAA,GAAG,CAAHA,OAAAA,CAAY,UAAA,IAAA,EAAwB;AAClC,YAAMC,UAAU,GAAGC,IAAI,CAAvB,IAAmBA,EAAnB;AACA,UAAI,CAACH,MAAM,CAAX,UAAW,CAAX,EAAyBA,MAAM,CAANA,UAAM,CAANA,GAAAA,CAAAA;AACzBA,MAAAA,MAAM,CAANA,UAAM,CAANA,IAAAA,CAAAA;AAHFC,KAAAA;AAKA,WAAA,MAAA;AACD;;AAEDH,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,YAAAA,EAAAA,UAAAA;;AACA,MAAIJ,UAAU,KAAd,SAAA,EAA8B;AAC5BI,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,WAAAA,EAAAA,SAAAA;AACA,UAAMM,EAAE,GAAGC,aAAa,CAAxB,SAAwB,CAAxB;AAEA,WAAA,EAAA;AAJF,GAAA,MAKO;AACLX,IAAAA,UADK,GAAA,CAEL;AACD;AA/BH,CAAA;;AAkCA,SAAA,eAAA","sourcesContent":["let actorsStringData = '';\nlet trackIndex = 1;\nconst generateFilters = (stringData: string, allMovies: number) => {\n  //first combine actors results\n  const isComaSeperated = stringData.trim().includes(',') ? '' : ',';\n  actorsStringData += stringData + isComaSeperated;\n\n  console.log('actorsStringData', actorsStringData);\n\n  const allActors = [...actorsStringData.trim().split(',')];\n\n  //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the cod\n\n  function findDuplicate(arr: string[]) {\n    const object = {};\n    arr.forEach(function (item: string) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('trackIndex', trackIndex);\n  if (trackIndex === allMovies) {\n    console.log('allActors', allActors);\n    const ss = findDuplicate(allActors);\n\n    return ss;\n  } else {\n    trackIndex++;\n    //return;\n  }\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}