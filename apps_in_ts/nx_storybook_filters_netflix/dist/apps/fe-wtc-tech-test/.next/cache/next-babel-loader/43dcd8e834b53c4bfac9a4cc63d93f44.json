{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react'; //custom\n\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport { MoviesContext } from '../../../pages/index';\nimport Input from '../../contentComponents/Input/Input';\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\n\nfunction FiltersGroup() {\n  const {\n    movies,\n    updateState\n  } = useContext(MoviesContext);\n\n  const updateViewWithFiltersResponse = (genre, filter, filterSelected) => {\n    console.log(`?${genre}=${filter}`);\n    console.log(`selected=${filterSelected}`);\n  };\n\n  const callToAction = genre => filter => {\n    //console.log('filter', { [genre]: filter });\n    const objectValues = Object.keys(filter).map(key => {\n      const keyLowerCase = key.toLowerCase();\n      const value = filter[key];\n      return [keyLowerCase, value];\n    });\n    const [filterKey, tt] = objectValues;\n    const ss = [1, 2];\n    const [one, two] = ss;\n    console.log(filterKey, tt);\n    console.log(one, two); //updateViewWithFiltersResponse(genre.toLowerCase(), filterKey, filterValue)\n    //updateState(yes ? 'True' : 'False');\n  };\n\n  const showFilters = 2;\n\n  const displayFilters = (ArrOfFilters, length) => ({\n    displayed: ArrOfFilters.slice(0, showFilters),\n    hidden: ArrOfFilters.slice(showFilters, length)\n  });\n\n  let metaScoreStrings = '';\n\n  const calculateMetaScore = score => {\n    if (score < 60) {\n      metaScoreStrings = '< 60';\n    }\n\n    if (score > 60 && score < 80) {\n      metaScoreStrings = 'between 60 & 80';\n    }\n\n    if (score > 80 && score < 90) {\n      metaScoreStrings = 'between 80 & 90';\n    }\n\n    if (score > 90) {\n      metaScoreStrings = '> 90';\n    }\n\n    return metaScoreStrings;\n  };\n\n  const generate = value => (obj, element) => {\n    if (value === 'Metascore') {\n      obj = generateFilters(calculateMetaScore(Number(element[value])), movies.length);\n      return obj;\n    }\n\n    obj = generateFilters(element[value], movies.length);\n    return obj;\n  }; //static filters\n\n\n  const watched = Object.entries({\n    YES: movies.filter(({\n      Watched\n    }) => Watched === 'True').length,\n    NO: movies.filter(({\n      Watched\n    }) => Watched === 'False').length\n  });\n  const savedInWatched = Object.entries({\n    YES: movies.filter(({\n      Saved\n    }) => Saved === 'True').length,\n    NO: movies.filter(({\n      Saved\n    }) => Saved === 'False').length\n  });\n  const type = Object.entries({\n    MOVIE: movies.filter(({\n      Type\n    }) => Type === 'movie').length,\n    SERIES: movies.filter(({\n      Type\n    }) => Type === 'series').length\n  }); //generated filters\n\n  const metasArr = Object.entries(movies.reduce(generate('Metascore'), {}));\n  const YearArr = Object.entries(movies.reduce(generate('Year'), {}));\n  const genreArr = Object.entries(movies.reduce(generate('Genre'), {}));\n  const actorsArr = Object.entries(movies.reduce(generate('Actors'), {}));\n  const directorArr = Object.entries(movies.reduce(generate('Director'), {}));\n  const metasArrFormat = displayFilters(metasArr, metasArr.length);\n  const yearArrFormat = displayFilters(YearArr, YearArr.length);\n  const genreArrFormat = displayFilters(genreArr, genreArr.length);\n  const actorsArrFormat = displayFilters(actorsArr, actorsArr.length);\n  const directorArrFormat = displayFilters(directorArr, directorArr.length);\n  const filtersLabels = {\n    TYPE: displayFilters(type, type.length),\n    YEARS: yearArrFormat,\n    METASCORE: metasArrFormat,\n    GENRE: genreArrFormat,\n    WATCHED: displayFilters(watched, watched.length),\n    'SAVED IN WATCHED LIST': displayFilters(savedInWatched, savedInWatched.length),\n    ACTORS: actorsArrFormat,\n    DIRECTORS: directorArrFormat\n  };\n  return __jsx(React.Fragment, null, __jsx(FilterContainer, null, Object.entries(filtersLabels).map(([title, filters]) => __jsx(\"div\", {\n    className: \"accordion\",\n    key: title\n  }, __jsx(Accordion, {\n    open: true,\n    shevron: false,\n    clickDisable: true,\n    title: title\n  }, __jsx(\"div\", null, filters['displayed'].map(([key, value]) => __jsx(\"div\", {\n    key: key\n  }, __jsx(Input, {\n    name: key,\n    value: `${key}(${value})`,\n    callback: callToAction(title)\n  }))))), filters['hidden'].length > 0 && __jsx(Accordion, {\n    title: 'see more',\n    directional: true,\n    shevron: false\n  }, filters['hidden'].map(([key, value]) => __jsx(\"div\", {\n    key: key\n  }, __jsx(Input, {\n    name: key,\n    value: `${key}(${value})`,\n    callback: callToAction\n  }))))))));\n} //make sure it render only the amount of movies.length\n\n\nexport default React.memo(FiltersGroup);","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/FiltersGroup.tsx"],"names":["FilterContainer","styled","div","updateState","useContext","updateViewWithFiltersResponse","console","genre","filter","filterSelected","callToAction","objectValues","key","keyLowerCase","value","ss","showFilters","displayFilters","displayed","ArrOfFilters","hidden","metaScoreStrings","calculateMetaScore","score","generate","obj","generateFilters","Number","element","movies","watched","YES","Watched","NO","length","savedInWatched","Saved","type","MOVIE","Type","SERIES","metasArr","Object","YearArr","genreArr","actorsArr","directorArr","metasArrFormat","yearArrFormat","genreArrFormat","actorsArrFormat","directorArrFormat","filtersLabels","TYPE","YEARS","METASCORE","GENRE","WATCHED","ACTORS","DIRECTORS","title","filters","React"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\n//custom\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport { MoviesContext } from '../../../pages/index';\nimport Input from '../../contentComponents/Input/Input';\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\n\nfunction FiltersGroup() {\n  const { movies, updateState } = useContext(MoviesContext);\n\n  const updateViewWithFiltersResponse = (genre: string, filter: string, filterSelected: boolean | string) => {\n    console.log(`?${genre}=${filter}`)\n    console.log(`selected=${filterSelected}`)\n  }\n\n  const callToAction = (genre: string) => (filter: any) => {\n    //console.log('filter', { [genre]: filter });\n    const objectValues = Object.keys(filter).map((key) => {\n      const keyLowerCase = key.toLowerCase()\n      const value = filter[key]\n      return [keyLowerCase, value]\n    })\n    const [filterKey, tt] = objectValues\n    const ss = [1, 2]\n    const [one, two] = ss\n    console.log(filterKey, tt)\n    console.log(one, two)\n    //updateViewWithFiltersResponse(genre.toLowerCase(), filterKey, filterValue)\n\n    //updateState(yes ? 'True' : 'False');\n  };\n  const showFilters = 2;\n  const displayFilters = (\n    ArrOfFilters: [string, unknown][],\n    length: number\n  ) => ({\n    displayed: ArrOfFilters.slice(0, showFilters),\n    hidden: ArrOfFilters.slice(showFilters, length),\n  });\n\n  let metaScoreStrings = '';\n  const calculateMetaScore = (score: number) => {\n    if (score < 60) {\n      metaScoreStrings = '< 60';\n    }\n    if (score > 60 && score < 80) {\n      metaScoreStrings = 'between 60 & 80';\n    }\n    if (score > 80 && score < 90) {\n      metaScoreStrings = 'between 80 & 90';\n    }\n    if (score > 90) {\n      metaScoreStrings = '> 90';\n    }\n    return metaScoreStrings;\n  };\n\n  const generate = (value: string) => (obj: {}, element: {}) => {\n    if (value === 'Metascore') {\n      obj = generateFilters(\n        calculateMetaScore(Number(element[value])),\n        movies.length\n      );\n      return obj;\n    }\n    obj = generateFilters(element[value], movies.length);\n    return obj;\n  };\n\n  //static filters\n  const watched = Object.entries({\n    YES: movies.filter(({ Watched }) => Watched === 'True').length,\n    NO: movies.filter(({ Watched }) => Watched === 'False').length,\n  });\n  const savedInWatched = Object.entries({\n    YES: movies.filter(({ Saved }) => Saved === 'True').length,\n    NO: movies.filter(({ Saved }) => Saved === 'False').length,\n  });\n  const type = Object.entries({\n    MOVIE: movies.filter(({ Type }) => Type === 'movie').length,\n    SERIES: movies.filter(({ Type }) => Type === 'series').length,\n  });\n  //generated filters\n  const metasArr = Object.entries(movies.reduce(generate('Metascore'), {}));\n  const YearArr = Object.entries(movies.reduce(generate('Year'), {}));\n  const genreArr = Object.entries(movies.reduce(generate('Genre'), {}));\n  const actorsArr = Object.entries(movies.reduce(generate('Actors'), {}));\n  const directorArr = Object.entries(movies.reduce(generate('Director'), {}));\n\n  const metasArrFormat = displayFilters(metasArr, metasArr.length);\n  const yearArrFormat = displayFilters(YearArr, YearArr.length);\n  const genreArrFormat = displayFilters(genreArr, genreArr.length);\n  const actorsArrFormat = displayFilters(actorsArr, actorsArr.length);\n  const directorArrFormat = displayFilters(directorArr, directorArr.length);\n\n  const filtersLabels = {\n    TYPE: displayFilters(type, type.length),\n    YEARS: yearArrFormat,\n    METASCORE: metasArrFormat,\n    GENRE: genreArrFormat,\n    WATCHED: displayFilters(watched, watched.length),\n    'SAVED IN WATCHED LIST': displayFilters(\n      savedInWatched,\n      savedInWatched.length\n    ),\n    ACTORS: actorsArrFormat,\n    DIRECTORS: directorArrFormat,\n  };\n\n  return (\n    <>\n      <FilterContainer>\n        {Object.entries(filtersLabels).map(([title, filters]) => (\n          <div className=\"accordion\" key={title}>\n            <Accordion open shevron={false} clickDisable={true} title={title}>\n              <div>\n                {filters['displayed'].map(([key, value]) => (\n                  <div key={key}>\n                    <Input\n                      name={key}\n                      value={`${key}(${value})`}\n                      callback={callToAction(title)}\n                    />\n                  </div>\n                ))}\n              </div>\n            </Accordion>\n            {filters['hidden'].length > 0 && (\n              <Accordion title={'see more'} directional={true} shevron={false}>\n                {filters['hidden'].map(([key, value]) => (\n                  <div key={key}>\n                    <Input\n                      name={key}\n                      value={`${key}(${value})`}\n                      callback={callToAction}\n                    />\n                  </div>\n                ))}\n              </Accordion>\n            )}\n          </div>\n        ))}\n      </FilterContainer>\n    </>\n  );\n}\n\n//make sure it render only the amount of movies.length\nexport default React.memo(FiltersGroup);\n"]},"metadata":{},"sourceType":"module"}