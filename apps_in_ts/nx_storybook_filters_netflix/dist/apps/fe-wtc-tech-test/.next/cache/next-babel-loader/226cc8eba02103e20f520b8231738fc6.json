{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport styled from 'styled-components'; //custom\n\nimport Card from '../app/contentComponents/Card/Card';\nimport generalAPIService from '../app/services/apiService';\nimport FiltersGroup from '../app/contentComponents/FiltersGroup/FiltersGroup';\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n`;\nconst Filters = styled.div`\n  display: flex;\n  width: 20%;\n  background-color: grey;\n`;\nconst Movies = styled.div`\n  display: flex;\n  width: 80%;\n  alignself: flex-start;\n  flex-wrap: wrap;\n`;\nconst initialState = {\n  movies: [{\n    Title: 'string',\n    Poster: 'string',\n    Ratings: [{}],\n    key: 'string',\n    Saved: 'True',\n    Watched: 'False',\n    Type: 'movie',\n    Actors: 'string',\n    Director: 'string',\n    Genre: 'string',\n    Year: 'string',\n    Metascore: 'string'\n  }],\n  updateState: state => {\n    console.log('....state', state);\n  }\n};\nexport const MoviesContext = React.createContext(initialState);\nconst {\n  Provider,\n  Consumer\n} = MoviesContext;\nlet globalState = [];\nlet previosglobalState = [];\n/*eslint no-case-declarations: \"off\"*/\n\nconst movieReducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_FROM_FETCH':\n      /* [\n        ...action.payload.filter(({ Watched }) =>\n          JSON.parse(Watched.toLowerCase())\n        ),\n      ]; */\n      return _objectSpread({}, state, {\n        movies: [...action.payload]\n      });\n\n    case 'FILTER_WATCH':\n      console.log('gagdgegeeeeeeeee', action.payload);\n      console.log('state', state);\n      const actualState = globalState;\n      return _objectSpread({}, state, {\n        movies: [...state.movies.filter(({\n          Watched\n        }) => Watched === action.payload)]\n      });\n    // return state;\n\n    default:\n      return state;\n  }\n};\n\nconst Home = () => {\n  const {\n    0: loading,\n    1: isLoading\n  } = useState(true); //const [movies, getMovies] = useState([]);\n\n  const {\n    0: store,\n    1: dispatch\n  } = useReducer(movieReducer, initialState);\n  const reduceData = useCallback(response => {\n    return response.map(({\n      Title,\n      Poster,\n      Ratings,\n      Watched,\n      Saved,\n      Actors,\n      Director,\n      Genre,\n      Year,\n      Type,\n      Metascore\n    }) => {\n      return {\n        Title,\n        Poster,\n        Ratings,\n        Watched,\n        Saved,\n        Actors,\n        Director,\n        Genre,\n        Year,\n        Type,\n        Metascore\n      };\n    });\n  }, []);\n  useEffect(() => {\n    isLoading(true);\n\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      const reducedData = reduceData(result);\n      globalState = reducedData;\n      dispatch({\n        type: 'UPDATE_FROM_FETCH',\n        payload: reducedData\n      });\n      isLoading(false);\n    };\n\n    fetchData();\n  }, [reduceData]);\n  console.log('gagdg', store);\n  return __jsx(\"main\", null, loading && 'movies are loading', !loading && __jsx(Provider, {\n    value: _objectSpread({}, store, {\n      updateState: state => dispatch({\n        type: 'FILTER_WATCH',\n        payload: state\n      })\n    })\n  }, __jsx(Wrapper, null, __jsx(Filters, null, __jsx(FiltersGroup, null)), __jsx(Movies, null, __jsx(Consumer, null, ({\n    movies\n  }) => movies.map((fields, i) => __jsx(Card, {\n    key: fields.Title,\n    cardId: i\n  })))))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["React","useEffect","useState","useCallback","useReducer","styled","Card","generalAPIService","FiltersGroup","Wrapper","div","Filters","Movies","initialState","movies","Title","Poster","Ratings","key","Saved","Watched","Type","Actors","Director","Genre","Year","Metascore","updateState","state","console","log","MoviesContext","createContext","Provider","Consumer","globalState","previosglobalState","movieReducer","action","type","payload","actualState","filter","Home","loading","isLoading","store","dispatch","reduceData","response","map","fetchData","result","get","reducedData","fields","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport styled from 'styled-components';\n\n//custom\nimport Card from '../app/contentComponents/Card/Card';\nimport generalAPIService from '../app/services/apiService';\nimport FiltersGroup from '../app/contentComponents/FiltersGroup/FiltersGroup';\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst Filters = styled.div`\n  display: flex;\n  width: 20%;\n  background-color: grey;\n`;\nconst Movies = styled.div`\n  display: flex;\n  width: 80%;\n  alignself: flex-start;\n  flex-wrap: wrap;\n`;\n\ninterface ImoviesResponseFields {\n  Title: string;\n  Poster: string;\n  Ratings: {}[];\n  key: string;\n  Saved: string;\n  Watched: string;\n  Actors: string;\n  Director: string;\n  Genre: string;\n  Year: string;\n  Metascore: string;\n  Type: 'movie' | 'series';\n}\nconst initialState = {\n  movies: [\n    {\n      Title: 'string',\n      Poster: 'string',\n      Ratings: [{}],\n      key: 'string',\n      Saved: 'True',\n      Watched: 'False',\n      Type: 'movie',\n      Actors: 'string',\n      Director: 'string',\n      Genre: 'string',\n      Year: 'string',\n      Metascore: 'string',\n    },\n  ],\n  updateState: (state) => {\n    console.log('....state', state);\n  },\n};\nexport const MoviesContext = React.createContext(initialState);\nconst { Provider, Consumer } = MoviesContext;\n\nlet globalState = [];\nlet previosglobalState = [];\n/*eslint no-case-declarations: \"off\"*/\n\nconst movieReducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_FROM_FETCH':\n      /* [\n        ...action.payload.filter(({ Watched }) =>\n          JSON.parse(Watched.toLowerCase())\n        ),\n      ]; */\n      return { ...state, movies: [...action.payload] };\n    case 'FILTER_WATCH':\n      console.log('gagdgegeeeeeeeee', action.payload);\n      console.log('state', state);\n      const actualState = globalState;\n\n      return {\n        ...state,\n        movies: [\n          ...state.movies.filter(({ Watched }) => Watched === action.payload),\n        ],\n      };\n    // return state;\n    default:\n      return state;\n  }\n};\n\nconst Home = () => {\n  const [loading, isLoading] = useState(true);\n  //const [movies, getMovies] = useState([]);\n  const [store, dispatch] = useReducer(movieReducer, initialState);\n\n  const reduceData = useCallback((response: {}[]) => {\n    return response.map(\n      ({\n        Title,\n        Poster,\n        Ratings,\n        Watched,\n        Saved,\n        Actors,\n        Director,\n        Genre,\n        Year,\n        Type,\n        Metascore,\n      }: ImoviesResponseFields) => {\n        return {\n          Title,\n          Poster,\n          Ratings,\n          Watched,\n          Saved,\n          Actors,\n          Director,\n          Genre,\n          Year,\n          Type,\n          Metascore,\n        };\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    isLoading(true);\n    const fetchData = async () => {\n      const result = await generalAPIService.get('/api/movies');\n      const reducedData = reduceData(result);\n      globalState = reducedData;\n      dispatch({ type: 'UPDATE_FROM_FETCH', payload: reducedData });\n      isLoading(false);\n    };\n\n    fetchData();\n  }, [reduceData]);\n\n  console.log('gagdg', store);\n\n  return (\n    <main>\n      {loading && 'movies are loading'}\n      {!loading && (\n        <Provider\n          value={{\n            ...store,\n            updateState: (state: boolean) =>\n              dispatch({ type: 'FILTER_WATCH', payload: state }),\n          }}\n        >\n          <Wrapper>\n            <Filters>\n              <FiltersGroup />\n            </Filters>\n            <Movies>\n              <Consumer>\n                {({ movies }) =>\n                  movies.map((fields, i) => (\n                    <Card key={fields.Title} cardId={i} />\n                  ))\n                }\n              </Consumer>\n            </Movies>\n          </Wrapper>\n        </Provider>\n      )}\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}