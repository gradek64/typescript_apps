{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  color: white;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useContext } from 'react';\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined'; //custom\n\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport wrapperIconHOC from '../../contentComponents/IconCTA/IconAction';\nimport { MoviesContext } from '../../../pages/index';\n/* const all = Object.entries(generateFilters());\nconst displayed1 = all.slice(0, 5);\nconst hidden1 = all.slice(5, all.length); */\n\nvar FilterContainer = styled.div(_templateObject());\nvar CheckBox = wrapperIconHOC(CheckBoxOutlineBlankOutlinedIcon, CheckBoxOutlinedIcon);\n\nfunction FiltersGroup() {\n  var _useContext = useContext(MoviesContext),\n      movies = _useContext.movies,\n      updateState = _useContext.updateState;\n  /* const { Watched, Saved, Title, Poster: PosterURL, Ratings } = [...movies];\n  const movieStatus = {\n    watch: JSON.parse(Watched.toLowerCase()),\n    favorite: JSON.parse(Saved.toLowerCase()),\n  }; */\n\n\n  var callToAction = function callToAction(state) {\n    var yes = state.yes,\n        no = state.no;\n    updateState(yes ? 'True' : 'False');\n  };\n\n  console.log('movies', movies);\n  /* const displayFilters = (ArrOfFilters:[])=>(\n  \n  {displayed:ArrOfFilters.slice(0, 5),\n  hidden:ArrOfFilters.slice(5, allFilteres.length)}\n  ) */\n\n  console.log();\n  var watched = Object.entries({\n    YES: movies.filter(function (_ref) {\n      var Watched = _ref.Watched;\n      return Watched === 'True';\n    }).length,\n    NO: movies.filter(function (_ref2) {\n      var Watched = _ref2.Watched;\n      return Watched === 'False';\n    }).length\n  });\n  var type = Object.entries({\n    MOVIE: movies.filter(function (_ref3) {\n      var Type = _ref3.Type;\n      return Type === 'movie';\n    }).length,\n    SERIES: movies.filter(function (_ref4) {\n      var Type = _ref4.Type;\n      return Type === 'series';\n    }).length\n  }); //actors\n\n  var actorsFilters = movies.map(function (_ref5) {\n    var Actors = _ref5.Actors;\n    return generateFilters(Actors, movies.length);\n  });\n  console.log('actorsFilters', actorsFilters);\n  /*  const displayed = watched.slice(0, 5);\n  const hidden = watched.slice(5, all.length); */\n\n  /* const FilterLabel = {\n    watched,\n    type,\n    actors:generateFilters()\n  }; */\n\n  var ss = true;\n  return __jsx(React.Fragment, null, ss && '...loadin', __jsx(FilterContainer, null, ['watched'].map(function (title) {\n    return __jsx(\"div\", {\n      className: \"accordion\"\n    }, __jsx(Accordion, {\n      open: true,\n      shevron: false,\n      clickDisable: true,\n      title: title\n    }, __jsx(\"div\", null, [].map(function (_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 2),\n          key = _ref7[0],\n          value = _ref7[1];\n\n      return __jsx(\"div\", {\n        key: key\n      }, __jsx(CheckBox, {\n        callToAction: callToAction,\n        icon: \"yes\"\n      }), \"\".concat(key, \"(\").concat(value, \")\"));\n    }))), [].length > 0 && __jsx(Accordion, {\n      title: '...more',\n      directional: true,\n      shevron: false\n    }, [].map(function (_ref8) {\n      var _ref9 = _slicedToArray(_ref8, 2),\n          key = _ref9[0],\n          value = _ref9[1];\n\n      return __jsx(\"div\", {\n        key: key\n      }, __jsx(CheckBox, {\n        callToAction: callToAction,\n        icon: \"no\"\n      }), \"\".concat(key, \"(\").concat(value, \")\"));\n    })));\n  })));\n} //make sure it render only the amount of movies.lenght\n\n\nexport default React.memo(FiltersGroup);","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/FiltersGroup.tsx"],"names":["React","useContext","CheckBoxOutlineBlankOutlinedIcon","CheckBoxOutlinedIcon","Accordion","generateFilters","styled","wrapperIconHOC","MoviesContext","FilterContainer","div","CheckBox","FiltersGroup","movies","updateState","callToAction","state","yes","no","console","log","watched","Object","entries","YES","filter","Watched","length","NO","type","MOVIE","Type","SERIES","actorsFilters","map","Actors","ss","title","key","value","memo"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined';\n\n//custom\nimport Accordion from '../Accordion/Accordion';\nimport { generateFilters } from '../FiltersGroup/generateFilters';\nimport styled from 'styled-components';\nimport wrapperIconHOC from '../../contentComponents/IconCTA/IconAction';\nimport { MoviesContext } from '../../../pages/index';\n\n/* const all = Object.entries(generateFilters());\nconst displayed1 = all.slice(0, 5);\nconst hidden1 = all.slice(5, all.length); */\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n`;\n\nconst CheckBox = wrapperIconHOC(\n  CheckBoxOutlineBlankOutlinedIcon,\n  CheckBoxOutlinedIcon\n);\n\nfunction FiltersGroup() {\n  const { movies, updateState } = useContext(MoviesContext);\n  /* const { Watched, Saved, Title, Poster: PosterURL, Ratings } = [...movies];\n  const movieStatus = {\n    watch: JSON.parse(Watched.toLowerCase()),\n    favorite: JSON.parse(Saved.toLowerCase()),\n  }; */\n\n  const callToAction = (state) => {\n    const { yes, no } = state;\n    updateState(yes ? 'True' : 'False');\n  };\n  console.log('movies', movies);\n\n  /* const displayFilters = (ArrOfFilters:[])=>(\n  \n  {displayed:ArrOfFilters.slice(0, 5),\n  hidden:ArrOfFilters.slice(5, allFilteres.length)}\n ) */\n  console.log();\n  const watched = Object.entries({\n    YES: movies.filter(({ Watched }) => Watched === 'True').length,\n    NO: movies.filter(({ Watched }) => Watched === 'False').length,\n  });\n\n  const type = Object.entries({\n    MOVIE: movies.filter(({ Type }) => Type === 'movie').length,\n    SERIES: movies.filter(({ Type }) => Type === 'series').length,\n  });\n\n  //actors\n  const actorsFilters = movies.map(({ Actors }) =>\n    generateFilters(Actors, movies.length)\n  );\n\n  console.log('actorsFilters', actorsFilters);\n\n  /*  const displayed = watched.slice(0, 5);\n  const hidden = watched.slice(5, all.length); */\n\n  /* const FilterLabel = {\n    watched,\n    type,\n    actors:generateFilters()\n  }; */\n\n  const ss = true;\n  return (\n    <>\n      {ss && '...loadin'}\n      <FilterContainer>\n        {['watched'].map((title) => (\n          <div className=\"accordion\">\n            <Accordion open shevron={false} clickDisable={true} title={title}>\n              <div>\n                {[].map(([key, value]) => (\n                  <div key={key}>\n                    <CheckBox callToAction={callToAction} icon=\"yes\" />\n                    {`${key}(${value})`}\n                  </div>\n                ))}\n              </div>\n            </Accordion>\n            {[].length > 0 && (\n              <Accordion title={'...more'} directional={true} shevron={false}>\n                {[].map(([key, value]) => (\n                  <div key={key}>\n                    <CheckBox callToAction={callToAction} icon=\"no\" />\n                    {`${key}(${value})`}\n                  </div>\n                ))}\n              </Accordion>\n            )}\n          </div>\n        ))}\n      </FilterContainer>\n    </>\n  );\n}\n\n//make sure it render only the amount of movies.lenght\nexport default React.memo(FiltersGroup);\n"]},"metadata":{},"sourceType":"module"}