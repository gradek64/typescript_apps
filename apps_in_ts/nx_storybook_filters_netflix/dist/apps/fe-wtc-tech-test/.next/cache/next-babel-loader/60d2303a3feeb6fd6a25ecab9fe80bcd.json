{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useState } from 'react';\nimport styled, { css } from 'styled-components'; //styles\n\nconst AccordionHeader = styled.button`\n  display: flex;\n  width: 100%;\n  height: 30px;\n  align-items: center;\n  padding: 10px;\n  justify-content: space-between;\n  border: none;\n  ${props => props.disabled && css`\n      color: black;\n    `}\n  &.active {\n    background-color: orange;\n  }\n`;\nconst AccordionContent = styled.div`\n  overflow: hidden;\n  height: auto;\n  width: 100%;\n  transition: height 0.6s ease;\n`;\nconst ChevronIcon = styled.span`\n  transition: transform 0.6s ease;\n  &.rotate {\n    transform: rotate(90deg);\n  }\n`;\nconst Chevron = styled.span`\n  transition: transform 0.6s ease;\n  &:before {\n    border-style: solid;\n    border-width: 0.1em 0.1em 0 0;\n    content: '';\n    display: inline-block;\n    height: 0.45em;\n    left: 0.15em;\n    position: relative;\n    top: 0.15em;\n    vertical-align: top;\n    width: 0.45em;\n  }\n  &.right {\n    &:before {\n      left: 0;\n      transform: rotate(90deg);\n    }\n  }\n  &.active {\n    transform: rotate(90deg);\n  }\n`;\n\nfunction Accordion(props) {\n  var _refContent$current;\n\n  const {\n    children,\n    open = false,\n    shevron = true,\n    clickDisable = false\n  } = props;\n  const refContent = useRef(null);\n  const {\n    0: isOpen,\n    1: setOpen\n  } = useState(open ? 'active' : '');\n  /* <ChevronIcon className={!!isOpen && 'rotate'}>\n            <ChevronRightIcon />\n          </ChevronIcon> */\n\n  return __jsx(\"div\", {\n    className: \"accordion\"\n  }, __jsx(AccordionHeader, {\n    className: `accordionHeader ${isOpen}`,\n    onClick: () => {\n      setOpen(!isOpen ? 'active' : '');\n    },\n    disabled: clickDisable\n  }, __jsx(\"span\", {\n    className: \"accordionTitle\"\n  }, \"AccordionTitle\"), shevron && __jsx(Chevron, {\n    className: `accordionHeader ${isOpen}`\n  })), __jsx(AccordionContent, {\n    ref: refContent,\n    style: {\n      height: `${isOpen !== '' ? Number((_refContent$current = refContent.current) === null || _refContent$current === void 0 ? void 0 : _refContent$current.scrollHeight) : 0}px`\n    }\n  }, children));\n}\n\nexport default Accordion;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/Accordion/Accordion.tsx"],"names":["AccordionHeader","styled","button","props","css","AccordionContent","div","ChevronIcon","span","Chevron","open","shevron","clickDisable","refContent","useRef","setOpen","useState","isOpen","height","Number"],"mappings":";AAAA,OAAA,KAAA,IAAA,MAAA,EAAA,QAAA,QAAA,OAAA;AAEA,OAAA,MAAA,IAAA,GAAA,QAAA,mBAAA,C,CAEA;;AACA,MAAMA,eAAe,GAAGC,MAAM,CAACC,MAE5B;;;;;;;;IAQEC,KAAD,IACAA,KAAK,CAALA,QAAAA,IACAC,GAAI;;KAEF;;;;CAdN;AAoBA,MAAMC,gBAAgB,GAAGJ,MAAM,CAACK,GAAI;;;;;CAApC;AAOA,MAAMC,WAAW,GAAGN,MAAM,CAACO,IAAK;;;;;CAAhC;AAOA,MAAMC,OAAO,GAAGR,MAAM,CAACO,IAAK;;;;;;;;;;;;;;;;;;;;;;;CAA5B;;AA+BA,SAAA,SAAA,CAAA,KAAA,EAAkC;AAAA,MAAA,mBAAA;;AAChC,QAAM;AAAA,IAAA,QAAA;AAEJE,IAAAA,IAAI,GAFA,KAAA;AAGJC,IAAAA,OAAO,GAHH,IAAA;AAIJC,IAAAA,YAAY,GAAG;AAJX,MAAN,KAAA;AAOA,QAAMC,UAAU,GAAGC,MAAM,CAAzB,IAAyB,CAAzB;AACA,QAAM;AAAA,OAAA,MAAA;AAAA,OAASC;AAAT,MAAoBC,QAAQ,CAACN,IAAI,GAAA,QAAA,GAAvC,EAAkC,CAAlC;AACA;;;;AAGA,SACE,KAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EACE,KAAA,CAAA,eAAA,EAAA;AACE,IAAA,SAAS,EAAG,mBAAkBO,MADhC,EAAA;AAEE,IAAA,OAAO,EAAE,MAAM;AACbF,MAAAA,OAAO,CAAC,CAAA,MAAA,GAAA,QAAA,GAARA,EAAO,CAAPA;AAHJ,KAAA;AAKE,IAAA,QAAQ,EAAEH;AALZ,GAAA,EAOE,KAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAC;AAAhB,GAAA,EAPF,gBAOE,CAPF,EAQGD,OAAO,IAAI,KAAA,CAAA,OAAA,EAAA;AAAS,IAAA,SAAS,EAAG,mBAAkBM,MAAO;AAA9C,GAAA,CARd,CADF,EAWE,KAAA,CAAA,gBAAA,EAAA;AACE,IAAA,GAAG,EADL,UAAA;AAEE,IAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAG,GACPD,MAAM,KAANA,EAAAA,GAAgBE,MAAM,CAAA,CAAA,mBAAA,GAACN,UAAU,CAAX,OAAA,MAAA,IAAA,IAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAACA,mBAAAA,CAAvBI,YAAsB,CAAtBA,GAA2D,CAC5D;AAHI;AAFT,GAAA,EAZJ,QAYI,CAXF,CADF;AAwBD;;AAED,eAAA,SAAA","sourcesContent":["import React, { useRef, useState, useMemo, useCallback } from 'react';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport styled, { css } from 'styled-components';\n\n//styles\nconst AccordionHeader = styled.button<{\n  disabled: boolean;\n}>`\n  display: flex;\n  width: 100%;\n  height: 30px;\n  align-items: center;\n  padding: 10px;\n  justify-content: space-between;\n  border: none;\n  ${(props) =>\n    props.disabled &&\n    css`\n      color: black;\n    `}\n  &.active {\n    background-color: orange;\n  }\n`;\n\nconst AccordionContent = styled.div`\n  overflow: hidden;\n  height: auto;\n  width: 100%;\n  transition: height 0.6s ease;\n`;\n\nconst ChevronIcon = styled.span`\n  transition: transform 0.6s ease;\n  &.rotate {\n    transform: rotate(90deg);\n  }\n`;\n\nconst Chevron = styled.span`\n  transition: transform 0.6s ease;\n  &:before {\n    border-style: solid;\n    border-width: 0.1em 0.1em 0 0;\n    content: '';\n    display: inline-block;\n    height: 0.45em;\n    left: 0.15em;\n    position: relative;\n    top: 0.15em;\n    vertical-align: top;\n    width: 0.45em;\n  }\n  &.right {\n    &:before {\n      left: 0;\n      transform: rotate(90deg);\n    }\n  }\n  &.active {\n    transform: rotate(90deg);\n  }\n`;\n\ninterface PropsI {\n  children: React.ReactNode;\n  open?: boolean;\n  shevron?: boolean;\n  clickDisable?: boolean;\n}\nfunction Accordion(props: PropsI) {\n  const {\n    children,\n    open = false,\n    shevron = true,\n    clickDisable = false,\n  } = props;\n\n  const refContent = useRef<HTMLDivElement>(null);\n  const [isOpen, setOpen] = useState(open ? 'active' : '');\n  /* <ChevronIcon className={!!isOpen && 'rotate'}>\n            <ChevronRightIcon />\n          </ChevronIcon> */\n  return (\n    <div className=\"accordion\">\n      <AccordionHeader\n        className={`accordionHeader ${isOpen}`}\n        onClick={() => {\n          setOpen(!isOpen ? 'active' : '');\n        }}\n        disabled={clickDisable}\n      >\n        <span className=\"accordionTitle\">AccordionTitle</span>\n        {shevron && <Chevron className={`accordionHeader ${isOpen}`} />}\n      </AccordionHeader>\n      <AccordionContent\n        ref={refContent}\n        style={{\n          height: `${\n            isOpen !== '' ? Number(refContent.current?.scrollHeight) : 0\n          }px`,\n        }}\n      >\n        {children}\n      </AccordionContent>\n    </div>\n  );\n}\n\nexport default Accordion;\n"]},"metadata":{},"sourceType":"module"}