{"ast":null,"code":"const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 = 'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  const actors3 = 'Harrison Ford'; //first combine actors results\n\n  const allActors = [...actors.split(','), ...actors2.split(','), ...actors3.split(',')];\n  const filteredActors = [];\n  let duplicatesdActors = []; //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  /* const ss = allActors.map((actor) => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n      duplicatesdActors.push(actor);\n    }\n     if (duplicatesdActors.length > 0) {\n      filteredActors.push(duplicatesdActors);\n      //do it again for the first actor on first interation\n      if (allActors.includes(duplicatesdActors[0])) {\n        console.log('duplicate actor', actor);\n        duplicatesdActors.push(actor);\n      }\n      duplicatesdActors = [];\n    } else {\n      filteredActors.push(actor);\n       console.log('filteredActors', filteredActors);\n    }\n  }); */\n\n  function findDuplicate(arra1) {\n    const object = {};\n    arra1.forEach(function (item) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('duplicate', findDuplicate(allActors));\n};\n\nexport { generateFilters };","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/app/contentComponents/FiltersGroup/generateFilters.tsx"],"names":["generateFilters","actors","actors2","actors3","allActors","split","filteredActors","duplicatesdActors","findDuplicate","arra1","object","forEach","item","trimStirng","trim","console","log"],"mappings":"AAAA,MAAMA,eAAe,GAAG,MAAM;AAC5B,QAAMC,MAAM,GAAG,6DAAf;AACA,QAAMC,OAAO,GACX,4EADF;AAEA,QAAMC,OAAO,GAAG,eAAhB,CAJ4B,CAM5B;;AAEA,QAAMC,SAAS,GAAG,CAChB,GAAGH,MAAM,CAACI,KAAP,CAAa,GAAb,CADa,EAEhB,GAAGH,OAAO,CAACG,KAAR,CAAc,GAAd,CAFa,EAGhB,GAAGF,OAAO,CAACE,KAAR,CAAc,GAAd,CAHa,CAAlB;AAKA,QAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,iBAAiB,GAAG,EAAxB,CAd4B,CAe5B;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AAsBA,WAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,UAAMC,MAAM,GAAG,EAAf;AACAD,IAAAA,KAAK,CAACE,OAAN,CAAc,UAAUC,IAAV,EAAwB;AACpC,YAAMC,UAAU,GAAGD,IAAI,CAACE,IAAL,EAAnB;AACA,UAAI,CAACJ,MAAM,CAACG,UAAD,CAAX,EAAyBH,MAAM,CAACG,UAAD,CAAN,GAAqB,CAArB;AACzBH,MAAAA,MAAM,CAACG,UAAD,CAAN,IAAsB,CAAtB;AACD,KAJD;AAKA,WAAOH,MAAP;AACD;;AAEDK,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBR,aAAa,CAACJ,SAAD,CAAtC;AACD,CAnDD;;AAqDA,SAASJ,eAAT","sourcesContent":["const generateFilters = () => {\n  const actors = 'Harrison Ford, Rutger Hauer, Sean Young, Edward James Olmos';\n  const actors2 =\n    'Harrison Ford, Russell Crowe, Joaquin Phoenix, Connie Nielsen, Oliver Reed';\n  const actors3 = 'Harrison Ford';\n\n  //first combine actors results\n\n  const allActors = [\n    ...actors.split(','),\n    ...actors2.split(','),\n    ...actors3.split(','),\n  ];\n  const filteredActors = [];\n  let duplicatesdActors = [];\n  //to avoid chacking if i===array.lenght -1 consider making promise to get all values\n  //and continue with the code\n\n  /* const ss = allActors.map((actor) => {\n    //duplicates\n    if (filteredActors.includes(actor)) {\n      console.log('duplicate actor', actor);\n      duplicatesdActors.push(actor);\n    }\n\n    if (duplicatesdActors.length > 0) {\n      filteredActors.push(duplicatesdActors);\n      //do it again for the first actor on first interation\n      if (allActors.includes(duplicatesdActors[0])) {\n        console.log('duplicate actor', actor);\n        duplicatesdActors.push(actor);\n      }\n      duplicatesdActors = [];\n    } else {\n      filteredActors.push(actor);\n\n      console.log('filteredActors', filteredActors);\n    }\n  }); */\n\n  function findDuplicate(arra1) {\n    const object = {};\n    arra1.forEach(function (item: string) {\n      const trimStirng = item.trim();\n      if (!object[trimStirng]) object[trimStirng] = 0;\n      object[trimStirng] += 1;\n    });\n    return object;\n  }\n\n  console.log('duplicate', findDuplicate(allActors));\n};\n\nexport { generateFilters };\n"]},"metadata":{},"sourceType":"module"}