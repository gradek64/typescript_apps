{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components'; //custom\n\nimport { showStarRating } from './ratingCalculation';\nconst RatingContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  padding: 0 10px;\n`;\n\nfunction Rating(props) {\n  const {\n    rating\n  } = props;\n  const allStars = 5;\n  /*\n  const allStars = 5;\n  const percentage = String((rating * allStars) / 100);\n  const calculateRating = percentage.split('.');\n  const wholeStars = Number(calculateRating[0]);\n  const halfStar = Number(calculateRating[1]) === 0 ? 0 : 1;\n  const emptyStars = allStars - wholeStars - halfStar;\n   const displayStars = () => {\n    const startMap = {\n      wholeStar: (props: { key: string }) => <StarIcon {...props} />,\n      halfStar: (props: { key: string }) => <StarHalfIcon {...props} />,\n      emptyStar: (props: { key: string }) => (\n        <StarBorderOutlinedIcon {...props} />\n      ),\n    };\n    const wholeStarts = Array(wholeStars).fill(startMap['wholeStar']);\n    const halfStarts = Array(halfStar).fill(startMap['halfStar']);\n    const emptyStarts = Array(emptyStars).fill(startMap['emptyStar']);\n     return [...wholeStarts, ...halfStarts, ...emptyStarts];\n  };\n  displayStars(); */\n\n  const stars = showStarRating(rating, allStars);\n  const percentage = String(rating * allStars / 100);\n  return __jsx(RatingContainer, null, stars.map((Comp, i) => __jsx(Comp, {\n    key: `star${i}`\n  })), __jsx(\"span\", null, \"(\", String(percentage), \")\"));\n}\n\nexport default Rating;","map":{"version":3,"sources":["/Users/gilg/dev/job_tests/fe-tech-test-greg-gil/apps/fe-wtc-tech-test/pages/RatingStarComp/Rating.tsx"],"names":["RatingContainer","styled","div","rating","allStars","stars","showStarRating","percentage","String","i"],"mappings":";AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,MAAA,MAAA,mBAAA,C,CACA;;AACA,SAAA,cAAA,QAAA,qBAAA;AAEA,MAAMA,eAAe,GAAGC,MAAM,CAACC,GAAI;;;;;;CAAnC;;AAYA,SAAA,MAAA,CAAA,KAAA,EAAiC;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAN,KAAA;AACA,QAAMC,QAAQ,GAAd,CAAA;AACA;;;;;;;;;;;;;;;;;;;;;;AAuBA,QAAMC,KAAK,GAAGC,cAAc,CAAA,MAAA,EAA5B,QAA4B,CAA5B;AACA,QAAMC,UAAU,GAAGC,MAAM,CAAEL,MAAM,GAAP,QAACA,GAA3B,GAAyB,CAAzB;AACA,SACE,KAAA,CAAA,eAAA,EAAA,IAAA,EACG,KAAK,CAAL,GAAA,CAAU,CAAA,IAAA,EAAA,CAAA,KACT,KAAA,CAAA,IAAA,EAAA;AAAM,IAAA,GAAG,EAAG,OAAMM,CAAE;AAApB,GAAA,CADD,CADH,EAIE,KAAA,CAAA,MAAA,EAAA,IAAA,EAAA,GAAA,EAAQD,MAAM,CAAd,UAAc,CAAd,EALJ,GAKI,CAJF,CADF;AAQD;;AAED,eAAA,MAAA","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n//custom\nimport { showStarRating } from './ratingCalculation';\n\nconst RatingContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  padding: 0 10px;\n`;\n\ninterface PropsInt {\n  rating: number;\n}\n\nfunction Rating(props: PropsInt) {\n  const { rating } = props;\n  const allStars = 5;\n  /*\n  const allStars = 5;\n  const percentage = String((rating * allStars) / 100);\n  const calculateRating = percentage.split('.');\n  const wholeStars = Number(calculateRating[0]);\n  const halfStar = Number(calculateRating[1]) === 0 ? 0 : 1;\n  const emptyStars = allStars - wholeStars - halfStar;\n\n  const displayStars = () => {\n    const startMap = {\n      wholeStar: (props: { key: string }) => <StarIcon {...props} />,\n      halfStar: (props: { key: string }) => <StarHalfIcon {...props} />,\n      emptyStar: (props: { key: string }) => (\n        <StarBorderOutlinedIcon {...props} />\n      ),\n    };\n    const wholeStarts = Array(wholeStars).fill(startMap['wholeStar']);\n    const halfStarts = Array(halfStar).fill(startMap['halfStar']);\n    const emptyStarts = Array(emptyStars).fill(startMap['emptyStar']);\n\n    return [...wholeStarts, ...halfStarts, ...emptyStarts];\n  };\n  displayStars(); */\n  const stars = showStarRating(rating, allStars);\n  const percentage = String((rating * allStars) / 100);\n  return (\n    <RatingContainer>\n      {stars.map((Comp, i) => (\n        <Comp key={`star${i}`} />\n      ))}\n      <span>({String(percentage)})</span>\n    </RatingContainer>\n  );\n}\n\nexport default Rating;\n"]},"metadata":{},"sourceType":"module"}